# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cli.rst:6
# 986abb94af9c4a1c9333477e27d591f2
msgid "Command Line Interface"
msgstr ""

#: ../../cli.rst:8
# 4b7e446731a24be4a6980ab7833c0f13
msgid "Installing Flask installs the ``flask`` script, a `Click`_ command line interface, in your virtualenv. Executed from the terminal, this script gives access to built-in, extension, and application-defined commands. The ``--help`` option will give more information about any commands and options."
msgstr ""

#: ../../cli.rst:17
# 5c79acd9e94049f2890a6db5ce5d8885
msgid "Application Discovery"
msgstr ""

#: ../../cli.rst:19
# 1adefc67aa4847868f3a020937c9201a
msgid "The ``flask`` command is installed by Flask, not your application; it must be told where to find your application in order to use it. The ``FLASK_APP`` environment variable is used to specify how to load the application."
msgstr ""

#: ../../cli.rst:23
# 635a1952327744128bc8d7af9733cb05
msgid "Unix Bash (Linux, Mac, etc.)::"
msgstr ""

#: ../../cli.rst:28
# 1bb225e08abd4b4f97cec3f17ea5f1e0
msgid "Windows CMD::"
msgstr ""

#: ../../cli.rst:33
# 1e2cf03d935d470e90135e90ae7c4d7f
msgid "Windows PowerShell::"
msgstr ""

#: ../../cli.rst:38
# e5e22d619fda42899d45d8bef99fff98
msgid "While ``FLASK_APP`` supports a variety of options for specifying your application, most use cases should be simple. Here are the typical values:"
msgstr ""

#: ../../cli.rst:44
# 9c27340fdde54da8917b0da66bfb04cd
msgid "(nothing)"
msgstr ""

#: ../../cli.rst:42
# 6701c2dfd972415f9d24e5d2449e4544
msgid "The file :file:`wsgi.py` is imported, automatically detecting an app (``app``). This provides an easy way to create an app from a factory with extra arguments."
msgstr ""

#: ../../cli.rst:48
# b24a3d97c94b4978b95bf671db938923
msgid "``FLASK_APP=hello``"
msgstr ""

#: ../../cli.rst:47
# 606883e7901a4c94942a03ab28fdbc58
msgid "The name is imported, automatically detecting an app (``app``) or factory (``create_app``)."
msgstr ""

#: ../../cli.rst:52
# 96704387cfaf44db91a7b2d7c403a7ac
msgid "``FLASK_APP`` has three parts: an optional path that sets the current working directory, a Python file or dotted import path, and an optional variable name of the instance or factory. If the name is a factory, it can optionally be followed by arguments in parentheses. The following values demonstrate these parts:"
msgstr ""

#: ../../cli.rst:59
# 877b2439669a4285b9136fe2c80a7b0e
msgid "``FLASK_APP=src/hello``"
msgstr ""

#: ../../cli.rst:59
# 3491e0c79b4a437c9744f804f8822741
msgid "Sets the current working directory to ``src`` then imports ``hello``."
msgstr ""

#: ../../cli.rst:62
# a6d0f7d87f2d4777bbc5f0fcd83cc799
msgid "``FLASK_APP=hello.web``"
msgstr ""

#: ../../cli.rst:62
# 369db943a4d84760bf340426b8e00e2a
msgid "Imports the path ``hello.web``."
msgstr ""

#: ../../cli.rst:65
# a9add127fabb4c089214b06cca3f07df
msgid "``FLASK_APP=hello:app2``"
msgstr ""

#: ../../cli.rst:65
# 493ee2e9b1cd42afa708f1216720f76b
msgid "Uses the ``app2`` Flask instance in ``hello``."
msgstr ""

#: ../../cli.rst:69
# 3a4aac51b58d4781aa989a0d676b111a
msgid "``FLASK_APP=\"hello:create_app('dev')\"``"
msgstr ""

#: ../../cli.rst:68
# b12fd0cf91c948bf9bd88313905d96b7
msgid "The ``create_app`` factory in ``hello`` is called with the string ``'dev'`` as the argument."
msgstr ""

#: ../../cli.rst:71
# bd645fb19c924fe881406d3b164480e3
msgid "If ``FLASK_APP`` is not set, the command will try to import \"app\" or \"wsgi\" (as a \".py\" file, or package) and try to detect an application instance or factory."
msgstr ""

#: ../../cli.rst:75
# 72b2f02e781f4c658f5e07fdee6780fb
msgid "Within the given import, the command looks for an application instance named ``app`` or ``application``, then any application instance. If no instance is found, the command looks for a factory function named ``create_app`` or ``make_app`` that returns an instance."
msgstr ""

#: ../../cli.rst:80
# abb1741a915041cb861a4ef28189f259
msgid "When calling an application factory, if the factory takes an argument named ``script_info``, then the :class:`~cli.ScriptInfo` instance is passed as a keyword argument. If the application factory takes only one argument and no parentheses follow the factory name, the :class:`~cli.ScriptInfo` instance is passed as a positional argument. If parentheses follow the factory name, their contents are parsed as Python literals and passes as arguments to the function. This means that strings must still be in quotes."
msgstr ""

#: ../../cli.rst:90
# 3bef32d36b1f4a97935846f523b07f64
msgid "Run the Development Server"
msgstr ""

#: ../../cli.rst:92
# 9d8d63bfe6cb4283b189af592c72e7dd
msgid "The :func:`run <cli.run_command>` command will start the development server. It replaces the :meth:`Flask.run` method in most cases. ::"
msgstr ""

#: ../../cli.rst:99
# d798a03a8a1747dfa7034427771be904
msgid "Do not use this command to run your application in production. Only use the development server during development. The development server is provided for convenience, but is not designed to be particularly secure, stable, or efficient. See :ref:`deployment` for how to run in production."
msgstr ""

#: ../../cli.rst:106
# f7b1eea9531d4ade9fb40776480a5171
msgid "Open a Shell"
msgstr ""

#: ../../cli.rst:108
# a25d619b20d54be9b30ac4b57054ca1e
msgid "To explore the data in your application, you can start an interactive Python shell with the :func:`shell <cli.shell_command>` command. An application context will be active, and the app instance will be imported. ::"
msgstr ""

#: ../../cli.rst:119
# e264b9296b9944cda65c376f6fd89132
msgid "Use :meth:`~Flask.shell_context_processor` to add other automatic imports."
msgstr ""

#: ../../cli.rst:123
# 6bb666bf01db4dc79be43d8eea9222b3
msgid "Environments"
msgstr ""

#: ../../cli.rst:127
# b8306f0c8e554c77aa2cf860bbc59028
msgid "The environment in which the Flask app runs is set by the :envvar:`FLASK_ENV` environment variable. If not set it defaults to ``production``. The other recognized environment is ``development``. Flask and extensions may choose to enable behaviors based on the environment."
msgstr ""

#: ../../cli.rst:133
# 87820eb86ba44a41ba70c4cda3f706dc
msgid "If the env is set to ``development``, the ``flask`` command will enable debug mode and ``flask run`` will enable the interactive debugger and reloader."
msgstr ""

#: ../../cli.rst:150
# 0ce12affcfbe4881b475590caddc04c1
msgid "Watch Extra Files with the Reloader"
msgstr ""

#: ../../cli.rst:152
# 54c04da404174c54b9304e5420c7837e
msgid "When using development mode, the reloader will trigger whenever your Python code or imported modules change. The reloader can watch additional files with the ``--extra-files`` option, or the ``FLASK_RUN_EXTRA_FILES`` environment variable. Multiple paths are separated with ``:``, or ``;`` on Windows."
msgstr ""

#: ../../cli.rst:169
# 1b2c2cda86ad41c09791e426f3a62a9d
msgid "Debug Mode"
msgstr ""

#: ../../cli.rst:171
# 7327041d325c4aa4afc0e41dba102603
msgid "Debug mode will be enabled when :envvar:`FLASK_ENV` is ``development``, as described above. If you want to control debug mode separately, use :envvar:`FLASK_DEBUG`. The value ``1`` enables it, ``0`` disables it."
msgstr ""

#: ../../cli.rst:179
# ade9152798804a67aa2c728b42c9a977
msgid "Environment Variables From dotenv"
msgstr ""

#: ../../cli.rst:181
# 6188105556c2478e9b785d24c53bdf9b
msgid "Rather than setting ``FLASK_APP`` each time you open a new terminal, you can use Flask's dotenv support to set environment variables automatically."
msgstr ""

#: ../../cli.rst:184
# a62f6061cfbb40408bdac9ee5184806b
msgid "If `python-dotenv`_ is installed, running the ``flask`` command will set environment variables defined in the files :file:`.env` and :file:`.flaskenv`. This can be used to avoid having to set ``FLASK_APP`` manually every time you open a new terminal, and to set configuration using environment variables similar to how some deployment services work."
msgstr ""

#: ../../cli.rst:190
# 160b163f42494111bcf056a6f06f03ff
msgid "Variables set on the command line are used over those set in :file:`.env`, which are used over those set in :file:`.flaskenv`. :file:`.flaskenv` should be used for public variables, such as ``FLASK_APP``, while :file:`.env` should not be committed to your repository so that it can set private variables."
msgstr ""

#: ../../cli.rst:195
# 5e3897c7b6d04b60a06c600aa696639e
msgid "Directories are scanned upwards from the directory you call ``flask`` from to locate the files. The current working directory will be set to the location of the file, with the assumption that that is the top level project directory."
msgstr ""

#: ../../cli.rst:200
# 0009df8753e64605bca822c373b7175c
msgid "The files are only loaded by the ``flask`` command or calling :meth:`~Flask.run`. If you would like to load these files when running in production, you should call :func:`~cli.load_dotenv` manually."
msgstr ""

#: ../../cli.rst:208
# 8bf837ecc1fb4c1ba491ded2cb74ffe0
msgid "Setting Command Options"
msgstr ""

#: ../../cli.rst:210
# aed9eb26f81c48e2a3a3cc0de81109a6
msgid "Click is configured to load default values for command options from environment variables. The variables use the pattern ``FLASK_COMMAND_OPTION``. For example, to set the port for the run command, instead of ``flask run --port 8000``:"
msgstr ""

#: ../../cli.rst:221
# 53a6c0fcc05d444ead429b4fadc8966f
msgid "These can be added to the ``.flaskenv`` file just like ``FLASK_APP`` to control default command options."
msgstr ""

#: ../../cli.rst:226
# e0d0769e12c44ac9a745a9e6d5fbfda9
msgid "Disable dotenv"
msgstr ""

#: ../../cli.rst:228
# 870ba870e3ee4d57872de8f9f745701a
msgid "The ``flask`` command will show a message if it detects dotenv files but python-dotenv is not installed."
msgstr ""

#: ../../cli.rst:236
# 2a1148458f064478b87b36d5f55ecd95
msgid "You can tell Flask not to load dotenv files even when python-dotenv is installed by setting the ``FLASK_SKIP_DOTENV`` environment variable. This can be useful if you want to load them manually, or if you're using a project runner that loads them already. Keep in mind that the environment variables must be set before the app loads or it won't configure as expected."
msgstr ""

#: ../../cli.rst:250
# 5213616c0dbf4b32a3ef8362b6631ce2
msgid "Environment Variables From virtualenv"
msgstr ""

#: ../../cli.rst:252
# 50364a821a6d450e9698786f2de4883e
msgid "If you do not want to install dotenv support, you can still set environment variables by adding them to the end of the virtualenv's :file:`activate` script. Activating the virtualenv will set the variables."
msgstr ""

#: ../../cli.rst:256
# 87b45bbdb76342f5a622e166491c5c4e
msgid "Unix Bash, :file:`venv/bin/activate`::"
msgstr ""

#: ../../cli.rst:260
# 50b12c41708b4f87a9d01fb1aa24dfee
msgid "Windows CMD, :file:`venv\\\\Scripts\\\\activate.bat`::"
msgstr ""

#: ../../cli.rst:264
# 991481a4ab61465cad59109c3e25b886
msgid "It is preferred to use dotenv support over this, since :file:`.flaskenv` can be committed to the repository so that it works automatically wherever the project is checked out."
msgstr ""

#: ../../cli.rst:270
# 35b50041500b4fdb944187ed47323d32
msgid "Custom Commands"
msgstr ""

#: ../../cli.rst:272
# e8042bea95c04f298802fc28e8009262
msgid "The ``flask`` command is implemented using `Click`_. See that project's documentation for full information about writing commands."
msgstr ""

#: ../../cli.rst:275
# d0d47a8c811f4466ac6ecb486fba840e
msgid "This example adds the command ``create-user`` that takes the argument ``name``. ::"
msgstr ""

#: ../../cli.rst:292
# a8f9688652e84c3d99394f66ac8b1d86
msgid "This example adds the same command, but as ``user create``, a command in a group. This is useful if you want to organize multiple related commands. ::"
msgstr ""

#: ../../cli.rst:313
# b11b936a991f4ccaa6c6e323cf1ae4e0
msgid "See :ref:`testing-cli` for an overview of how to test your custom commands."
msgstr ""

#: ../../cli.rst:318
# 95b047d6ce6444709968899ae31faeb4
msgid "Registering Commands with Blueprints"
msgstr ""

#: ../../cli.rst:320
# 734a7ec3cecf40089a68022c0c64609e
msgid "If your application uses blueprints, you can optionally register CLI commands directly onto them. When your blueprint is registered onto your application, the associated commands will be available to the ``flask`` command. By default, those commands will be nested in a group matching the name of the blueprint."
msgstr ""

#: ../../cli.rst:343
# ddafd665bd6741b9bb91340a99c832e2
msgid "You can alter the group name by specifying the ``cli_group`` parameter when creating the :class:`Blueprint` object, or later with :meth:`app.register_blueprint(bp, cli_group='...') <Flask.register_blueprint>`. The following are equivalent:"
msgstr ""

#: ../../cli.rst:358
# 606737dfa8bd406cb584886caed7f18a
msgid "Specifying ``cli_group=None`` will remove the nesting and merge the commands directly to the application's level:"
msgstr ""

#: ../../cli.rst:373
# 14c7dde07a414e9595e885e20c9efbc3
msgid "Application Context"
msgstr ""

#: ../../cli.rst:375
# 1baa92e2550d498fb0946924799522fc
msgid "Commands added using the Flask app's :attr:`~Flask.cli` :meth:`~cli.AppGroup.command` decorator will be executed with an application context pushed, so your command and extensions have access to the app and its configuration. If you create a command using the Click :func:`~click.command` decorator instead of the Flask decorator, you can use :func:`~cli.with_appcontext` to get the same behavior. ::"
msgstr ""

#: ../../cli.rst:392
# 0b9e54a631cf4c9298d2c6583b7e9c56
msgid "If you're sure a command doesn't need the context, you can disable it::"
msgstr ""

#: ../../cli.rst:400
# 739a505152d64042a12f88cabff7c8b0
msgid "Plugins"
msgstr ""

#: ../../cli.rst:402
# fd1f8ebf293d44adac425504e0f68a47
msgid "Flask will automatically load commands specified in the ``flask.commands`` `entry point`_. This is useful for extensions that want to add commands when they are installed. Entry points are specified in :file:`setup.py` ::"
msgstr ""

#: ../../cli.rst:421
# 2503c537261b4ac4998ad3be6fd30c99
msgid "Inside :file:`flask_my_extension/commands.py` you can then export a Click object::"
msgstr ""

#: ../../cli.rst:430
# 442391132daa4a1dbe18f0d83d148feb
msgid "Once that package is installed in the same virtualenv as your Flask project, you can run ``flask my-command`` to invoke the command."
msgstr ""

#: ../../cli.rst:437
# 0421704778624942b9bba0ce938d3375
msgid "Custom Scripts"
msgstr ""

#: ../../cli.rst:439
# 66b30b70c7dd4516a574ab4a261158fa
msgid "When you are using the app factory pattern, it may be more convenient to define your own Click script. Instead of using ``FLASK_APP`` and letting Flask load your application, you can create your own Click object and export it as a `console script`_ entry point."
msgstr ""

#: ../../cli.rst:444
# 76b7c82d57f243fb88463b5bc25c7145
msgid "Create an instance of :class:`~cli.FlaskGroup` and pass it the factory::"
msgstr ""

#: ../../cli.rst:459
# 1baeace01e584be19ebb936c540ab83a
msgid "Define the entry point in :file:`setup.py`::"
msgstr ""

#: ../../cli.rst:473
# f39e640027f64325a28d4f24da6aad38
msgid "Install the application in the virtualenv in editable mode and the custom script is available. Note that you don't need to set ``FLASK_APP``. ::"
msgstr ""

#: ../../cli.rst:479
# 3a18710c577144a48f739ea62303f771
msgid "Errors in Custom Scripts"
msgstr ""

#: ../../cli.rst:481
# 5e2fd6d9e23d411fa4f3108cc24c7e54
msgid "When using a custom script, if you introduce an error in your module-level code, the reloader will fail because it can no longer load the entry point."
msgstr ""

#: ../../cli.rst:485
# fc90a59a97ad41d380b466932ead5f60
msgid "The ``flask`` command, being separate from your code, does not have this issue and is recommended in most cases."
msgstr ""

#: ../../cli.rst:492
# 8059d94d0fbc4fe880b8b0b88ab81369
msgid "PyCharm Integration"
msgstr ""

#: ../../cli.rst:494
# 3043beb9953944a6ae4b9d11fc5e21a3
msgid "Prior to PyCharm 2018.1, the Flask CLI features weren't yet fully integrated into PyCharm. We have to do a few tweaks to get them working smoothly. These instructions should be similar for any other IDE you might want to use."
msgstr ""

#: ../../cli.rst:499
# dcd520989c20434da7d0c0056fdb115e
msgid "In PyCharm, with your project open, click on *Run* from the menu bar and go to *Edit Configurations*. You'll be greeted by a screen similar to this:"
msgstr ""

#: ../../cli.rst:508
# 26aa926f8c2d4ab5bb7e915bab4c6de6
msgid "There's quite a few options to change, but once we've done it for one command, we can easily copy the entire configuration and make a single tweak to give us access to other commands, including any custom ones you may implement yourself."
msgstr ""

#: ../../cli.rst:513
# 91d0079764784ec694f62a20e23173da
msgid "Click the + (*Add New Configuration*) button and select *Python*. Give the configuration a good descriptive name such as \"Run Flask Server\". For the ``flask run`` command, check \"Single instance only\" since you can't run the server more than once at the same time."
msgstr ""

#: ../../cli.rst:518
# ed0704bbb414408b9a0f8b198c8a22da
msgid "Select *Module name* from the dropdown (**A**) then input ``flask``."
msgstr ""

#: ../../cli.rst:520
# cce44b761aeb43568f5a2b1ff9225ade
msgid "The *Parameters* field (**B**) is set to the CLI command to execute (with any arguments). In this example we use ``run``, which will run the development server."
msgstr ""

#: ../../cli.rst:524
# e270ff64a1a04607afb066d57f99e9b3
msgid "You can skip this next step if you're using :ref:`dotenv`. We need to add an environment variable (**C**) to identify our application. Click on the browse button and add an entry with ``FLASK_APP`` on the left and the Python import or file on the right (``hello`` for example)."
msgstr ""

#: ../../cli.rst:529
# c181875cc0e14b91a143f6c26cb46e5b
msgid "Next we need to set the working directory (**D**) to be the folder where our application resides."
msgstr ""

#: ../../cli.rst:532
# f3ea66cc77c448a4b58e7aa954ef02f5
msgid "If you have installed your project as a package in your virtualenv, you may untick the *PYTHONPATH* options (**E**). This will more accurately match how you deploy the app later."
msgstr ""

#: ../../cli.rst:536
# e0b66422d91141debf417cc2a6b9146e
msgid "Click *Apply* to save the configuration, or *OK* to save and close the window. Select the configuration in the main PyCharm window and click the play button next to it to run the server."
msgstr ""

#: ../../cli.rst:540
# aff7443523e840e08adb69478bdd7fda
msgid "Now that we have a configuration which runs ``flask run`` from within PyCharm, we can copy that configuration and alter the *Script* argument to run a different CLI command, e.g. ``flask shell``."
msgstr ""

