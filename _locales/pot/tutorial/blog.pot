# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorial/blog.rst:4
# f81f667268cd41de8588f99003d1c7f5
msgid "Blog Blueprint"
msgstr ""

#: ../../tutorial/blog.rst:6
# 4ba34772fda84b26ac101d9da3c1dbed
msgid "You'll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it."
msgstr ""

#: ../../tutorial/blog.rst:11
# eb00e3c93bea4ee6884ab1abc7aad438
msgid "As you implement each view, keep the development server running. As you save your changes, try going to the URL in your browser and testing them out."
msgstr ""

#: ../../tutorial/blog.rst:16
# a3f96ff5e1d948f588654fffcd01bfaa
msgid "The Blueprint"
msgstr ""

#: ../../tutorial/blog.rst:18
# cb7986eac72c482fb4cb55c9c99434d1
msgid "Define the blueprint and register it in the application factory."
msgstr ""

#: ../../tutorial/blog.rst:20
#: ../../tutorial/blog.rst:76
#: ../../tutorial/blog.rst:142
#: ../../tutorial/blog.rst:198
#: ../../tutorial/blog.rst:228
#: ../../tutorial/blog.rst:320
# b95fb9db92fc4d7da927901c97270ba4
# 76ee1b5034a945f892e5173c6f1e6be9
# 75104715741743a5a1c1e8f5c142ddc3
# 6d5817cc6f1e4a2b90f057c21e83547a
# b652b536fa00411e8d4ab9ac9e3bbd3b
# 6bdaabb3e5df4074ba4f7558b459b2d2
msgid "``flaskr/blog.py``"
msgstr ""

#: ../../tutorial/blog.rst:33
# ac6571cc9e9c4b1bb64cc9b73c16401c
msgid "Import and register the blueprint from the factory using :meth:`app.register_blueprint() <Flask.register_blueprint>`. Place the new code at the end of the factory function before returning the app."
msgstr ""

#: ../../tutorial/blog.rst:37
# 85d408c34b2d4c85bcfde6a34cd0d0f1
msgid "``flaskr/__init__.py``"
msgstr ""

#: ../../tutorial/blog.rst:51
# 3372f4ca6bf74dd4983b0670c24860a5
msgid "Unlike the auth blueprint, the blog blueprint does not have a ``url_prefix``. So the ``index`` view will be at ``/``, the ``create`` view at ``/create``, and so on. The blog is the main feature of Flaskr, so it makes sense that the blog index will be the main index."
msgstr ""

#: ../../tutorial/blog.rst:56
# 81409b2ac9d24182a4fb9e992ecb5608
msgid "However, the endpoint for the ``index`` view defined below will be ``blog.index``. Some of the authentication views referred to a plain ``index`` endpoint. :meth:`app.add_url_rule() <Flask.add_url_rule>` associates the endpoint name ``'index'`` with the ``/`` url so that ``url_for('index')`` or ``url_for('blog.index')`` will both work, generating the same ``/`` URL either way."
msgstr ""

#: ../../tutorial/blog.rst:63
# 0a7fc52d92fd4b458303bbbcb49358a6
msgid "In another application you might give the blog blueprint a ``url_prefix`` and define a separate ``index`` view in the application factory, similar to the ``hello`` view. Then the ``index`` and ``blog.index`` endpoints and URLs would be different."
msgstr ""

#: ../../tutorial/blog.rst:70
# b16f3145a6bf427aad9c9d780744fc6a
msgid "Index"
msgstr ""

#: ../../tutorial/blog.rst:72
# 97f29b53825048f68c8b8ba677409306
msgid "The index will show all of the posts, most recent first. A ``JOIN`` is used so that the author information from the ``user`` table is available in the result."
msgstr ""

#: ../../tutorial/blog.rst:89
# 7c31de761ec448f194ab49c76a947b5a
msgid "``flaskr/templates/blog/index.html``"
msgstr ""

#: ../../tutorial/blog.rst:121
# 999875a2d0cc41a78aa06e4dd4e2866f
msgid "When a user is logged in, the ``header`` block adds a link to the ``create`` view. When the user is the author of a post, they'll see an \"Edit\" link to the ``update`` view for that post. ``loop.last`` is a special variable available inside `Jinja for loops`_. It's used to display a line after each post except the last one, to visually separate them."
msgstr ""

#: ../../tutorial/blog.rst:132
# 7c5997f2734b41709697be6be57468c7
msgid "Create"
msgstr ""

#: ../../tutorial/blog.rst:134
# ec1087eaade4444c8f62b68f70387802
msgid "The ``create`` view works the same as the auth ``register`` view. Either the form is displayed, or the posted data is validated and the post is added to the database or an error is shown."
msgstr ""

#: ../../tutorial/blog.rst:138
# a369e99b60784d5bbaa714e72e058b29
msgid "The ``login_required`` decorator you wrote earlier is used on the blog views. A user must be logged in to visit these views, otherwise they will be redirected to the login page."
msgstr ""

#: ../../tutorial/blog.rst:170
# 7aa3d90b2d344c82b846b955a188fddb
msgid "``flaskr/templates/blog/create.html``"
msgstr ""

#: ../../tutorial/blog.rst:191
# 85cfb24b2de04b19a91c7eacecbce451
msgid "Update"
msgstr ""

#: ../../tutorial/blog.rst:193
# a2480d90d2104f2a84af806b0bfeed46
msgid "Both the ``update`` and ``delete`` views will need to fetch a ``post`` by ``id`` and check if the author matches the logged in user. To avoid duplicating code, you can write a function to get the ``post`` and call it from each view."
msgstr ""

#: ../../tutorial/blog.rst:217
# ce6758054b274cd0bec79e051ad395bb
msgid ":func:`abort` will raise a special exception that returns an HTTP status code. It takes an optional message to show with the error, otherwise a default message is used. ``404`` means \"Not Found\", and ``403`` means \"Forbidden\". (``401`` means \"Unauthorized\", but you redirect to the login page instead of returning that status.)"
msgstr ""

#: ../../tutorial/blog.rst:223
# b888c5b94c894bde94d9ac0b96befc9d
msgid "The ``check_author`` argument is defined so that the function can be used to get a ``post`` without checking the author. This would be useful if you wrote a view to show an individual post on a page, where the user doesn't matter because they're not modifying the post."
msgstr ""

#: ../../tutorial/blog.rst:258
# 9a801f9c4cc34679bf4a1cc0103cf328
msgid "Unlike the views you've written so far, the ``update`` function takes an argument, ``id``. That corresponds to the ``<int:id>`` in the route. A real URL will look like ``/1/update``. Flask will capture the ``1``, ensure it's an :class:`int`, and pass it as the ``id`` argument. If you don't specify ``int:`` and instead do ``<id>``, it will be a string. To generate a URL to the update page, :func:`url_for` needs to be passed the ``id`` so it knows what to fill in: ``url_for('blog.update', id=post['id'])``. This is also in the ``index.html`` file above."
msgstr ""

#: ../../tutorial/blog.rst:268
# cdb7cf073b364ff38c4e18951d958040
msgid "The ``create`` and ``update`` views look very similar. The main difference is that the ``update`` view uses a ``post`` object and an ``UPDATE`` query instead of an ``INSERT``. With some clever refactoring, you could use one view and template for both actions, but for the tutorial it's clearer to keep them separate."
msgstr ""

#: ../../tutorial/blog.rst:274
# 899a0c75d22e43619ae9d2cd2af9c31e
msgid "``flaskr/templates/blog/update.html``"
msgstr ""

#: ../../tutorial/blog.rst:298
# ff1b56c6cd7041b0862794b149437e5e
msgid "This template has two forms. The first posts the edited data to the current page (``/<id>/update``). The other form contains only a button and specifies an ``action`` attribute that posts to the delete view instead. The button uses some JavaScript to show a confirmation dialog before submitting."
msgstr ""

#: ../../tutorial/blog.rst:304
# 5e442a2d272f4bc7b7a46eaee96f1e38
msgid "The pattern ``{{ request.form['title'] or post['title'] }}`` is used to choose what data appears in the form. When the form hasn't been submitted, the original ``post`` data appears, but if invalid form data was posted you want to display that so the user can fix the error, so ``request.form`` is used instead. :data:`request` is another variable that's automatically available in templates."
msgstr ""

#: ../../tutorial/blog.rst:313
# 40785dca056c4312b6b57e26d435c670
msgid "Delete"
msgstr ""

#: ../../tutorial/blog.rst:315
# 40787827e2dd4d738a37296880258d23
msgid "The delete view doesn't have its own template, the delete button is part of ``update.html`` and posts to the ``/<id>/delete`` URL. Since there is no template, it will only handle the ``POST`` method and then redirect to the ``index`` view."
msgstr ""

#: ../../tutorial/blog.rst:332
# 81be1b73e78a4fa4b8cc686a31b0264c
msgid "Congratulations, you've now finished writing your application! Take some time to try out everything in the browser. However, there's still more to do before the project is complete."
msgstr ""

#: ../../tutorial/blog.rst:336
# a369b1f524314e268412d4ec2b30ea77
msgid "Continue to :doc:`install`."
msgstr ""

