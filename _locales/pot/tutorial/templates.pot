# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorial/templates.rst:4
# 5574c6dcd64a4de4b7271aa6203638cc
msgid "Templates"
msgstr ""

#: ../../tutorial/templates.rst:6
# f323aa93390f44539cd96f4ad54867e4
msgid "You've written the authentication views for your application, but if you're running the server and try to go to any of the URLs, you'll see a ``TemplateNotFound`` error. That's because the views are calling :func:`render_template`, but you haven't written the templates yet. The template files will be stored in the ``templates`` directory inside the ``flaskr`` package."
msgstr ""

#: ../../tutorial/templates.rst:13
# 17ac92aff43b46668055e0dbfb4b0f51
msgid "Templates are files that contain static data as well as placeholders for dynamic data. A template is rendered with specific data to produce a final document. Flask uses the `Jinja`_ template library to render templates."
msgstr ""

#: ../../tutorial/templates.rst:18
# c149abcf93af4fcf9219a806d9cf7d56
msgid "In your application, you will use templates to render `HTML`_ which will display in the user's browser. In Flask, Jinja is configured to *autoescape* any data that is rendered in HTML templates. This means that it's safe to render user input; any characters they've entered that could mess with the HTML, such as ``<`` and ``>`` will be *escaped* with *safe* values that look the same in the browser but don't cause unwanted effects."
msgstr ""

#: ../../tutorial/templates.rst:26
# d67b1996b29543fa8c5691d0b884a05e
msgid "Jinja looks and behaves mostly like Python. Special delimiters are used to distinguish Jinja syntax from the static data in the template. Anything between ``{{`` and ``}}`` is an expression that will be output to the final document. ``{%`` and ``%}`` denotes a control flow statement like ``if`` and ``for``. Unlike Python, blocks are denoted by start and end tags rather than indentation since static text within a block could change indentation."
msgstr ""

#: ../../tutorial/templates.rst:39
# cc463701dd47430ca0e8c5e55c14d0cf
msgid "The Base Layout"
msgstr ""

#: ../../tutorial/templates.rst:41
# 89eb4b2a763140ada85f21b92a1b2279
msgid "Each page in the application will have the same basic layout around a different body. Instead of writing the entire HTML structure in each template, each template will *extend* a base template and override specific sections."
msgstr ""

#: ../../tutorial/templates.rst:46
# cf09f4409f0e49f29509c57e2c17efc2
msgid "``flaskr/templates/base.html``"
msgstr ""

#: ../../tutorial/templates.rst:74
# 0fb6c7ca1f184c78912618289974d704
msgid ":data:`g` is automatically available in templates. Based on if ``g.user`` is set (from ``load_logged_in_user``), either the username and a log out link are displayed, or links to register and log in are displayed. :func:`url_for` is also automatically available, and is used to generate URLs to views instead of writing them out manually."
msgstr ""

#: ../../tutorial/templates.rst:80
# f6ddc4f6eb934db1a16d3beb07f3fb23
msgid "After the page title, and before the content, the template loops over each message returned by :func:`get_flashed_messages`. You used :func:`flash` in the views to show error messages, and this is the code that will display them."
msgstr ""

#: ../../tutorial/templates.rst:85
# 1e17e6673e85485ab7c9f91de1f5aa7b
msgid "There are three blocks defined here that will be overridden in the other templates:"
msgstr ""

#: ../../tutorial/templates.rst:88
# 1e920c39bc6f4efb88352947c0e3e7e0
msgid "``{% block title %}`` will change the title displayed in the browser's tab and window title."
msgstr ""

#: ../../tutorial/templates.rst:91
# 8515917a309b4ec2a54c3b242a96e8da
msgid "``{% block header %}`` is similar to ``title`` but will change the title displayed on the page."
msgstr ""

#: ../../tutorial/templates.rst:94
# b2e481b2b8e4478d91f30a5a01f09c0e
msgid "``{% block content %}`` is where the content of each page goes, such as the login form or a blog post."
msgstr ""

#: ../../tutorial/templates.rst:97
# eab634ab4dfb4476abd6ffdc3a05f9f0
msgid "The base template is directly in the ``templates`` directory. To keep the others organized, the templates for a blueprint will be placed in a directory with the same name as the blueprint."
msgstr ""

#: ../../tutorial/templates.rst:103
# 51a96aeb3cbb4eb292a61aaa817e4afa
msgid "Register"
msgstr ""

#: ../../tutorial/templates.rst:105
# f5edfe79a16e4d2fb36a8418ae773ecb
msgid "``flaskr/templates/auth/register.html``"
msgstr ""

#: ../../tutorial/templates.rst:124
# 191c40f9687e4c7082e0d836bd175eb1
msgid "``{% extends 'base.html' %}`` tells Jinja that this template should replace the blocks from the base template. All the rendered content must appear inside ``{% block %}`` tags that override blocks from the base template."
msgstr ""

#: ../../tutorial/templates.rst:129
# 2cb446d687694aa290ea8b6378a15391
msgid "A useful pattern used here is to place ``{% block title %}`` inside ``{% block header %}``. This will set the title block and then output the value of it into the header block, so that both the window and page share the same title without writing it twice."
msgstr ""

#: ../../tutorial/templates.rst:134
# a80d0c18af844222b993c780d59be402
msgid "The ``input`` tags are using the ``required`` attribute here. This tells the browser not to submit the form until those fields are filled in. If the user is using an older browser that doesn't support that attribute, or if they are using something besides a browser to make requests, you still want to validate the data in the Flask view. It's important to always fully validate the data on the server, even if the client does some validation as well."
msgstr ""

#: ../../tutorial/templates.rst:144
# 630b73e5bfdf43348bac9727f31cf958
msgid "Log In"
msgstr ""

#: ../../tutorial/templates.rst:146
# 8ad01ad5ef264211a6fd881461ee20d5
msgid "This is identical to the register template except for the title and submit button."
msgstr ""

#: ../../tutorial/templates.rst:149
# c57da431bcae43ec90a6c8cdca9e879f
msgid "``flaskr/templates/auth/login.html``"
msgstr ""

#: ../../tutorial/templates.rst:170
# 026d120e2bce45a2ad5cca2853bea601
msgid "Register A User"
msgstr ""

#: ../../tutorial/templates.rst:172
# 5448d491a1484de7bf09ea2c968aaf05
msgid "Now that the authentication templates are written, you can register a user. Make sure the server is still running (``flask run`` if it's not), then go to http://127.0.0.1:5000/auth/register."
msgstr ""

#: ../../tutorial/templates.rst:176
# 31a244d0475b44ff878cd1dca220ca3f
msgid "Try clicking the \"Register\" button without filling out the form and see that the browser shows an error message. Try removing the ``required`` attributes from the ``register.html`` template and click \"Register\" again. Instead of the browser showing an error, the page will reload and the error from :func:`flash` in the view will be shown."
msgstr ""

#: ../../tutorial/templates.rst:182
# 0923244ad7274073b59a4ebf8ffe0f12
msgid "Fill out a username and password and you'll be redirected to the login page. Try entering an incorrect username, or the correct username and incorrect password. If you log in you'll get an error because there's no ``index`` view to redirect to yet."
msgstr ""

#: ../../tutorial/templates.rst:187
# 24489e16b3cd4e90b840a81199213715
msgid "Continue to :doc:`static`."
msgstr ""

