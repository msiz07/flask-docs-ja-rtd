# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorial/deploy.rst:2
# f1c45fce70cf484d803b6119c8abfe27
msgid "Deploy to Production"
msgstr ""

#: ../../tutorial/deploy.rst:4
# 16e440d7d03f4d02ac87c96f2e475415
msgid "This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won't go into specifics about what server or software to use. You can set up a new environment on your development computer to try out the instructions below, but probably shouldn't use it for hosting a real public application. See :doc:`/deploying/index` for a list of many different ways to host your application."
msgstr ""

#: ../../tutorial/deploy.rst:15
# c02c813854da40548a151425518deef0
msgid "Build and Install"
msgstr ""

#: ../../tutorial/deploy.rst:17
# 72e44bef7dba4634ab5181fb394fe4b8
msgid "When you want to deploy your application elsewhere, you build a distribution file. The current standard for Python distribution is the *wheel* format, with the ``.whl`` extension. Make sure the wheel library is installed first:"
msgstr ""

#: ../../tutorial/deploy.rst:26
# bd909c76d3f34a499cf49f87069c70f3
msgid "Running ``setup.py`` with Python gives you a command line tool to issue build-related commands. The ``bdist_wheel`` command will build a wheel distribution file."
msgstr ""

#: ../../tutorial/deploy.rst:34
# 64e0688815ae424d81e5e7dddecb024d
msgid "You can find the file in ``dist/flaskr-1.0.0-py3-none-any.whl``. The file name is the name of the project, the version, and some tags about the file can install."
msgstr ""

#: ../../tutorial/deploy.rst:38
# b4387cab120b4423b8aa9ec7c8318382
msgid "Copy this file to another machine, :ref:`set up a new virtualenv <install-create-env>`, then install the file with ``pip``."
msgstr ""

#: ../../tutorial/deploy.rst:46
# ece2328f0def4c549cd62dd052857419
msgid "Pip will install your project along with its dependencies."
msgstr ""

#: ../../tutorial/deploy.rst:48
# 8594524ee34044acb86dcad69f822bfb
msgid "Since this is a different machine, you need to run ``init-db`` again to create the database in the instance folder."
msgstr ""

#: ../../tutorial/deploy.rst:56
# aa079a1cdf2c4d10bf5b267feef8398f
msgid "When Flask detects that it's installed (not in editable mode), it uses a different directory for the instance folder. You can find it at ``venv/var/flaskr-instance`` instead."
msgstr ""

#: ../../tutorial/deploy.rst:62
# 423736873e614ba08f84920390fd9a2b
msgid "Configure the Secret Key"
msgstr ""

#: ../../tutorial/deploy.rst:64
# 210b555de2fe49e9b87ca4ff8e97a94a
msgid "In the beginning of the tutorial that you gave a default value for :data:`SECRET_KEY`. This should be changed to some random bytes in production. Otherwise, attackers could use the public ``'dev'`` key to modify the session cookie, or anything else that uses the secret key."
msgstr ""

#: ../../tutorial/deploy.rst:69
# 9a0be69797604e2f8960b3690c5fa367
msgid "You can use the following command to output a random secret key:"
msgstr ""

#: ../../tutorial/deploy.rst:77
# 7e963395b15c4c1c8af85dd1cbb97573
msgid "Create the ``config.py`` file in the instance folder, which the factory will read from if it exists. Copy the generated value into it."
msgstr ""

#: ../../tutorial/deploy.rst:80
# de07e9128b9e4c0596b19b0056310ef4
msgid "``venv/var/flaskr-instance/config.py``"
msgstr ""

#: ../../tutorial/deploy.rst:85
# 3c9daf128d7a48fb98a700253f25ae4c
msgid "You can also set any other necessary configuration here, although ``SECRET_KEY`` is the only one needed for Flaskr."
msgstr ""

#: ../../tutorial/deploy.rst:90
# 6211fcc27add481a95507aa86a250e5c
msgid "Run with a Production Server"
msgstr ""

#: ../../tutorial/deploy.rst:92
# 7065285d9eee40e08c18ed9908a26250
msgid "When running publicly rather than in development, you should not use the built-in development server (``flask run``). The development server is provided by Werkzeug for convenience, but is not designed to be particularly efficient, stable, or secure."
msgstr ""

#: ../../tutorial/deploy.rst:97
# ef05441c3fc4477e963db40963b3d463
msgid "Instead, use a production WSGI server. For example, to use `Waitress`_, first install it in the virtual environment:"
msgstr ""

#: ../../tutorial/deploy.rst:104
# a42c12532e39421a944f94c40cddf82a
msgid "You need to tell Waitress about your application, but it doesn't use ``FLASK_APP`` like ``flask run`` does. You need to tell it to import and call the application factory to get an application object."
msgstr ""

#: ../../tutorial/deploy.rst:114
# 965300f741064e4bb6c648b1d944c9f7
msgid "See :doc:`/deploying/index` for a list of many different ways to host your application. Waitress is just an example, chosen for the tutorial because it supports both Windows and Linux. There are many more WSGI servers and deployment options that you may choose for your project."
msgstr ""

#: ../../tutorial/deploy.rst:121
# 85c57695469e4fd995cc9b89fc1a8b6d
msgid "Continue to :doc:`next`."
msgstr ""

