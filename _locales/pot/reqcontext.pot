# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.2.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-26 22:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../flask/docs/reqcontext.rst:4
msgid "The Request Context"
msgstr ""

#: ../../flask/docs/reqcontext.rst:6
msgid "The request context keeps track of the request-level data during a request. Rather than passing the request object to each function that runs during a request, the :data:`request` and :data:`session` proxies are accessed instead."
msgstr ""

#: ../../flask/docs/reqcontext.rst:11
msgid "This is similar to :doc:`/appcontext`, which keeps track of the application-level data independent of a request. A corresponding application context is pushed when a request context is pushed."
msgstr ""

#: ../../flask/docs/reqcontext.rst:17
msgid "Purpose of the Context"
msgstr ""

#: ../../flask/docs/reqcontext.rst:19
msgid "When the :class:`Flask` application handles a request, it creates a :class:`Request` object based on the environment it received from the WSGI server. Because a *worker* (thread, process, or coroutine depending on the server) handles only one request at a time, the request data can be considered global to that worker during that request. Flask uses the term *context local* for this."
msgstr ""

#: ../../flask/docs/reqcontext.rst:26
msgid "Flask automatically *pushes* a request context when handling a request. View functions, error handlers, and other functions that run during a request will have access to the :data:`request` proxy, which points to the request object for the current request."
msgstr ""

#: ../../flask/docs/reqcontext.rst:33
msgid "Lifetime of the Context"
msgstr ""

#: ../../flask/docs/reqcontext.rst:35
msgid "When a Flask application begins handling a request, it pushes a request context, which also pushes an :doc:`app context </appcontext>`. When the request ends it pops the request context then the application context."
msgstr ""

#: ../../flask/docs/reqcontext.rst:39
msgid "The context is unique to each thread (or other worker type). :data:`request` cannot be passed to another thread, the other thread has a different context space and will not know about the request the parent thread was pointing to."
msgstr ""

#: ../../flask/docs/reqcontext.rst:44
msgid "Context locals are implemented using Python's :mod:`contextvars` and Werkzeug's :class:`~werkzeug.local.LocalProxy`. Python manages the lifetime of context vars automatically, and local proxy wraps that low-level interface to make the data easier to work with."
msgstr ""

#: ../../flask/docs/reqcontext.rst:51
msgid "Manually Push a Context"
msgstr ""

#: ../../flask/docs/reqcontext.rst:53
msgid "If you try to access :data:`request`, or anything that uses it, outside a request context, you'll get this error message:"
msgstr ""

#: ../../flask/docs/reqcontext.rst:64
msgid "This should typically only happen when testing code that expects an active request. One option is to use the :meth:`test client <Flask.test_client>` to simulate a full request. Or you can use :meth:`~Flask.test_request_context` in a ``with`` block, and everything that runs in the block will have access to :data:`request`, populated with your test data. ::"
msgstr ""

#: ../../flask/docs/reqcontext.rst:79
msgid "If you see that error somewhere else in your code not related to testing, it most likely indicates that you should move that code into a view function."
msgstr ""

#: ../../flask/docs/reqcontext.rst:83
msgid "For information on how to use the request context from the interactive Python shell, see :doc:`/shell`."
msgstr ""

#: ../../flask/docs/reqcontext.rst:88
msgid "How the Context Works"
msgstr ""

#: ../../flask/docs/reqcontext.rst:90
msgid "The :meth:`Flask.wsgi_app` method is called to handle each request. It manages the contexts during the request. Internally, the request and application contexts work like stacks. When contexts are pushed, the proxies that depend on them are available and point at information from the top item."
msgstr ""

#: ../../flask/docs/reqcontext.rst:96
msgid "When the request starts, a :class:`~ctx.RequestContext` is created and pushed, which creates and pushes an :class:`~ctx.AppContext` first if a context for that application is not already the top context. While these contexts are pushed, the :data:`current_app`, :data:`g`, :data:`request`, and :data:`session` proxies are available to the original thread handling the request."
msgstr ""

#: ../../flask/docs/reqcontext.rst:103
msgid "Other contexts may be pushed to change the proxies during a request. While this is not a common pattern, it can be used in advanced applications to, for example, do internal redirects or chain different applications together."
msgstr ""

#: ../../flask/docs/reqcontext.rst:108
msgid "After the request is dispatched and a response is generated and sent, the request context is popped, which then pops the application context. Immediately before they are popped, the :meth:`~Flask.teardown_request` and :meth:`~Flask.teardown_appcontext` functions are executed. These execute even if an unhandled exception occurred during dispatch."
msgstr ""

#: ../../flask/docs/reqcontext.rst:118
msgid "Callbacks and Errors"
msgstr ""

#: ../../flask/docs/reqcontext.rst:120
msgid "Flask dispatches a request in multiple stages which can affect the request, response, and how errors are handled. The contexts are active during all of these stages."
msgstr ""

#: ../../flask/docs/reqcontext.rst:124
msgid "A :class:`Blueprint` can add handlers for these events that are specific to the blueprint. The handlers for a blueprint will run if the blueprint owns the route that matches the request."
msgstr ""

#: ../../flask/docs/reqcontext.rst:128
msgid "Before each request, :meth:`~Flask.before_request` functions are called. If one of these functions return a value, the other functions are skipped. The return value is treated as the response and the view function is not called."
msgstr ""

#: ../../flask/docs/reqcontext.rst:133
msgid "If the :meth:`~Flask.before_request` functions did not return a response, the view function for the matched route is called and returns a response."
msgstr ""

#: ../../flask/docs/reqcontext.rst:137
msgid "The return value of the view is converted into an actual response object and passed to the :meth:`~Flask.after_request` functions. Each function returns a modified or new response object."
msgstr ""

#: ../../flask/docs/reqcontext.rst:141
msgid "After the response is returned, the contexts are popped, which calls the :meth:`~Flask.teardown_request` and :meth:`~Flask.teardown_appcontext` functions. These functions are called even if an unhandled exception was raised at any point above."
msgstr ""

#: ../../flask/docs/reqcontext.rst:146
msgid "If an exception is raised before the teardown functions, Flask tries to match it with an :meth:`~Flask.errorhandler` function to handle the exception and return a response. If no error handler is found, or the handler itself raises an exception, Flask returns a generic ``500 Internal Server Error`` response. The teardown functions are still called, and are passed the exception object."
msgstr ""

#: ../../flask/docs/reqcontext.rst:153
msgid "If debug mode is enabled, unhandled exceptions are not converted to a ``500`` response and instead are propagated to the WSGI server. This allows the development server to present the interactive debugger with the traceback."
msgstr ""

#: ../../flask/docs/reqcontext.rst:160
msgid "Teardown Callbacks"
msgstr ""

#: ../../flask/docs/reqcontext.rst:162
msgid "The teardown callbacks are independent of the request dispatch, and are instead called by the contexts when they are popped. The functions are called even if there is an unhandled exception during dispatch, and for manually pushed contexts. This means there is no guarantee that any other parts of the request dispatch have run first. Be sure to write these functions in a way that does not depend on other callbacks and will not fail."
msgstr ""

#: ../../flask/docs/reqcontext.rst:170
msgid "During testing, it can be useful to defer popping the contexts after the request ends, so that their data can be accessed in the test function. Use the :meth:`~Flask.test_client` as a ``with`` block to preserve the contexts until the ``with`` block exits."
msgstr ""

#: ../../flask/docs/reqcontext.rst:204
msgid "Signals"
msgstr ""

#: ../../flask/docs/reqcontext.rst:206
msgid "If :data:`~signals.signals_available` is true, the following signals are sent:"
msgstr ""

#: ../../flask/docs/reqcontext.rst:209
msgid ":data:`request_started` is sent before the :meth:`~Flask.before_request` functions are called."
msgstr ""

#: ../../flask/docs/reqcontext.rst:212
msgid ":data:`request_finished` is sent after the :meth:`~Flask.after_request` functions are called."
msgstr ""

#: ../../flask/docs/reqcontext.rst:215
msgid ":data:`got_request_exception` is sent when an exception begins to be handled, but before an :meth:`~Flask.errorhandler` is looked up or called."
msgstr ""

#: ../../flask/docs/reqcontext.rst:219
msgid ":data:`request_tearing_down` is sent after the :meth:`~Flask.teardown_request` functions are called."
msgstr ""

#: ../../flask/docs/reqcontext.rst:226
msgid "Notes On Proxies"
msgstr ""

#: ../../flask/docs/reqcontext.rst:228
msgid "Some of the objects provided by Flask are proxies to other objects. The proxies are accessed in the same way for each worker thread, but point to the unique object bound to each worker behind the scenes as described on this page."
msgstr ""

#: ../../flask/docs/reqcontext.rst:233
msgid "Most of the time you don't have to care about that, but there are some exceptions where it is good to know that this object is actually a proxy:"
msgstr ""

#: ../../flask/docs/reqcontext.rst:236
msgid "The proxy objects cannot fake their type as the actual object types. If you want to perform instance checks, you have to do that on the object being proxied."
msgstr ""

#: ../../flask/docs/reqcontext.rst:239
msgid "The reference to the proxied object is needed in some situations, such as sending :doc:`signals` or passing data to a background thread."
msgstr ""

#: ../../flask/docs/reqcontext.rst:243
msgid "If you need to access the underlying object that is proxied, use the :meth:`~werkzeug.local.LocalProxy._get_current_object` method::"
msgstr ""
