# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../appcontext.rst:6
# 5161a70b989c44e5a327e1a9b6cd0b98
msgid "The Application Context"
msgstr ""

#: ../../appcontext.rst:8
# a508c0b3d9e24ed48b9af1223ca61cc4
msgid "The application context keeps track of the application-level data during a request, CLI command, or other activity. Rather than passing the application around to each function, the :data:`current_app` and :data:`g` proxies are accessed instead."
msgstr ""

#: ../../appcontext.rst:13
# 8fe988affa494220ac88df8d322728de
msgid "This is similar to the :doc:`/reqcontext`, which keeps track of request-level data during a request. A corresponding application context is pushed when a request context is pushed."
msgstr ""

#: ../../appcontext.rst:18
# a9f2c2afc6044e11bffe2f7578143469
msgid "Purpose of the Context"
msgstr ""

#: ../../appcontext.rst:20
# ade29131b7e74c169a66df9c580ad3be
msgid "The :class:`Flask` application object has attributes, such as :attr:`~Flask.config`, that are useful to access within views and :doc:`CLI commands </cli>`. However, importing the ``app`` instance within the modules in your project is prone to circular import issues. When using the :doc:`app factory pattern </patterns/appfactories>` or writing reusable :doc:`blueprints </blueprints>` or :doc:`extensions </extensions>` there won't be an ``app`` instance to import at all."
msgstr ""

#: ../../appcontext.rst:29
# c25f76ea224949a19dedede3430302a1
msgid "Flask solves this issue with the *application context*. Rather than referring to an ``app`` directly, you use the :data:`current_app` proxy, which points to the application handling the current activity."
msgstr ""

#: ../../appcontext.rst:33
# 1af9cd18f3ee45e4bbdae05d57748b98
msgid "Flask automatically *pushes* an application context when handling a request. View functions, error handlers, and other functions that run during a request will have access to :data:`current_app`."
msgstr ""

#: ../../appcontext.rst:37
# 4fbb8eba355343cca77c03756f998e03
msgid "Flask will also automatically push an app context when running CLI commands registered with :attr:`Flask.cli` using ``@app.cli.command()``."
msgstr ""

#: ../../appcontext.rst:42
# ec95ddb554e54c188a94d7deb0e3479d
msgid "Lifetime of the Context"
msgstr ""

#: ../../appcontext.rst:44
# 5a01b9349cf647a7bbb6fa110a1ac41e
msgid "The application context is created and destroyed as necessary. When a Flask application begins handling a request, it pushes an application context and a :doc:`request context </reqcontext>`. When the request ends it pops the request context then the application context. Typically, an application context will have the same lifetime as a request."
msgstr ""

#: ../../appcontext.rst:51
# 0c0730da1eb141b1b15ace2aae548017
msgid "See :doc:`/reqcontext` for more information about how the contexts work and the full life cycle of a request."
msgstr ""

#: ../../appcontext.rst:56
# 34e257fef1cf482f9d2ad91e40406817
msgid "Manually Push a Context"
msgstr ""

#: ../../appcontext.rst:58
# 221d720d4d914a2c81a7c60443d27f18
msgid "If you try to access :data:`current_app`, or anything that uses it, outside an application context, you'll get this error message:"
msgstr ""

#: ../../appcontext.rst:69
# e980b73360734a9b97da924fd8bd8ddf
msgid "If you see that error while configuring your application, such as when initializing an extension, you can push a context manually since you have direct access to the ``app``. Use :meth:`~Flask.app_context` in a ``with`` block, and everything that runs in the block will have access to :data:`current_app`. ::"
msgstr ""

#: ../../appcontext.rst:83
# 68e8e28d51134ed98203f3b40225cebb
msgid "If you see that error somewhere else in your code not related to configuring the application, it most likely indicates that you should move that code into a view function or CLI command."
msgstr ""

#: ../../appcontext.rst:89
# 9d80dfc00eb5412790052ea5f818ddee
msgid "Storing Data"
msgstr ""

#: ../../appcontext.rst:91
# 8ce65e815bf94a8bb070243209f4f785
msgid "The application context is a good place to store common data during a request or CLI command. Flask provides the :data:`g object <g>` for this purpose. It is a simple namespace object that has the same lifetime as an application context."
msgstr ""

#: ../../appcontext.rst:97
# c20b4e70beee47178b3c114cdfaea1a2
msgid "The ``g`` name stands for \"global\", but that is referring to the data being global *within a context*. The data on ``g`` is lost after the context ends, and it is not an appropriate place to store data between requests. Use the :data:`session` or a database to store data across requests."
msgstr ""

#: ../../appcontext.rst:103
# a4451d9a87da46d29276443680f13374
msgid "A common use for :data:`g` is to manage resources during a request."
msgstr ""

#: ../../appcontext.rst:105
# d0b7f1998ff541099541084aad8a797f
msgid "``get_X()`` creates resource ``X`` if it does not exist, caching it as ``g.X``."
msgstr ""

#: ../../appcontext.rst:107
# 7b4c850355474ab89e6e8dbf141ac0e6
msgid "``teardown_X()`` closes or otherwise deallocates the resource if it exists. It is registered as a :meth:`~Flask.teardown_appcontext` handler."
msgstr ""

#: ../../appcontext.rst:111
# f071b56992174291aec8194e3fdbc5bd
msgid "For example, you can manage a database connection using this pattern::"
msgstr ""

#: ../../appcontext.rst:128
# ef536e7e2d43426d83628220f11bea32
msgid "During a request, every call to ``get_db()`` will return the same connection, and it will be closed automatically at the end of the request."
msgstr ""

#: ../../appcontext.rst:132
# 2b73fef501f3419eade84cb6d344e0ce
msgid "You can use :class:`~werkzeug.local.LocalProxy` to make a new context local from ``get_db()``::"
msgstr ""

#: ../../appcontext.rst:138
# 5a8f7022d94b45778f0dfa23ad7a4bf3
msgid "Accessing ``db`` will call ``get_db`` internally, in the same way that :data:`current_app` works."
msgstr ""

#: ../../appcontext.rst:143
# 53ec2063b0f64f12ba3618df677c84d1
msgid "If you're writing an extension, :data:`g` should be reserved for user code. You may store internal data on the context itself, but be sure to use a sufficiently unique name. The current context is accessed with :data:`_app_ctx_stack.top <_app_ctx_stack>`. For more information see :doc:`extensiondev`."
msgstr ""

#: ../../appcontext.rst:151
# fda42d7a7ce14e41a9c351a06f88d227
msgid "Events and Signals"
msgstr ""

#: ../../appcontext.rst:153
# eb16cb72ad8e4adbb889926f86cb9a10
msgid "The application will call functions registered with :meth:`~Flask.teardown_appcontext` when the application context is popped."
msgstr ""

#: ../../appcontext.rst:157
# 2f0ad15b326a481b9c46a3cfdad86404
msgid "If :data:`~signals.signals_available` is true, the following signals are sent: :data:`appcontext_pushed`, :data:`appcontext_tearing_down`, and :data:`appcontext_popped`."
msgstr ""

