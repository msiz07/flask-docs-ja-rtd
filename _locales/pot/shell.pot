# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../shell.rst:4
# bd9fbb4a5618478e9ce79c9ad24fbf22
msgid "Working with the Shell"
msgstr ""

#: ../../shell.rst:8
# ffb69f018c0f41ac95b020993dc202ce
msgid "One of the reasons everybody loves Python is the interactive shell.  It basically allows you to execute Python commands in real time and immediately get results back.  Flask itself does not come with an interactive shell, because it does not require any specific setup upfront, just import your application and start playing around."
msgstr ""

#: ../../shell.rst:14
# e765791ac98448bdad01816c37e89086
msgid "There are however some handy helpers to make playing around in the shell a more pleasant experience.  The main issue with interactive console sessions is that you're not triggering a request like a browser does which means that :data:`~flask.g`, :data:`~flask.request` and others are not available.  But the code you want to test might depend on them, so what can you do?"
msgstr ""

#: ../../shell.rst:21
# 970be3664041423393fb4bfc6ff85d5a
msgid "This is where some helper functions come in handy.  Keep in mind however that these functions are not only there for interactive shell usage, but also for unit testing and other situations that require a faked request context."
msgstr ""

#: ../../shell.rst:26
# 401dd83ddda449419e151c716f23f7c2
msgid "Generally it's recommended that you read the :ref:`request-context` chapter of the documentation first."
msgstr ""

#: ../../shell.rst:30
# c063ae40d0c24a5a821a1b11e792b762
msgid "Command Line Interface"
msgstr ""

#: ../../shell.rst:32
# 813d81cdf6434b999f4cbd8181ed8af8
msgid "Starting with Flask 0.11 the recommended way to work with the shell is the ``flask shell`` command which does a lot of this automatically for you. For instance the shell is automatically initialized with a loaded application context."
msgstr ""

#: ../../shell.rst:37
# 7ae2aed5b4a34a2294e8c0dc1d0d6345
msgid "For more information see :ref:`cli`."
msgstr ""

#: ../../shell.rst:40
# 31ca9f55fb5b4cdf9cf8300d4c07a9cc
msgid "Creating a Request Context"
msgstr ""

#: ../../shell.rst:42
# 4102b21e26ce4bf0b0e5eb4717747379
msgid "The easiest way to create a proper request context from the shell is by using the :attr:`~flask.Flask.test_request_context` method which creates us a :class:`~flask.ctx.RequestContext`:"
msgstr ""

#: ../../shell.rst:48
# af416ed640df43bdb6e439adcfc1cbb1
msgid "Normally you would use the ``with`` statement to make this request object active, but in the shell it's easier to use the :meth:`~flask.ctx.RequestContext.push` and :meth:`~flask.ctx.RequestContext.pop` methods by hand:"
msgstr ""

#: ../../shell.rst:55
# da129c67afd24aeaae32783ab2f8760a
msgid "From that point onwards you can work with the request object until you call `pop`:"
msgstr ""

#: ../../shell.rst:61
# 3637ee07ea61486ca8b4e2a335886200
msgid "Firing Before/After Request"
msgstr ""

#: ../../shell.rst:63
# 5b2a9d0d3a0549dea9ac75e3edcbd0f8
msgid "By just creating a request context, you still don't have run the code that is normally run before a request.  This might result in your database being unavailable if you are connecting to the database in a before-request callback or the current user not being stored on the :data:`~flask.g` object etc."
msgstr ""

#: ../../shell.rst:69
# a2a107dd349643fba2fc8a2df7ef9a5e
msgid "This however can easily be done yourself.  Just call :meth:`~flask.Flask.preprocess_request`:"
msgstr ""

#: ../../shell.rst:76
# 830d54719db44ec4b2ac56e15f9aff41
msgid "Keep in mind that the :meth:`~flask.Flask.preprocess_request` function might return a response object, in that case just ignore it."
msgstr ""

#: ../../shell.rst:79
# 92e0cac282de48f9ae976161201569ab
msgid "To shutdown a request, you need to trick a bit before the after request functions (triggered by :meth:`~flask.Flask.process_response`) operate on a response object:"
msgstr ""

#: ../../shell.rst:87
# 2dd820564c524f0e8cf6741ecefa9b91
msgid "The functions registered as :meth:`~flask.Flask.teardown_request` are automatically called when the context is popped.  So this is the perfect place to automatically tear down resources that were needed by the request context (such as database connections)."
msgstr ""

#: ../../shell.rst:94
# 05aaed478a304dc89ccb046f99b4e383
msgid "Further Improving the Shell Experience"
msgstr ""

#: ../../shell.rst:96
# 201ecbdd78354501b01048a64ca6644a
msgid "If you like the idea of experimenting in a shell, create yourself a module with stuff you want to star import into your interactive session.  There you could also define some more helper methods for common things such as initializing the database, dropping tables etc."
msgstr ""

#: ../../shell.rst:101
# 0927380e0ed24cceb6e54ca1620dc032
msgid "Just put them into a module (like `shelltools`) and import from there:"
msgstr ""

