# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../patterns/jquery.rst:2
# e526b1e10ef444739061efc141497461
msgid "AJAX with jQuery"
msgstr ""

#: ../../patterns/jquery.rst:4
# ef7d679b8b8548059e1e74937f2bbefe
msgid "`jQuery`_ is a small JavaScript library commonly used to simplify working with the DOM and JavaScript in general.  It is the perfect tool to make web applications more dynamic by exchanging JSON between server and client."
msgstr ""

#: ../../patterns/jquery.rst:9
# c8a13ebd161744b1b5f45df893126ef4
msgid "JSON itself is a very lightweight transport format, very similar to how Python primitives (numbers, strings, dicts and lists) look like which is widely supported and very easy to parse.  It became popular a few years ago and quickly replaced XML as transport format in web applications."
msgstr ""

#: ../../patterns/jquery.rst:17
# a2617730038a4ee8a81dd2c222092bae
msgid "Loading jQuery"
msgstr ""

#: ../../patterns/jquery.rst:19
# b9830d882b4644d49838b43c7ec0259e
msgid "In order to use jQuery, you have to download it first and place it in the static folder of your application and then ensure it's loaded.  Ideally you have a layout template that is used for all pages where you just have to add a script statement to the bottom of your ``<body>`` to load jQuery:"
msgstr ""

#: ../../patterns/jquery.rst:29
# 087ef5cdaa5744f88f353d53e5ec4d8b
msgid "Another method is using Google's `AJAX Libraries API <https://developers.google.com/speed/libraries/>`_ to load jQuery:"
msgstr ""

#: ../../patterns/jquery.rst:38
# 1343046bd99a4c8286d7ecee94b01c83
msgid "In this case you have to put jQuery into your static folder as a fallback, but it will first try to load it directly from Google. This has the advantage that your website will probably load faster for users if they went to at least one other website before using the same jQuery version from Google because it will already be in the browser cache."
msgstr ""

#: ../../patterns/jquery.rst:45
# be80d4925ac44a9b9166753badeb2f8e
msgid "Where is My Site?"
msgstr ""

#: ../../patterns/jquery.rst:47
# cab7bf177b9c4c239b3225921858b5d1
msgid "Do you know where your application is?  If you are developing the answer is quite simple: it's on localhost port something and directly on the root of that server.  But what if you later decide to move your application to a different location?  For example to ``http://example.com/myapp``?  On the server side this never was a problem because we were using the handy :func:`~flask.url_for` function that could answer that question for us, but if we are using jQuery we should not hardcode the path to the application but make that dynamic, so how can we do that?"
msgstr ""

#: ../../patterns/jquery.rst:56
# 45abfe71786c4f71b2e8a724a4c86224
msgid "A simple method would be to add a script tag to our page that sets a global variable to the prefix to the root of the application.  Something like this:"
msgstr ""

#: ../../patterns/jquery.rst:66
# 71107a778de3431baa06e30d51ca2493
msgid "The ``|safe`` is necessary in Flask before 0.10 so that Jinja does not escape the JSON encoded string with HTML rules.  Usually this would be necessary, but we are inside a ``script`` block here where different rules apply."
msgstr ""

#: ../../patterns/jquery.rst:71
# 29469a63fca44be380934a2143ea42ab
msgid "Information for Pros"
msgstr ""

#: ../../patterns/jquery.rst:73
# 2a9de8d37a474940b3a438f215bf239e
msgid "In HTML the ``script`` tag is declared ``CDATA`` which means that entities will not be parsed.  Everything until ``</script>`` is handled as script. This also means that there must never be any ``</`` between the script tags.  ``|tojson`` is kind enough to do the right thing here and escape slashes for you (``{{ \"</script>\"|tojson|safe }}`` is rendered as ``\"<\\/script>\"``)."
msgstr ""

#: ../../patterns/jquery.rst:80
# 694c571c343c46ee91963baaf73e8203
msgid "In Flask 0.10 it goes a step further and escapes all HTML tags with unicode escapes.  This makes it possible for Flask to automatically mark the result as HTML safe."
msgstr ""

#: ../../patterns/jquery.rst:86
# 425e570911d24ed084918781f40c3424
msgid "JSON View Functions"
msgstr ""

#: ../../patterns/jquery.rst:88
# 4009e387e7744e85b56fc8793c32a4ab
msgid "Now let's create a server side function that accepts two URL arguments of numbers which should be added together and then sent back to the application in a JSON object.  This is a really ridiculous example and is something you usually would do on the client side alone, but a simple example that shows how you would use jQuery and Flask nonetheless::"
msgstr ""

#: ../../patterns/jquery.rst:107
# 8bdee696e276427eac8f54d37fcc60ea
msgid "As you can see I also added an `index` method here that renders a template.  This template will load jQuery as above and have a little form where we can add two numbers and a link to trigger the function on the server side."
msgstr ""

#: ../../patterns/jquery.rst:112
# 4367c20bd64a4f729647eeb53668dea2
msgid "Note that we are using the :meth:`~werkzeug.datastructures.MultiDict.get` method here which will never fail.  If the key is missing a default value (here ``0``) is returned.  Furthermore it can convert values to a specific type (like in our case `int`).  This is especially handy for code that is triggered by a script (APIs, JavaScript etc.) because you don't need special error reporting in that case."
msgstr ""

#: ../../patterns/jquery.rst:120
# 5564db8fc44a499a98a13f62b19b7adf
msgid "The HTML"
msgstr ""

#: ../../patterns/jquery.rst:122
# 7e83fcc0e30943f6a1f75f3999549468
msgid "Your index.html template either has to extend a :file:`layout.html` template with jQuery loaded and the `$SCRIPT_ROOT` variable set, or do that on the top. Here's the HTML code needed for our little application (:file:`index.html`). Notice that we also drop the script directly into the HTML here.  It is usually a better idea to have that in a separate script file:"
msgstr ""

#: ../../patterns/jquery.rst:149
# c4a4fd7bb01b453a80a829877448c8c2
msgid "I won't go into detail here about how jQuery works, just a very quick explanation of the little bit of code above:"
msgstr ""

#: ../../patterns/jquery.rst:152
# 5b60423afbfa4083b8e4af95425f1e44
msgid "``$(function() { ... })`` specifies code that should run once the browser is done loading the basic parts of the page."
msgstr ""

#: ../../patterns/jquery.rst:154
# d0956550fd514d34b31e789421abd1a8
msgid "``$('selector')`` selects an element and lets you operate on it."
msgstr ""

#: ../../patterns/jquery.rst:155
# 98ab3cf37d9b41fabb3f493de0c26e6b
msgid "``element.bind('event', func)`` specifies a function that should run when the user clicked on the element.  If that function returns `false`, the default behavior will not kick in (in this case, navigate to the `#` URL)."
msgstr ""

#: ../../patterns/jquery.rst:159
# c58f3ac6f21e4d07abc7ef351aecbba9
msgid "``$.getJSON(url, data, func)`` sends a ``GET`` request to `url` and will send the contents of the `data` object as query parameters.  Once the data arrived, it will call the given function with the return value as argument.  Note that we can use the `$SCRIPT_ROOT` variable here that we set earlier."
msgstr ""

#: ../../patterns/jquery.rst:165
# 3c2020f74a6f4488be0f687452153052
msgid "Check out the :gh:`example source <examples/javascript>` for a full application demonstrating the code on this page, as well as the same thing using ``XMLHttpRequest`` and ``fetch``."
msgstr ""

