# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-22 20:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../flask/docs/patterns/sqlalchemy.rst:4
msgid "SQLAlchemy in Flask"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:6
msgid "Many people prefer `SQLAlchemy`_ for database access.  In this case it's encouraged to use a package instead of a module for your flask application and drop the models into a separate module (:ref:`larger-applications`). While that is not necessary, it makes a lot of sense."
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:11
msgid "There are four very common ways to use SQLAlchemy.  I will outline each of them here:"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:15
msgid "Flask-SQLAlchemy Extension"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:17
msgid "Because SQLAlchemy is a common database abstraction layer and object relational mapper that requires a little bit of configuration effort, there is a Flask extension that handles that for you.  This is recommended if you want to get started quickly."
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:22
msgid "You can download `Flask-SQLAlchemy`_ from `PyPI <https://pypi.org/project/Flask-SQLAlchemy/>`_."
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:29
msgid "Declarative"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:31
msgid "The declarative extension in SQLAlchemy is the most recent method of using SQLAlchemy.  It allows you to define tables and models in one go, similar to how Django works.  In addition to the following text I recommend the official documentation on the `declarative`_ extension."
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:36
msgid "Here's the example :file:`database.py` module for your application::"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:56
msgid "To define your models, just subclass the `Base` class that was created by the code above.  If you are wondering why we don't have to care about threads here (like we did in the SQLite3 example above with the :data:`~flask.g` object): that's because SQLAlchemy does that for us already with the :class:`~sqlalchemy.orm.scoped_session`."
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:62
msgid "To use SQLAlchemy in a declarative way with your application, you just have to put the following code into your application module.  Flask will automatically remove database sessions at the end of the request or when the application shuts down::"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:73
msgid "Here is an example model (put this into :file:`models.py`, e.g.)::"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:91
msgid "To create the database you can use the `init_db` function:"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:96
msgid "You can insert entries into the database like this:"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:104
msgid "Querying is simple as well:"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:116
msgid "Manual Object Relational Mapping"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:118
msgid "Manual object relational mapping has a few upsides and a few downsides versus the declarative approach from above.  The main difference is that you define tables and classes separately and map them together.  It's more flexible but a little more to type.  In general it works like the declarative approach, so make sure to also split up your application into multiple modules in a package."
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:125
msgid "Here is an example :file:`database.py` module for your application::"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:138
msgid "As in the declarative approach, you need to close the session after each request or application context shutdown.  Put this into your application module::"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:148
msgid "Here is an example table and model (put this into :file:`models.py`)::"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:171
msgid "Querying and inserting works exactly the same as in the example above."
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:175
msgid "SQL Abstraction Layer"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:177
msgid "If you just want to use the database system (and SQL) abstraction layer you basically only need the engine::"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:185
msgid "Then you can either declare the tables in your code like in the examples above, or automatically load them::"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:192
msgid "To insert data you can use the `insert` method.  We have to get a connection first so that we can use a transaction:"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:198
msgid "SQLAlchemy will automatically commit for us."
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:200
msgid "To query your database, you use the engine directly or use a connection:"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:205
msgid "These results are also dict-like tuples:"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:211
msgid "You can also pass strings of SQL statements to the :meth:`~sqlalchemy.engine.base.Connection.execute` method:"
msgstr ""

#: ../../flask/docs/patterns/sqlalchemy.rst:217
msgid "For more information about SQLAlchemy, head over to the `website <https://www.sqlalchemy.org/>`_."
msgstr ""

