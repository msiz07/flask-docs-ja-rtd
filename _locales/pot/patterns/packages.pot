# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-22 20:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../flask/docs/patterns/packages.rst:4
msgid "Larger Applications"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:6
msgid "Imagine a simple flask application structure that looks like this::"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:18
msgid "While this is fine for small applications, for larger applications it's a good idea to use a package instead of a module. The :ref:`tutorial <tutorial>` is structured to use the package pattern, see the :gh:`example code <examples/tutorial>`."
msgstr ""

#: ../../flask/docs/patterns/packages.rst:24
msgid "Simple Packages"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:26
msgid "To convert that into a larger one, just create a new folder :file:`yourapplication` inside the existing one and move everything below it. Then rename :file:`yourapplication.py` to :file:`__init__.py`.  (Make sure to delete all ``.pyc`` files first, otherwise things would most likely break)"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:31
#: ../../flask/docs/patterns/packages.rst:105
msgid "You should then end up with something like that::"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:44
msgid "But how do you run your application now?  The naive ``python yourapplication/__init__.py`` will not work.  Let's just say that Python does not want modules in packages to be the startup file.  But that is not a big problem, just add a new file called :file:`setup.py` next to the inner :file:`yourapplication` folder with the following contents::"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:61
msgid "In order to run the application you need to export an environment variable that tells Flask where to find the application instance::"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:66
msgid "If you are outside of the project directory make sure to provide the exact path to your application directory. Similarly you can turn on the development features like this::"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:72
msgid "In order to install and run the application you need to issue the following commands::"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:78
msgid "What did we gain from this?  Now we can restructure the application a bit into multiple modules.  The only thing you have to remember is the following quick checklist:"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:82
msgid "the `Flask` application object creation has to be in the :file:`__init__.py` file.  That way each module can import it safely and the `__name__` variable will resolve to the correct package."
msgstr ""

#: ../../flask/docs/patterns/packages.rst:85
msgid "all the view functions (the ones with a :meth:`~flask.Flask.route` decorator on top) have to be imported in the :file:`__init__.py` file. Not the object itself, but the module it is in. Import the view module **after the application object is created**."
msgstr ""

#: ../../flask/docs/patterns/packages.rst:90
msgid "Here's an example :file:`__init__.py`::"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:97
msgid "And this is what :file:`views.py` would look like::"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:120
msgid "Circular Imports"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:122
msgid "Every Python programmer hates them, and yet we just added some: circular imports (That's when two modules depend on each other.  In this case :file:`views.py` depends on :file:`__init__.py`).  Be advised that this is a bad idea in general but here it is actually fine.  The reason for this is that we are not actually using the views in :file:`__init__.py` and just ensuring the module is imported and we are doing that at the bottom of the file."
msgstr ""

#: ../../flask/docs/patterns/packages.rst:130
msgid "There are still some problems with that approach but if you want to use decorators there is no way around that.  Check out the :ref:`becomingbig` section for some inspiration how to deal with that."
msgstr ""

#: ../../flask/docs/patterns/packages.rst:138
msgid "Working with Blueprints"
msgstr ""

#: ../../flask/docs/patterns/packages.rst:140
msgid "If you have larger applications it's recommended to divide them into smaller groups where each group is implemented with the help of a blueprint.  For a gentle introduction into this topic refer to the :ref:`blueprints` chapter of the documentation."
msgstr ""

