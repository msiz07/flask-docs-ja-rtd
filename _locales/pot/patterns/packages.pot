# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../patterns/packages.rst:4
# 5baa87b87f9444ddbd34b2534fc6298c
msgid "Larger Applications"
msgstr ""

#: ../../patterns/packages.rst:6
# f8105b7d7e4442bc80e0369363585e7b
msgid "Imagine a simple flask application structure that looks like this::"
msgstr ""

#: ../../patterns/packages.rst:18
# dd8a8634308340ff89687122f39bf4db
msgid "While this is fine for small applications, for larger applications it's a good idea to use a package instead of a module. The :ref:`tutorial <tutorial>` is structured to use the package pattern, see the :gh:`example code <examples/tutorial>`."
msgstr ""

#: ../../patterns/packages.rst:24
# 8e8d0ca42b3b45e4a04fc7dfdd1ec9c1
msgid "Simple Packages"
msgstr ""

#: ../../patterns/packages.rst:26
# 851896b2bfbf4af4ad1fe11c9cc0e4cf
msgid "To convert that into a larger one, just create a new folder :file:`yourapplication` inside the existing one and move everything below it. Then rename :file:`yourapplication.py` to :file:`__init__.py`.  (Make sure to delete all ``.pyc`` files first, otherwise things would most likely break)"
msgstr ""

#: ../../patterns/packages.rst:31
#: ../../patterns/packages.rst:105
# 9e487de33094457b9aaf35b49f379b08
# 0e15239ac6c44aaba552e70474825b97
msgid "You should then end up with something like that::"
msgstr ""

#: ../../patterns/packages.rst:44
# 177a41e1ab67443582b3c60c018e62c0
msgid "But how do you run your application now?  The naive ``python yourapplication/__init__.py`` will not work.  Let's just say that Python does not want modules in packages to be the startup file.  But that is not a big problem, just add a new file called :file:`setup.py` next to the inner :file:`yourapplication` folder with the following contents::"
msgstr ""

#: ../../patterns/packages.rst:61
# 7f652089641e4186b7ff6409b48b64ce
msgid "In order to run the application you need to export an environment variable that tells Flask where to find the application instance::"
msgstr ""

#: ../../patterns/packages.rst:66
# c37943e6bbed42f5a5cf03b43d962575
msgid "If you are outside of the project directory make sure to provide the exact path to your application directory. Similarly you can turn on the development features like this::"
msgstr ""

#: ../../patterns/packages.rst:72
# c6fc6fc24dd743fa89077819bab15c17
msgid "In order to install and run the application you need to issue the following commands::"
msgstr ""

#: ../../patterns/packages.rst:78
# c25964055e0d49c1a8895435c4fbf0ad
msgid "What did we gain from this?  Now we can restructure the application a bit into multiple modules.  The only thing you have to remember is the following quick checklist:"
msgstr ""

#: ../../patterns/packages.rst:82
# ef83e901975742feb6eb53565e8a1edb
msgid "the `Flask` application object creation has to be in the :file:`__init__.py` file.  That way each module can import it safely and the `__name__` variable will resolve to the correct package."
msgstr ""

#: ../../patterns/packages.rst:85
# baa688e39581435f96f96dcd8ea9c035
msgid "all the view functions (the ones with a :meth:`~flask.Flask.route` decorator on top) have to be imported in the :file:`__init__.py` file. Not the object itself, but the module it is in. Import the view module **after the application object is created**."
msgstr ""

#: ../../patterns/packages.rst:90
# 28d1167fa0dc42269a0e758a1637cc31
msgid "Here's an example :file:`__init__.py`::"
msgstr ""

#: ../../patterns/packages.rst:97
# b23ab12e89e942edbdd28f80001e9e3b
msgid "And this is what :file:`views.py` would look like::"
msgstr ""

#: ../../patterns/packages.rst:120
# f540b10c51f24d87a8646e3e17875f80
msgid "Circular Imports"
msgstr ""

#: ../../patterns/packages.rst:122
# 18cb676b5d89483f9bd58377fdc156bc
msgid "Every Python programmer hates them, and yet we just added some: circular imports (That's when two modules depend on each other.  In this case :file:`views.py` depends on :file:`__init__.py`).  Be advised that this is a bad idea in general but here it is actually fine.  The reason for this is that we are not actually using the views in :file:`__init__.py` and just ensuring the module is imported and we are doing that at the bottom of the file."
msgstr ""

#: ../../patterns/packages.rst:130
# 66b8e9a3e5254ab2a45c6c469cc64ac5
msgid "There are still some problems with that approach but if you want to use decorators there is no way around that.  Check out the :ref:`becomingbig` section for some inspiration how to deal with that."
msgstr ""

#: ../../patterns/packages.rst:138
# cfd326979814485d90c468ab184d7393
msgid "Working with Blueprints"
msgstr ""

#: ../../patterns/packages.rst:140
# 9fc2ac8bbcff44e584860d6b486fb231
msgid "If you have larger applications it's recommended to divide them into smaller groups where each group is implemented with the help of a blueprint.  For a gentle introduction into this topic refer to the :ref:`blueprints` chapter of the documentation."
msgstr ""

