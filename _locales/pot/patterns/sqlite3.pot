# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../patterns/sqlite3.rst:4
# 8ed8e2a11759468e8512d6c5088f24a5
msgid "Using SQLite 3 with Flask"
msgstr ""

#: ../../patterns/sqlite3.rst:6
# ee2fcd75c1034093a51432621639fd15
msgid "In Flask you can easily implement the opening of database connections on demand and closing them when the context dies (usually at the end of the request)."
msgstr ""

#: ../../patterns/sqlite3.rst:10
# 36428cfecfdf49068f06a1eb97e32a08
msgid "Here is a simple example of how you can use SQLite 3 with Flask::"
msgstr ""

#: ../../patterns/sqlite3.rst:29
# c62e3fc004914784a1647d1c60892def
msgid "Now, to use the database, the application must either have an active application context (which is always true if there is a request in flight) or create an application context itself.  At that point the ``get_db`` function can be used to get the current database connection.  Whenever the context is destroyed the database connection will be terminated."
msgstr ""

#: ../../patterns/sqlite3.rst:35
# 5becd3b168524f448faffe52684b6776
msgid "Note: if you use Flask 0.9 or older you need to use ``flask._app_ctx_stack.top`` instead of ``g`` as the :data:`flask.g` object was bound to the request and not application context."
msgstr ""

#: ../../patterns/sqlite3.rst:39
# 40a476d5afaf4353b4dbefd9604dd1c3
msgid "Example::"
msgstr ""

#: ../../patterns/sqlite3.rst:49
# 1c552926be284c44a4a0db86a205ef50
msgid "Please keep in mind that the teardown request and appcontext functions are always executed, even if a before-request handler failed or was never executed.  Because of this we have to make sure here that the database is there before we close it."
msgstr ""

#: ../../patterns/sqlite3.rst:55
# b6933ecb7a1b406981a7f3ae9776f70e
msgid "Connect on Demand"
msgstr ""

#: ../../patterns/sqlite3.rst:57
# 2ccffe80d8954bacba20b7e3e35cbb53
msgid "The upside of this approach (connecting on first use) is that this will only open the connection if truly necessary.  If you want to use this code outside a request context you can use it in a Python shell by opening the application context by hand::"
msgstr ""

#: ../../patterns/sqlite3.rst:68
# b3e2edffeb664bc0a8a7fdf9839073e3
msgid "Easy Querying"
msgstr ""

#: ../../patterns/sqlite3.rst:70
# 607070d8884248e6a5c29fbd7dd77735
msgid "Now in each request handling function you can access `get_db()` to get the current open database connection.  To simplify working with SQLite, a row factory function is useful.  It is executed for every result returned from the database to convert the result.  For instance, in order to get dictionaries instead of tuples, this could be inserted into the ``get_db`` function we created above::"
msgstr ""

#: ../../patterns/sqlite3.rst:83
# 8a105841d73a48af8a7c597aad480f45
msgid "This will make the sqlite3 module return dicts for this database connection, which are much nicer to deal with. Even more simply, we could place this in ``get_db`` instead::"
msgstr ""

#: ../../patterns/sqlite3.rst:87
# f77afd1be17b471eb5478ace1ba3ce64
msgid "This would use Row objects rather than dicts to return the results of queries. These are ``namedtuple`` s, so we can access them either by index or by key. For example, assuming we have a ``sqlite3.Row`` called ``r`` for the rows ``id``, ``FirstName``, ``LastName``, and ``MiddleInitial``::"
msgstr ""

#: ../../patterns/sqlite3.rst:103
# 067fd1f78a94430ca8fac72009e4960e
msgid "Additionally, it is a good idea to provide a query function that combines getting the cursor, executing and fetching the results::"
msgstr ""

#: ../../patterns/sqlite3.rst:112
# d31290b12ca34e66b9121f9e5fd88b2e
msgid "This handy little function, in combination with a row factory, makes working with the database much more pleasant than it is by just using the raw cursor and connection objects."
msgstr ""

#: ../../patterns/sqlite3.rst:116
# e3c30141b2b14ddaad21797f3c3a8bf5
msgid "Here is how you can use it::"
msgstr ""

#: ../../patterns/sqlite3.rst:121
# 9bc93873a60741dba30fe2a1611923d5
msgid "Or if you just want a single result::"
msgstr ""

#: ../../patterns/sqlite3.rst:130
# 6af71946bfe743e3b50fcf10fae6f958
msgid "To pass variable parts to the SQL statement, use a question mark in the statement and pass in the arguments as a list.  Never directly add them to the SQL statement with string formatting because this makes it possible to attack the application using `SQL Injections <https://en.wikipedia.org/wiki/SQL_injection>`_."
msgstr ""

#: ../../patterns/sqlite3.rst:137
# 91e9d8f7d2bf4362ba4a123825e4dce8
msgid "Initial Schemas"
msgstr ""

#: ../../patterns/sqlite3.rst:139
# b7d3e13b7fd54bd89a62fca28bc4b578
msgid "Relational databases need schemas, so applications often ship a `schema.sql` file that creates the database.  It's a good idea to provide a function that creates the database based on that schema.  This function can do that for you::"
msgstr ""

#: ../../patterns/sqlite3.rst:151
# fd64183ed2e847f3b2d9f178ee0c8557
msgid "You can then create such a database from the Python shell:"
msgstr ""

