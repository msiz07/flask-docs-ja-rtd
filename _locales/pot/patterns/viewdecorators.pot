# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../patterns/viewdecorators.rst:2
# e685c4f7adc645c0b6e9369c7da872d6
msgid "View Decorators"
msgstr ""

#: ../../patterns/viewdecorators.rst:4
# f574dab3df034f4b9a2824a0c7bc937e
msgid "Python has a really interesting feature called function decorators.  This allows some really neat things for web applications.  Because each view in Flask is a function, decorators can be used to inject additional functionality to one or more functions.  The :meth:`~flask.Flask.route` decorator is the one you probably used already.  But there are use cases for implementing your own decorator.  For instance, imagine you have a view that should only be used by people that are logged in.  If a user goes to the site and is not logged in, they should be redirected to the login page.  This is a good example of a use case where a decorator is an excellent solution."
msgstr ""

#: ../../patterns/viewdecorators.rst:16
# 161a0496a3784452bebcffbb21d7a9de
msgid "Login Required Decorator"
msgstr ""

#: ../../patterns/viewdecorators.rst:18
# 04a77c1361a34ee5a5c7400a583dbedb
msgid "So let's implement such a decorator.  A decorator is a function that wraps and replaces another function.  Since the original function is replaced, you need to remember to copy the original function's information to the new function.  Use :func:`functools.wraps` to handle this for you."
msgstr ""

#: ../../patterns/viewdecorators.rst:23
# 392cbfb855ae4eb3b65d31f41f382209
msgid "This example assumes that the login page is called ``'login'`` and that the current user is stored in ``g.user`` and is ``None`` if there is no-one logged in. ::"
msgstr ""

#: ../../patterns/viewdecorators.rst:38
# c23d1942c8a744849f1a1332c59fd928
msgid "To use the decorator, apply it as innermost decorator to a view function. When applying further decorators, always remember that the :meth:`~flask.Flask.route` decorator is the outermost. ::"
msgstr ""

#: ../../patterns/viewdecorators.rst:48
# 11046435d14742e1bb0290365b048f97
msgid "The ``next`` value will exist in ``request.args`` after a ``GET`` request for the login page.  You'll have to pass it along when sending the ``POST`` request from the login form.  You can do this with a hidden input tag, then retrieve it from ``request.form`` when logging the user in. ::"
msgstr ""

#: ../../patterns/viewdecorators.rst:57
# fffd3edc5b99455d943a518408f3cf81
msgid "Caching Decorator"
msgstr ""

#: ../../patterns/viewdecorators.rst:59
# 3ab4c6f546034c7d826f323949f23d92
msgid "Imagine you have a view function that does an expensive calculation and because of that you would like to cache the generated results for a certain amount of time.  A decorator would be nice for that.  We're assuming you have set up a cache like mentioned in :ref:`caching-pattern`."
msgstr ""

#: ../../patterns/viewdecorators.rst:64
# 142ad08fd414447cb75a851fd1fc2606
msgid "Here is an example cache function.  It generates the cache key from a specific prefix (actually a format string) and the current path of the request.  Notice that we are using a function that first creates the decorator that then decorates the function.  Sounds awful? Unfortunately it is a little bit more complex, but the code should still be straightforward to read."
msgstr ""

#: ../../patterns/viewdecorators.rst:71
# 3e01a3a30a89484e9879c8e7ed894d97
msgid "The decorated function will then work as follows"
msgstr ""

#: ../../patterns/viewdecorators.rst:73
# 4895d01f82294c3580bd26a469db6d58
msgid "get the unique cache key for the current request base on the current path."
msgstr ""

#: ../../patterns/viewdecorators.rst:75
# 7f04381076934ec9b19cdcbad68b68ed
msgid "get the value for that key from the cache. If the cache returned something we will return that value."
msgstr ""

#: ../../patterns/viewdecorators.rst:77
# 795e4fffe5d14eb7b467e7c1256438e5
msgid "otherwise the original function is called and the return value is stored in the cache for the timeout provided (by default 5 minutes)."
msgstr ""

#: ../../patterns/viewdecorators.rst:80
# eb631e5c0d4e4c25b9f05f2c2c7ff373
msgid "Here the code::"
msgstr ""

#: ../../patterns/viewdecorators.rst:99
# 649b1b9d00a04cf3aa69a7460fddc454
msgid "Notice that this assumes an instantiated `cache` object is available, see :ref:`caching-pattern` for more information."
msgstr ""

#: ../../patterns/viewdecorators.rst:104
# 302903da0a8647beb9bed0978067400c
msgid "Templating Decorator"
msgstr ""

#: ../../patterns/viewdecorators.rst:106
# c2aa050b18a340ffa0fc73923858873f
msgid "A common pattern invented by the TurboGears guys a while back is a templating decorator.  The idea of that decorator is that you return a dictionary with the values passed to the template from the view function and the template is automatically rendered.  With that, the following three examples do exactly the same::"
msgstr ""

#: ../../patterns/viewdecorators.rst:126
# 8428a5a4dbe248008ba227236c213ee0
msgid "As you can see, if no template name is provided it will use the endpoint of the URL map with dots converted to slashes + ``'.html'``.  Otherwise the provided template name is used.  When the decorated function returns, the dictionary returned is passed to the template rendering function.  If ``None`` is returned, an empty dictionary is assumed, if something else than a dictionary is returned we return it from the function unchanged.  That way you can still use the redirect function or return simple strings."
msgstr ""

#: ../../patterns/viewdecorators.rst:134
# 21552088416c402eb0d37082a681be08
msgid "Here is the code for that decorator::"
msgstr ""

#: ../../patterns/viewdecorators.rst:158
# 083bceff2bb741bdb0e8771a416f1f2b
msgid "Endpoint Decorator"
msgstr ""

#: ../../patterns/viewdecorators.rst:160
# 8b2a187b9c454bd7b9eeb27223906306
msgid "When you want to use the werkzeug routing system for more flexibility you need to map the endpoint as defined in the :class:`~werkzeug.routing.Rule` to a view function. This is possible with this decorator. For example::"
msgstr ""

