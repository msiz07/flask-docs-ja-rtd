# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../patterns/fabric.rst:4
# acb073a271a14659ac5a0ffcae71d0f4
msgid "Deploying with Fabric"
msgstr ""

#: ../../patterns/fabric.rst:6
# 880289c9b5df4f6a93d597f197b2dc50
msgid "`Fabric`_ is a tool for Python similar to Makefiles but with the ability to execute commands on a remote server.  In combination with a properly set up Python package (:ref:`larger-applications`) and a good concept for configurations (:ref:`config`) it is very easy to deploy Flask applications to external servers."
msgstr ""

#: ../../patterns/fabric.rst:12
# 55b1f078685f43788af0d11b8eca4647
msgid "Before we get started, here a quick checklist of things we have to ensure upfront:"
msgstr ""

#: ../../patterns/fabric.rst:15
# 964449e5eb394155970de3b107ec0fb2
msgid "Fabric 1.0 has to be installed locally.  This tutorial assumes the latest version of Fabric."
msgstr ""

#: ../../patterns/fabric.rst:17
# b72e958502c048459cf7b442cace3bd3
msgid "The application already has to be a package and requires a working :file:`setup.py` file (:ref:`distribute-deployment`)."
msgstr ""

#: ../../patterns/fabric.rst:19
# e6bab17e29b142a48558534c4448aabc
msgid "In the following example we are using `mod_wsgi` for the remote servers.  You can of course use your own favourite server there, but for this example we chose Apache + `mod_wsgi` because it's very easy to setup and has a simple way to reload applications without root access."
msgstr ""

#: ../../patterns/fabric.rst:26
# 6db16befa2c248438ae177e1a4b0572e
msgid "Creating the first Fabfile"
msgstr ""

#: ../../patterns/fabric.rst:28
# 118996be259c499c883048b68653895e
msgid "A fabfile is what controls what Fabric executes.  It is named :file:`fabfile.py` and executed by the `fab` command.  All the functions defined in that file will show up as `fab` subcommands.  They are executed on one or more hosts.  These hosts can be defined either in the fabfile or on the command line.  In this case we will add them to the fabfile."
msgstr ""

#: ../../patterns/fabric.rst:34
# 694d91df80754058bb181115be69aac5
msgid "This is a basic first example that has the ability to upload the current source code to the server and install it into a pre-existing virtual environment::"
msgstr ""

#: ../../patterns/fabric.rst:67
# bfe5ff9440d447ceb41674bc0d8654df
msgid "Running Fabfiles"
msgstr ""

#: ../../patterns/fabric.rst:69
# e5f108735f714674933ff0d5851344b2
msgid "Now how do you execute that fabfile?  You use the `fab` command.  To deploy the current version of the code on the remote server you would use this command::"
msgstr ""

#: ../../patterns/fabric.rst:75
# bc5a01443c1b4bf59043f1f4a06f57e5
msgid "However this requires that our server already has the :file:`/var/www/yourapplication` folder created and :file:`/var/www/yourapplication/env` to be a virtual environment.  Furthermore are we not creating the configuration or ``.wsgi`` file on the server.  So how do we bootstrap a new server into our infrastructure?"
msgstr ""

#: ../../patterns/fabric.rst:81
# f3b86cb2e61b441a9332b5fd1f479f80
msgid "This now depends on the number of servers we want to set up.  If we just have one application server (which the majority of applications will have), creating a command in the fabfile for this is overkill.  But obviously you can do that.  In that case you would probably call it `setup` or `bootstrap` and then pass the servername explicitly on the command line::"
msgstr ""

#: ../../patterns/fabric.rst:90
# 8e2f747fa599490bb2c505c15cd51c55
msgid "To setup a new server you would roughly do these steps:"
msgstr ""

#: ../../patterns/fabric.rst:92
# 17b4b5f9888e4fdfa54da0a0009b7b02
msgid "Create the directory structure in :file:`/var/www`::"
msgstr ""

#: ../../patterns/fabric.rst:98
# f89da08639864f7592d32480afb90e59
msgid "Upload a new :file:`application.wsgi` file to the server and the configuration file for the application (eg: :file:`application.cfg`)"
msgstr ""

#: ../../patterns/fabric.rst:101
# da7077f24d264eee934e379da09b211c
msgid "Create a new Apache config for ``yourapplication`` and activate it. Make sure to activate watching for changes of the ``.wsgi`` file so that we can automatically reload the application by touching it. (See :ref:`mod_wsgi-deployment` for more information)"
msgstr ""

#: ../../patterns/fabric.rst:106
# 0abd8550627a42b4b1869d1497517023
msgid "So now the question is, where do the :file:`application.wsgi` and :file:`application.cfg` files come from?"
msgstr ""

#: ../../patterns/fabric.rst:110
# 78bf0ccb2ecd42b29d4a5e30cc796284
msgid "The WSGI File"
msgstr ""

#: ../../patterns/fabric.rst:112
# 86b1b01abdcb417eb850b91d14746759
msgid "The WSGI file has to import the application and also to set an environment variable so that the application knows where to look for the config.  This is a short example that does exactly that::"
msgstr ""

#: ../../patterns/fabric.rst:120
# 96a2363f79604d83a08a1dbcf995ae52
msgid "The application itself then has to initialize itself like this to look for the config at that environment variable::"
msgstr ""

#: ../../patterns/fabric.rst:127
# 71f9fa16ac4842debcc6c0f2fc0da3f0
msgid "This approach is explained in detail in the :ref:`config` section of the documentation."
msgstr ""

#: ../../patterns/fabric.rst:131
# 5ea19a61b8ee44b9b1f4907caa5f196a
msgid "The Configuration File"
msgstr ""

#: ../../patterns/fabric.rst:133
# ae84d39ab5954f05a914ccfc51b909b2
msgid "Now as mentioned above, the application will find the correct configuration file by looking up the ``YOURAPPLICATION_CONFIG`` environment variable.  So we have to put the configuration in a place where the application will able to find it.  Configuration files have the unfriendly quality of being different on all computers, so you do not version them usually."
msgstr ""

#: ../../patterns/fabric.rst:140
# e1e53652880340c7b5feebd3fe089c41
msgid "A popular approach is to store configuration files for different servers in a separate version control repository and check them out on all servers.  Then symlink the file that is active for the server into the location where it's expected (eg: :file:`/var/www/yourapplication`)."
msgstr ""

#: ../../patterns/fabric.rst:145
# 16dfe3f8a0094b0b897bb59cd4863cc2
msgid "Either way, in our case here we only expect one or two servers and we can upload them ahead of time by hand."
msgstr ""

#: ../../patterns/fabric.rst:150
# 78995bb1ef5f40b684a6c304860897fb
msgid "First Deployment"
msgstr ""

#: ../../patterns/fabric.rst:152
# 728344323cc34f5eac5aecac9054093e
msgid "Now we can do our first deployment.  We have set up the servers so that they have their virtual environments and activated apache configs.  Now we can pack up the application and deploy it::"
msgstr ""

#: ../../patterns/fabric.rst:158
# 4109a28979114f67b04f50bfdaf3272d
msgid "Fabric will now connect to all servers and run the commands as written down in the fabfile.  First it will execute pack so that we have our tarball ready and then it will execute deploy and upload the source code to all servers and install it there.  Thanks to the :file:`setup.py` file we will automatically pull in the required libraries into our virtual environment."
msgstr ""

#: ../../patterns/fabric.rst:166
# caed48df3b7344309a79d06482680695
msgid "Next Steps"
msgstr ""

#: ../../patterns/fabric.rst:168
# 102839777a5742b4a33e08391f9548d4
msgid "From that point onwards there is so much that can be done to make deployment actually fun:"
msgstr ""

#: ../../patterns/fabric.rst:171
# 97b418d62daa44e68d8ac0d8ca060e3f
msgid "Create a `bootstrap` command that initializes new servers.  It could initialize a new virtual environment, setup apache appropriately etc."
msgstr ""

#: ../../patterns/fabric.rst:173
# 2a37fea2eeb8455db20a65f45b79810d
msgid "Put configuration files into a separate version control repository and symlink the active configs into place."
msgstr ""

#: ../../patterns/fabric.rst:175
# da650888822e4331a59d70b7c930cdac
msgid "You could also put your application code into a repository and check out the latest version on the server and then install.  That way you can also easily go back to older versions."
msgstr ""

#: ../../patterns/fabric.rst:178
# 013ed41435924cdb9e742423d52eb890
msgid "hook in testing functionality so that you can deploy to an external server and run the test suite."
msgstr ""

#: ../../patterns/fabric.rst:181
# e33d0e7adc5e4ec3b5dc3a8f92c6c925
msgid "Working with Fabric is fun and you will notice that it's quite magical to type ``fab deploy`` and see your application being deployed automatically to one or more remote servers."
msgstr ""

