# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-22 20:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../flask/docs/patterns/fabric.rst:4
msgid "Deploying with Fabric"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:6
msgid "`Fabric`_ is a tool for Python similar to Makefiles but with the ability to execute commands on a remote server.  In combination with a properly set up Python package (:ref:`larger-applications`) and a good concept for configurations (:ref:`config`) it is very easy to deploy Flask applications to external servers."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:12
msgid "Before we get started, here a quick checklist of things we have to ensure upfront:"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:15
msgid "Fabric 1.0 has to be installed locally.  This tutorial assumes the latest version of Fabric."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:17
msgid "The application already has to be a package and requires a working :file:`setup.py` file (:ref:`distribute-deployment`)."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:19
msgid "In the following example we are using `mod_wsgi` for the remote servers.  You can of course use your own favourite server there, but for this example we chose Apache + `mod_wsgi` because it's very easy to setup and has a simple way to reload applications without root access."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:26
msgid "Creating the first Fabfile"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:28
msgid "A fabfile is what controls what Fabric executes.  It is named :file:`fabfile.py` and executed by the `fab` command.  All the functions defined in that file will show up as `fab` subcommands.  They are executed on one or more hosts.  These hosts can be defined either in the fabfile or on the command line.  In this case we will add them to the fabfile."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:34
msgid "This is a basic first example that has the ability to upload the current source code to the server and install it into a pre-existing virtual environment::"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:67
msgid "Running Fabfiles"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:69
msgid "Now how do you execute that fabfile?  You use the `fab` command.  To deploy the current version of the code on the remote server you would use this command::"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:75
msgid "However this requires that our server already has the :file:`/var/www/yourapplication` folder created and :file:`/var/www/yourapplication/env` to be a virtual environment.  Furthermore are we not creating the configuration or ``.wsgi`` file on the server.  So how do we bootstrap a new server into our infrastructure?"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:81
msgid "This now depends on the number of servers we want to set up.  If we just have one application server (which the majority of applications will have), creating a command in the fabfile for this is overkill.  But obviously you can do that.  In that case you would probably call it `setup` or `bootstrap` and then pass the servername explicitly on the command line::"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:90
msgid "To setup a new server you would roughly do these steps:"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:92
msgid "Create the directory structure in :file:`/var/www`::"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:98
msgid "Upload a new :file:`application.wsgi` file to the server and the configuration file for the application (eg: :file:`application.cfg`)"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:101
msgid "Create a new Apache config for ``yourapplication`` and activate it. Make sure to activate watching for changes of the ``.wsgi`` file so that we can automatically reload the application by touching it. (See :ref:`mod_wsgi-deployment` for more information)"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:106
msgid "So now the question is, where do the :file:`application.wsgi` and :file:`application.cfg` files come from?"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:110
msgid "The WSGI File"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:112
msgid "The WSGI file has to import the application and also to set an environment variable so that the application knows where to look for the config.  This is a short example that does exactly that::"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:120
msgid "The application itself then has to initialize itself like this to look for the config at that environment variable::"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:127
msgid "This approach is explained in detail in the :ref:`config` section of the documentation."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:131
msgid "The Configuration File"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:133
msgid "Now as mentioned above, the application will find the correct configuration file by looking up the ``YOURAPPLICATION_CONFIG`` environment variable.  So we have to put the configuration in a place where the application will able to find it.  Configuration files have the unfriendly quality of being different on all computers, so you do not version them usually."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:140
msgid "A popular approach is to store configuration files for different servers in a separate version control repository and check them out on all servers.  Then symlink the file that is active for the server into the location where it's expected (eg: :file:`/var/www/yourapplication`)."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:145
msgid "Either way, in our case here we only expect one or two servers and we can upload them ahead of time by hand."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:150
msgid "First Deployment"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:152
msgid "Now we can do our first deployment.  We have set up the servers so that they have their virtual environments and activated apache configs.  Now we can pack up the application and deploy it::"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:158
msgid "Fabric will now connect to all servers and run the commands as written down in the fabfile.  First it will execute pack so that we have our tarball ready and then it will execute deploy and upload the source code to all servers and install it there.  Thanks to the :file:`setup.py` file we will automatically pull in the required libraries into our virtual environment."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:166
msgid "Next Steps"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:168
msgid "From that point onwards there is so much that can be done to make deployment actually fun:"
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:171
msgid "Create a `bootstrap` command that initializes new servers.  It could initialize a new virtual environment, setup apache appropriately etc."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:173
msgid "Put configuration files into a separate version control repository and symlink the active configs into place."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:175
msgid "You could also put your application code into a repository and check out the latest version on the server and then install.  That way you can also easily go back to older versions."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:178
msgid "hook in testing functionality so that you can deploy to an external server and run the test suite."
msgstr ""

#: ../../flask/docs/patterns/fabric.rst:181
msgid "Working with Fabric is fun and you will notice that it's quite magical to type ``fab deploy`` and see your application being deployed automatically to one or more remote servers."
msgstr ""

