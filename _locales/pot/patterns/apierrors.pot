# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-22 20:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../flask/docs/patterns/apierrors.rst:2
msgid "Implementing API Exceptions"
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:4
msgid "It's very common to implement RESTful APIs on top of Flask.  One of the first things that developers run into is the realization that the builtin exceptions are not expressive enough for APIs and that the content type of :mimetype:`text/html` they are emitting is not very useful for API consumers."
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:9
msgid "The better solution than using ``abort`` to signal errors for invalid API usage is to implement your own exception type and install an error handler for it that produces the errors in the format the user is expecting."
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:14
msgid "Simple Exception Class"
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:16
msgid "The basic idea is to introduce a new exception that can take a proper human readable message, a status code for the error and some optional payload to give more context for the error."
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:20
msgid "This is a simple example::"
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:39
msgid "A view can now raise that exception with an error message.  Additionally some extra payload can be provided as a dictionary through the `payload` parameter."
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:44
msgid "Registering an Error Handler"
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:46
msgid "At that point views can raise that error, but it would immediately result in an internal server error.  The reason for this is that there is no handler registered for this error class.  That however is easy to add::"
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:57
msgid "Usage in Views"
msgstr ""

#: ../../flask/docs/patterns/apierrors.rst:59
msgid "Here is how a view can use that functionality::"
msgstr ""

