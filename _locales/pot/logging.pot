# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../logging.rst:2
# 9cd8d3337f6c4a718f12b26aa2fa67a5
msgid "Logging"
msgstr ""

#: ../../logging.rst:4
# 445fb48cfe0a466db5e657e82b655691
msgid "Flask uses standard Python :mod:`logging`. Messages about your Flask application are logged with :meth:`app.logger <flask.Flask.logger>`, which takes the same name as :attr:`app.name <flask.Flask.name>`. This logger can also be used to log your own messages."
msgstr ""

#: ../../logging.rst:25
# 32060d07e20c4a6582224f8eabbaae2e
msgid "Basic Configuration"
msgstr ""

#: ../../logging.rst:27
# 96f94e1b8ce646269c6333911c540ce1
msgid "When you want to configure logging for your project, you should do it as soon as possible when the program starts. If :meth:`app.logger <flask.Flask.logger>` is accessed before logging is configured, it will add a default handler. If possible, configure logging before creating the application object."
msgstr ""

#: ../../logging.rst:32
# f916edc1793249c6b081031b6614f976
msgid "This example uses :func:`~logging.config.dictConfig` to create a logging configuration similar to Flask's default, except for all logs::"
msgstr ""

#: ../../logging.rst:57
# 972dff3eddab44d5b5d0d2c50c45e691
msgid "Default Configuration"
msgstr ""

#: ../../logging.rst:59
# 15ff50ff2df140299051ebf68b5c4864
msgid "If you do not configure logging yourself, Flask will add a :class:`~logging.StreamHandler` to :meth:`app.logger <flask.Flask.logger>` automatically. During requests, it will write to the stream specified by the WSGI server in ``environ['wsgi.errors']`` (which is usually :data:`sys.stderr`). Outside a request, it will log to :data:`sys.stderr`."
msgstr ""

#: ../../logging.rst:67
# 18e58fd131224d9a9ee26fb99951d870
msgid "Removing the Default Handler"
msgstr ""

#: ../../logging.rst:69
# 42a9de7a9a484b15bbd26c03f94c84b9
msgid "If you configured logging after accessing :meth:`app.logger <flask.Flask.logger>`, and need to remove the default handler, you can import and remove it::"
msgstr ""

#: ../../logging.rst:79
# f67b1bbcf2e2456eae82866aa7394883
msgid "Email Errors to Admins"
msgstr ""

#: ../../logging.rst:81
# d81bcfed5c8e44b1a9e74e70990b8319
msgid "When running the application on a remote server for production, you probably won't be looking at the log messages very often. The WSGI server will probably send log messages to a file, and you'll only check that file if a user tells you something went wrong."
msgstr ""

#: ../../logging.rst:86
# a05a56b32aea41488c5094fdbbee2ca9
msgid "To be proactive about discovering and fixing bugs, you can configure a :class:`logging.handlers.SMTPHandler` to send an email when errors and higher are logged. ::"
msgstr ""

#: ../../logging.rst:107
# 66b51268c8054ee78f3f02aabab6610b
msgid "This requires that you have an SMTP server set up on the same server. See the Python docs for more information about configuring the handler."
msgstr ""

#: ../../logging.rst:112
# 566e82779eec46d0986d20bafdcf0464
msgid "Injecting Request Information"
msgstr ""

#: ../../logging.rst:114
# 55f7880c223a40c39c9acb18fc0c7171
msgid "Seeing more information about the request, such as the IP address, may help debugging some errors. You can subclass :class:`logging.Formatter` to inject your own fields that can be used in messages. You can change the formatter for Flask's default handler, the mail handler defined above, or any other handler. ::"
msgstr ""

#: ../../logging.rst:143
# 9e7f426db8464fceaf0d5f5b298e1575
msgid "Other Libraries"
msgstr ""

#: ../../logging.rst:145
# 85ec1a4ef8fc48cab04eb2d7e00c810c
msgid "Other libraries may use logging extensively, and you want to see relevant messages from those logs too. The simplest way to do this is to add handlers to the root logger instead of only the app logger. ::"
msgstr ""

#: ../../logging.rst:155
# 294cecfcd0564731ba4704299d3ec30d
msgid "Depending on your project, it may be more useful to configure each logger you care about separately, instead of configuring only the root logger. ::"
msgstr ""

#: ../../logging.rst:168
# 41df0a5c72f34072a0ab9bc5e30d1d37
msgid "Werkzeug"
msgstr ""

#: ../../logging.rst:170
# 68c0d63d702747369bc00512037f1b4c
msgid "Werkzeug logs basic request/response information to the ``'werkzeug'`` logger. If the root logger has no handlers configured, Werkzeug adds a :class:`~logging.StreamHandler` to its logger."
msgstr ""

#: ../../logging.rst:176
# 1748e8b0ca2346679db2c8f09439ccce
msgid "Flask Extensions"
msgstr ""

#: ../../logging.rst:178
# a6e82f52b00040288b0f5ee3d9613a14
msgid "Depending on the situation, an extension may choose to log to :meth:`app.logger <flask.Flask.logger>` or its own named logger. Consult each extension's documentation for details."
msgstr ""

