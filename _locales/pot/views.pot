# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.2.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-26 22:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../flask/docs/views.rst:2
msgid "Class-based Views"
msgstr ""

#: ../../flask/docs/views.rst:6
msgid "This page introduces using the :class:`View` and :class:`MethodView` classes to write class-based views."
msgstr ""

#: ../../flask/docs/views.rst:9
msgid "A class-based view is a class that acts as a view function. Because it is a class, different instances of the class can be created with different arguments, to change the behavior of the view. This is also known as generic, reusable, or pluggable views."
msgstr ""

#: ../../flask/docs/views.rst:14
msgid "An example of where this is useful is defining a class that creates an API based on the database model it is initialized with."
msgstr ""

#: ../../flask/docs/views.rst:17
msgid "For more complex API behavior and customization, look into the various API extensions for Flask."
msgstr ""

#: ../../flask/docs/views.rst:22
msgid "Basic Reusable View"
msgstr ""

#: ../../flask/docs/views.rst:24
msgid "Let's walk through an example converting a view function to a view class. We start with a view function that queries a list of users then renders a template to show the list."
msgstr ""

#: ../../flask/docs/views.rst:35
msgid "This works for the user model, but let's say you also had more models that needed list pages. You'd need to write another view function for each model, even though the only thing that would change is the model and template name."
msgstr ""

#: ../../flask/docs/views.rst:40
msgid "Instead, you can write a :class:`View` subclass that will query a model and render a template. As the first step, we'll convert the view to a class without any customization."
msgstr ""

#: ../../flask/docs/views.rst:55
msgid "The :meth:`View.dispatch_request` method is the equivalent of the view function. Calling :meth:`View.as_view` method will create a view function that can be registered on the app with its :meth:`~flask.Flask.add_url_rule` method. The first argument to ``as_view`` is the name to use to refer to the view with :func:`~flask.url_for`."
msgstr ""

#: ../../flask/docs/views.rst:64
msgid "You can't decorate the class with ``@app.route()`` the way you'd do with a basic view function."
msgstr ""

#: ../../flask/docs/views.rst:67
msgid "Next, we need to be able to register the same view class for different models and templates, to make it more useful than the original function. The class will take two arguments, the model and template, and store them on ``self``. Then ``dispatch_request`` can reference these instead of hard-coded values."
msgstr ""

#: ../../flask/docs/views.rst:84
msgid "Remember, we create the view function with ``View.as_view()`` instead of creating the class directly. Any extra arguments passed to ``as_view`` are then passed when creating the class. Now we can register the same view to handle multiple models."
msgstr ""

#: ../../flask/docs/views.rst:102
msgid "URL Variables"
msgstr ""

#: ../../flask/docs/views.rst:104
msgid "Any variables captured by the URL are passed as keyword arguments to the ``dispatch_request`` method, as they would be for a regular view function."
msgstr ""

#: ../../flask/docs/views.rst:123
msgid "View Lifetime and ``self``"
msgstr ""

#: ../../flask/docs/views.rst:125
msgid "By default, a new instance of the view class is created every time a request is handled. This means that it is safe to write other data to ``self`` during the request, since the next request will not see it, unlike other forms of global state."
msgstr ""

#: ../../flask/docs/views.rst:130
msgid "However, if your view class needs to do a lot of complex initialization, doing it for every request is unnecessary and can be inefficient. To avoid this, set :attr:`View.init_every_request` to ``False``, which will only create one instance of the class and use it for every request. In this case, writing to ``self`` is not safe. If you need to store data during the request, use :data:`~flask.g` instead."
msgstr ""

#: ../../flask/docs/views.rst:137
msgid "In the ``ListView`` example, nothing writes to ``self`` during the request, so it is more efficient to create a single instance."
msgstr ""

#: ../../flask/docs/views.rst:153
msgid "Different instances will still be created each for each ``as_view`` call, but not for each request to those views."
msgstr ""

#: ../../flask/docs/views.rst:158
msgid "View Decorators"
msgstr ""

#: ../../flask/docs/views.rst:160
msgid "The view class itself is not the view function. View decorators need to be applied to the view function returned by ``as_view``, not the class itself. Set :attr:`View.decorators` to a list of decorators to apply."
msgstr ""

#: ../../flask/docs/views.rst:171
msgid "If you didn't set ``decorators``, you could apply them manually instead. This is equivalent to:"
msgstr ""

#: ../../flask/docs/views.rst:181
msgid "Keep in mind that order matters. If you're used to ``@decorator`` style, this is equivalent to:"
msgstr ""

#: ../../flask/docs/views.rst:194
msgid "Method Hints"
msgstr ""

#: ../../flask/docs/views.rst:196
msgid "A common pattern is to register a view with ``methods=[\"GET\", \"POST\"]``, then check ``request.method == \"POST\"`` to decide what to do. Setting :attr:`View.methods` is equivalent to passing the list of methods to ``add_url_rule`` or ``route``."
msgstr ""

#: ../../flask/docs/views.rst:213
msgid "This is equivalent to the following, except further subclasses can inherit or change the methods."
msgstr ""

#: ../../flask/docs/views.rst:226
msgid "Method Dispatching and APIs"
msgstr ""

#: ../../flask/docs/views.rst:228
msgid "For APIs it can be helpful to use a different function for each HTTP method. :class:`MethodView` extends the basic :class:`View` to dispatch to different methods of the class based on the request method. Each HTTP method maps to a method of the class with the same (lowercase) name."
msgstr ""

#: ../../flask/docs/views.rst:233
msgid ":class:`MethodView` automatically sets :attr:`View.methods` based on the methods defined by the class. It even knows how to handle subclasses that override or define other methods."
msgstr ""

#: ../../flask/docs/views.rst:237
msgid "We can make a generic ``ItemAPI`` class that provides get (detail), patch (edit), and delete methods for a given model. A ``GroupAPI`` can provide get (list) and post (create) methods."
msgstr ""

#: ../../flask/docs/views.rst:304
msgid "This produces the following views, a standard REST API!"
msgstr ""

#: ../../flask/docs/views.rst:307
msgid "URL"
msgstr ""

#: ../../flask/docs/views.rst:307
msgid "Method"
msgstr ""

#: ../../flask/docs/views.rst:307
msgid "Description"
msgstr ""

#: ../../flask/docs/views.rst:309
#: ../../flask/docs/views.rst:310
msgid "``/users/``"
msgstr ""

#: ../../flask/docs/views.rst:309
#: ../../flask/docs/views.rst:311
#: ../../flask/docs/views.rst:314
#: ../../flask/docs/views.rst:316
msgid "``GET``"
msgstr ""

#: ../../flask/docs/views.rst:309
msgid "List all users"
msgstr ""

#: ../../flask/docs/views.rst:310
#: ../../flask/docs/views.rst:315
msgid "``POST``"
msgstr ""

#: ../../flask/docs/views.rst:310
msgid "Create a new user"
msgstr ""

#: ../../flask/docs/views.rst:311
#: ../../flask/docs/views.rst:312
#: ../../flask/docs/views.rst:313
msgid "``/users/<id>``"
msgstr ""

#: ../../flask/docs/views.rst:311
msgid "Show a single user"
msgstr ""

#: ../../flask/docs/views.rst:312
#: ../../flask/docs/views.rst:317
msgid "``PATCH``"
msgstr ""

#: ../../flask/docs/views.rst:312
msgid "Update a user"
msgstr ""

#: ../../flask/docs/views.rst:313
#: ../../flask/docs/views.rst:318
msgid "``DELETE``"
msgstr ""

#: ../../flask/docs/views.rst:313
msgid "Delete a user"
msgstr ""

#: ../../flask/docs/views.rst:314
#: ../../flask/docs/views.rst:315
msgid "``/stories/``"
msgstr ""

#: ../../flask/docs/views.rst:314
msgid "List all stories"
msgstr ""

#: ../../flask/docs/views.rst:315
msgid "Create a new story"
msgstr ""

#: ../../flask/docs/views.rst:316
#: ../../flask/docs/views.rst:317
#: ../../flask/docs/views.rst:318
msgid "``/stories/<id>``"
msgstr ""

#: ../../flask/docs/views.rst:316
msgid "Show a single story"
msgstr ""

#: ../../flask/docs/views.rst:317
msgid "Update a story"
msgstr ""

#: ../../flask/docs/views.rst:318
msgid "Delete a story"
msgstr ""
