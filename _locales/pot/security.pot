# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../security.rst:2
# 072c5c89b74748a281fbf43ba2e33fcf
msgid "Security Considerations"
msgstr ""

#: ../../security.rst:4
# ecf50cc98cea4ba095e8d635bbadb687
msgid "Web applications usually face all kinds of security problems and it's very hard to get everything right.  Flask tries to solve a few of these things for you, but there are a couple more you have to take care of yourself."
msgstr ""

#: ../../security.rst:11
# c7f6c505bb8949a6b2521217c0a48f62
msgid "Cross-Site Scripting (XSS)"
msgstr ""

#: ../../security.rst:13
# 5509886ebd5f404eaa30592b96c83c49
msgid "Cross site scripting is the concept of injecting arbitrary HTML (and with it JavaScript) into the context of a website.  To remedy this, developers have to properly escape text so that it cannot include arbitrary HTML tags.  For more information on that have a look at the Wikipedia article on `Cross-Site Scripting <https://en.wikipedia.org/wiki/Cross-site_scripting>`_."
msgstr ""

#: ../../security.rst:20
# 2c06cfa627824db583772d48ce1dccc2
msgid "Flask configures Jinja2 to automatically escape all values unless explicitly told otherwise.  This should rule out all XSS problems caused in templates, but there are still other places where you have to be careful:"
msgstr ""

#: ../../security.rst:25
# 0c4cd7f31b9e49ffbb09f6ae94066ffb
msgid "generating HTML without the help of Jinja2"
msgstr ""

#: ../../security.rst:26
# aca9b4452d234af89750bc4d90e01007
msgid "calling :class:`~flask.Markup` on data submitted by users"
msgstr ""

#: ../../security.rst:27
# 8dbf99640bdf453aacaea80aa91f7d1e
msgid "sending out HTML from uploaded files, never do that, use the ``Content-Disposition: attachment`` header to prevent that problem."
msgstr ""

#: ../../security.rst:29
# 898c5b8f9a1a40b0b6be576a3bd42b79
msgid "sending out textfiles from uploaded files.  Some browsers are using content-type guessing based on the first few bytes so users could trick a browser to execute HTML."
msgstr ""

#: ../../security.rst:33
# 95b636717b424a5cac46fbe042791cb7
msgid "Another thing that is very important are unquoted attributes.  While Jinja2 can protect you from XSS issues by escaping HTML, there is one thing it cannot protect you from: XSS by attribute injection.  To counter this possible attack vector, be sure to always quote your attributes with either double or single quotes when using Jinja expressions in them:"
msgstr ""

#: ../../security.rst:43
# 76cdf911eab84277abcbc0cecc260649
msgid "Why is this necessary?  Because if you would not be doing that, an attacker could easily inject custom JavaScript handlers.  For example an attacker could inject this piece of HTML+JavaScript:"
msgstr ""

#: ../../security.rst:51
# 5eb4a1f0527549509d81a7548bd7ba1e
msgid "When the user would then move with the mouse over the input, the cookie would be presented to the user in an alert window.  But instead of showing the cookie to the user, a good attacker might also execute any other JavaScript code.  In combination with CSS injections the attacker might even make the element fill out the entire page so that the user would just have to have the mouse anywhere on the page to trigger the attack."
msgstr ""

#: ../../security.rst:58
# 07dc4861bcca452ba211aa061b99f583
msgid "There is one class of XSS issues that Jinja's escaping does not protect against. The ``a`` tag's ``href`` attribute can contain a `javascript:` URI, which the browser will execute when clicked if not secured properly."
msgstr ""

#: ../../security.rst:67
# c984497ae63544b5ac2f02ca74faeea8
msgid "To prevent this, you'll need to set the :ref:`security-csp` response header."
msgstr ""

#: ../../security.rst:70
# 7dca7a139a0e47e1b21a2b727f20bc92
msgid "Cross-Site Request Forgery (CSRF)"
msgstr ""

#: ../../security.rst:72
# bbbeea13374b471b9709aaacf94596b8
msgid "Another big problem is CSRF.  This is a very complex topic and I won't outline it here in detail just mention what it is and how to theoretically prevent it."
msgstr ""

#: ../../security.rst:76
# f8b41960b5434465a2e61ac24a037b27
msgid "If your authentication information is stored in cookies, you have implicit state management.  The state of \"being logged in\" is controlled by a cookie, and that cookie is sent with each request to a page. Unfortunately that includes requests triggered by 3rd party sites.  If you don't keep that in mind, some people might be able to trick your application's users with social engineering to do stupid things without them knowing."
msgstr ""

#: ../../security.rst:84
# a6f40654a2354e0e87589346a7c95ee3
msgid "Say you have a specific URL that, when you sent ``POST`` requests to will delete a user's profile (say ``http://example.com/user/delete``).  If an attacker now creates a page that sends a post request to that page with some JavaScript they just have to trick some users to load that page and their profiles will end up being deleted."
msgstr ""

#: ../../security.rst:90
# a4d92a655846480883b9715cd4fba06d
msgid "Imagine you were to run Facebook with millions of concurrent users and someone would send out links to images of little kittens.  When users would go to that page, their profiles would get deleted while they are looking at images of fluffy cats."
msgstr ""

#: ../../security.rst:95
# 6bddff338c064609aa4fecb82368c84f
msgid "How can you prevent that?  Basically for each request that modifies content on the server you would have to either use a one-time token and store that in the cookie **and** also transmit it with the form data. After receiving the data on the server again, you would then have to compare the two tokens and ensure they are equal."
msgstr ""

#: ../../security.rst:101
# 11cedf4d53e244dabbdaf91a82a6ed78
msgid "Why does Flask not do that for you?  The ideal place for this to happen is the form validation framework, which does not exist in Flask."
msgstr ""

#: ../../security.rst:107
# d7cd87fff0504c64a634d4e064c79ed5
msgid "JSON Security"
msgstr ""

#: ../../security.rst:109
# 6cc9067778e04f1c8b81e0e6db1a3d39
msgid "In Flask 0.10 and lower, :func:`~flask.jsonify` did not serialize top-level arrays to JSON. This was because of a security vulnerability in ECMAScript 4."
msgstr ""

#: ../../security.rst:112
# 46c3a54a16ea4de1868f05ecea910037
msgid "ECMAScript 5 closed this vulnerability, so only extremely old browsers are still vulnerable. All of these browsers have `other more serious vulnerabilities <https://github.com/pallets/flask/issues/248#issuecomment-59934857>`_, so this behavior was changed and :func:`~flask.jsonify` now supports serializing arrays."
msgstr ""

#: ../../security.rst:120
# 40a06406cbca4cd2918f57306894c341
msgid "Security Headers"
msgstr ""

#: ../../security.rst:122
# 2be414f4eb6248d18a679b184f2e7234
msgid "Browsers recognize various response headers in order to control security. We recommend reviewing each of the headers below for use in your application. The `Flask-Talisman`_ extension can be used to manage HTTPS and the security headers for you."
msgstr ""

#: ../../security.rst:130
# 606dba6f02c74707aef49ef05c1e3229
msgid "HTTP Strict Transport Security (HSTS)"
msgstr ""

#: ../../security.rst:132
# 920d787ddc25400a8203740b1429b4b2
msgid "Tells the browser to convert all HTTP requests to HTTPS, preventing man-in-the-middle (MITM) attacks. ::"
msgstr ""

#: ../../security.rst:137
# 9630e5ea3aab46088deb54b80974781a
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security"
msgstr ""

#: ../../security.rst:142
# b39c5bfb98f44130bce144b7e0bc40ea
msgid "Content Security Policy (CSP)"
msgstr ""

#: ../../security.rst:144
# f5c3b798f46447b5b592e289d8e720d9
msgid "Tell the browser where it can load various types of resource from. This header should be used whenever possible, but requires some work to define the correct policy for your site. A very strict policy would be::"
msgstr ""

#: ../../security.rst:150
# 1eb3b3525792433088138a2b28c4ba75
msgid "https://csp.withgoogle.com/docs/index.html"
msgstr ""

#: ../../security.rst:151
# 2095607410924a2b9802a2a9fddb667e
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy"
msgstr ""

#: ../../security.rst:154
# 22dbe869bfb9451d9dff967f57e06c7d
msgid "X-Content-Type-Options"
msgstr ""

#: ../../security.rst:156
# 656e05ceca2b419f82d90fed8285da56
msgid "Forces the browser to honor the response content type instead of trying to detect it, which can be abused to generate a cross-site scripting (XSS) attack. ::"
msgstr ""

#: ../../security.rst:162
# a03d0d99ec0843f982c330b7d8e20e65
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options"
msgstr ""

#: ../../security.rst:165
# 1ddcec04e8cd4f549920bfc53f4c4e53
msgid "X-Frame-Options"
msgstr ""

#: ../../security.rst:167
# 6917a62dbd16495fa55d786f862c52ee
msgid "Prevents external sites from embedding your site in an ``iframe``. This prevents a class of attacks where clicks in the outer frame can be translated invisibly to clicks on your page's elements. This is also known as \"clickjacking\". ::"
msgstr ""

#: ../../security.rst:174
# 8003fdbac3ca44a0964297925e62ad0e
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"
msgstr ""

#: ../../security.rst:177
# d7315452e32f4b7d9b2d54ac80c0c46e
msgid "X-XSS-Protection"
msgstr ""

#: ../../security.rst:179
# 7fdc2627489c48ad8146c81595831551
msgid "The browser will try to prevent reflected XSS attacks by not loading the page if the request contains something that looks like JavaScript and the response contains the same data. ::"
msgstr ""

#: ../../security.rst:185
# 67127aa57511409da3682a0e8fe9482e
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection"
msgstr ""

#: ../../security.rst:191
# 60b59e10d1c04f9a9bf036f2cd74192b
msgid "Set-Cookie options"
msgstr ""

#: ../../security.rst:193
# 538c643b913c4a4bbc7479fa90750ca5
msgid "These options can be added to a ``Set-Cookie`` header to improve their security. Flask has configuration options to set these on the session cookie. They can be set on other cookies too."
msgstr ""

#: ../../security.rst:197
# 64d690f0bf09477fbc111af3ff9f7b27
msgid "``Secure`` limits cookies to HTTPS traffic only."
msgstr ""

#: ../../security.rst:198
# b0c78ad3e35041549e487767985e2158
msgid "``HttpOnly`` protects the contents of cookies from being read with JavaScript."
msgstr ""

#: ../../security.rst:200
# 2de2035c7a074d0a99260f2ce7c49208
msgid "``SameSite`` restricts how cookies are sent with requests from external sites. Can be set to ``'Lax'`` (recommended) or ``'Strict'``. ``Lax`` prevents sending cookies with CSRF-prone requests from external sites, such as submitting a form. ``Strict`` prevents sending cookies with all external requests, including following regular links."
msgstr ""

#: ../../security.rst:216
# ab833b90a37e44fb93c28ea48149a50a
msgid "Specifying ``Expires`` or ``Max-Age`` options, will remove the cookie after the given time, or the current time plus the age, respectively. If neither option is set, the cookie will be removed when the browser is closed. ::"
msgstr ""

#: ../../security.rst:223
# 93584cb51b904be6aa7cbc9bf49a02e8
msgid "For the session cookie, if :attr:`session.permanent <flask.session.permanent>` is set, then :data:`PERMANENT_SESSION_LIFETIME` is used to set the expiration. Flask's default cookie implementation validates that the cryptographic signature is not older than this value. Lowering this value may help mitigate replay attacks, where intercepted cookies can be sent at a later time. ::"
msgstr ""

#: ../../security.rst:241
# 274b50d054a34df681c73c8bba3ccc81
msgid "Use :class:`itsdangerous.TimedSerializer` to sign and validate other cookie values (or any values that need secure signatures)."
msgstr ""

#: ../../security.rst:244
# 20eed18e9d044ebc9d6cd599ef00cdcd
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"
msgstr ""

#: ../../security.rst:245
# 537f02df35fc40b2965ad2b508a93836
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"
msgstr ""

#: ../../security.rst:251
# 84b7a24d81b44796ab2236d74b302097
msgid "HTTP Public Key Pinning (HPKP)"
msgstr ""

#: ../../security.rst:253
# eba0c9e59dbf4f749baa52c376d076ea
msgid "This tells the browser to authenticate with the server using only the specific certificate key to prevent MITM attacks."
msgstr ""

#: ../../security.rst:257
# 3e85beadc553448d86d6f1f6984857e3
msgid "Be careful when enabling this, as it is very difficult to undo if you set up or upgrade your key incorrectly."
msgstr ""

#: ../../security.rst:260
# 3b624609acbe42998fdcb3a3df476525
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"
msgstr ""

