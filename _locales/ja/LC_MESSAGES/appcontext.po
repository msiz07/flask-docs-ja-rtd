# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# 5161a70b989c44e5a327e1a9b6cd0b98
#: ../../appcontext.rst:6
msgid "The Application Context"
msgstr "アプリケーションのコンテキスト（The Application Context）"

# a508c0b3d9e24ed48b9af1223ca61cc4
#: ../../appcontext.rst:8
msgid ""
"The application context keeps track of the application-level data during "
"a request, CLI command, or other activity. Rather than passing the "
"application around to each function, the :data:`current_app` and "
":data:`g` proxies are accessed instead."
msgstr ""
"application contextは、リクエスト、CLIコマンド、もしくはその他の活動の"
"期間中（訳注: 普通はWSGIサーバなどがリクエストを受信した後にWSGIレベルの"
"アプリケーションであるFlaskアプリを起動した後、リクエストへの対応処理が"
"終了してFlaskアプリを終了させるまでの間とほぼ同じ）、アプリケーションの"
"レベルのデータを把握します（訳注: そのとき起動・リクエストへの対応をして"
"いるFlaskアプリのインスタンスに固有のデータの格納・操作を可能にする"
"仕組みのような意味合い）。それぞれの関数でアプリケーションが渡されて回る"
"よりも、プロキシの\ :data:`current_app`\ と\ :data:`g`\ が代わりにアク"
"セスされます（訳注: 引数で受け取らなくてもFlaskアプリのインスタンスに関数"
"内からアクセスできるように、flaskパッケージをimport後はflask.current_app"
"やflask.gにアクセスすればそのとき実行中のFlaskアプリ固有のオブジェクトに"
"アクセスできるようなことを指しています）。"

# 8fe988affa494220ac88df8d322728de
#: ../../appcontext.rst:13
msgid ""
"This is similar to the :doc:`/reqcontext`, which keeps track of request-"
"level data during a request. A corresponding application context is "
"pushed when a request context is pushed."
msgstr ""
"これは、リクエストの期間中はリクエストのレベルのデータを把握する\ "
":doc:`/reqcontext`\ と似ています。request contextがpushされたとき、対応"
"するapplication contextもpushされます（訳注：application contextとrequest "
"contextはFlask内でスタックのデータ構造を使って管理されており、一般的に"
"スタックへデータを追加することをpushといいます）。"

# a9f2c2afc6044e11bffe2f7578143469
#: ../../appcontext.rst:18
msgid "Purpose of the Context"
msgstr "コンテキストの目的（Purpose of the Context）"

# ade29131b7e74c169a66df9c580ad3be
#: ../../appcontext.rst:20
msgid ""
"The :class:`Flask` application object has attributes, such as "
":attr:`~Flask.config`, that are useful to access within views and "
":doc:`CLI commands </cli>`. However, importing the ``app`` instance "
"within the modules in your project is prone to circular import issues. "
"When using the :doc:`app factory pattern </patterns/appfactories>` or "
"writing reusable :doc:`blueprints </blueprints>` or :doc:`extensions "
"</extensions>` there won't be an ``app`` instance to import at all."
msgstr ""
":class:`Flask`\ アプリケーションのオブジェクトには、\ "
":attr:`~Flask.config`\ のような、viewや\ :doc:`CLIのコマンド </cli>`\ "
"の中からアクセスするときに便利な属性があります。しかしながら、\ ``app``\ "
"のインスタンスを自分のプロジェクトのモジュール内でimportすると、"
"循環import（circular import）の問題に陥りやすくなります（訳注: import"
"するとFlaskアプリのインスタンスを作成して提供するモジュールやパッケージ"
"では、そのパッケージの別モジュールなどのコードでimportすると、Flaskアプリ"
"のインスタンス内で同じFlaskアプリを作成してアクセスするような状況に陥り"
"やすくなります）。\ :doc:`app factoryパターン </patterns/appfactories>`\ "
"を使用したり、再利用可能な\ :doc:`blueprints </blueprints>`\ または\ "
":doc:`Flask拡張 </extensions>`\ を書いたりするときは、importするための\ "
"``app``\ のインスタンスがそもそも存在しないでしょう（訳注: app factory"
"パターンのFlaskアプリのコードでは、importされただけではFlaskアプリの"
"インスタンスを作成・提供せず、モジュールやパッケージ内で用意した"
"factory関数が呼び出されたときに初めてFlaskアプリのインスタンスを作成"
"して返します。factory関数以外のコードでは、モジュールまたはパッケージを"
"importするだけでは（factory関数を呼び出さない限り）Flaskアプリの"
"インスタンスを取得できなくなります。またblueprintやFlask拡張では、"
"Flaskアプリのインスタンスを自分で作成はせず、既に作成済みのFlask"
"アプリのインスタンスに対して追加機能などを作成するため、基本的に"
"blueprintやFlask拡張自身のコードではFlaskアプリのインスタンスを作成"
"しません）。"

# c25f76ea224949a19dedede3430302a1
#: ../../appcontext.rst:29
msgid ""
"Flask solves this issue with the *application context*. Rather than "
"referring to an ``app`` directly, you use the :data:`current_app` proxy, "
"which points to the application handling the current activity."
msgstr ""
"Flaskはこの問題を、\ *application context*\ を使って解決します。\ ``app``\ "
"（Flaskアプリのインスタンス）を直接参照するのではなく、その時点の活動を"
"処理しているアプリケーションを指すプロキシになる\ :data:`current_app`\ を"
"使用できます。"

# 1af9cd18f3ee45e4bbdae05d57748b98
#: ../../appcontext.rst:33
msgid ""
"Flask automatically *pushes* an application context when handling a "
"request. View functions, error handlers, and other functions that run "
"during a request will have access to :data:`current_app`."
msgstr ""
"リクエストを処理するとき、Flaskは自動的にapplication contextを\ *push"
"します*\ 。リクエストの期間中に実行するview関数、エラー処理、およびその"
"他の関数が、\ :data:`current_app`\ へアクセスします。"

# 4fbb8eba355343cca77c03756f998e03
#: ../../appcontext.rst:37
msgid ""
"Flask will also automatically push an app context when running CLI "
"commands registered with :attr:`Flask.cli` using ``@app.cli.command()``."
msgstr ""
"Flaskは\ ``@app.cli.command()``\ を使用して\ :attr:`Flask.cli`\ に登録"
"されたCLIコマンドを実行するとき、自動的にapp contextをpushします。"

# ec95ddb554e54c188a94d7deb0e3479d
#: ../../appcontext.rst:42
msgid "Lifetime of the Context"
msgstr "コンテキストの生存期間（Lifetime of the Context）"

# 5a01b9349cf647a7bbb6fa110a1ac41e
#: ../../appcontext.rst:44
msgid ""
"The application context is created and destroyed as necessary. When a "
"Flask application begins handling a request, it pushes an application "
"context and a :doc:`request context </reqcontext>`. When the request ends"
" it pops the request context then the application context. Typically, an "
"application context will have the same lifetime as a request."
msgstr ""
"application contextは必要に応じて作成され破壊されます。Flask"
"アプリケーションがリクエストの処理を始めたとき、Flaskアプリケーションは"
"application contextと\ :doc:`request context </reqcontext>`\ をpush"
"します。リクエストが終了するとき、Flaskアプリケーションはrequest contextを"
"popし（訳注: 一般的にスタックからデータを取り出すことをpopといいます）、"
"それからapplication contextをpopします。典型的には、application contextは"
"リクエストと同じ生存期間を持ちます。"

# 0c0730da1eb141b1b15ace2aae548017
#: ../../appcontext.rst:51
msgid ""
"See :doc:`/reqcontext` for more information about how the contexts work "
"and the full life cycle of a request."
msgstr ""
"contextがどのように機能するかとリクエストの全体ライフサイクル（訳注: 作成"
"されてから消滅するまで）に関するさらなる情報は、\ :doc:`/reqcontext`\ を"
"確認してください。"

# 34e257fef1cf482f9d2ad91e40406817
#: ../../appcontext.rst:56
msgid "Manually Push a Context"
msgstr "手作業でのコンテキストの登録（Manually Push a Context）"

# 221d720d4d914a2c81a7c60443d27f18
#: ../../appcontext.rst:58
msgid ""
"If you try to access :data:`current_app`, or anything that uses it, "
"outside an application context, you'll get this error message:"
msgstr ""
"もし\ :data:`current_app`\ またはcurrent_appを使うものへのアクセスを"
"試すとき、application contextの外側の場合（application contextが"
"スタックへpushされた状態でない場合）、以下のようなエラーメッセージを"
"得るでしょう:"

# e980b73360734a9b97da924fd8bd8ddf
#: ../../appcontext.rst:69
msgid ""
"If you see that error while configuring your application, such as when "
"initializing an extension, you can push a context manually since you have"
" direct access to the ``app``. Use :meth:`~Flask.app_context` in a "
"``with`` block, and everything that runs in the block will have access to"
" :data:`current_app`. ::"
msgstr ""
"もし自分のアプリケーションを設定中に、例えばFlask拡張を初期化しているとき"
"などに、このエラーを見た場合は、\ ``app``\ への直接アクセスが可能なので"
"（訳注: app設定中であれば、appインスタンスに直接アクセスして設定の初期化"
"や値の定義などができる状況なはずなので）contextを手動でpushすることが"
"可能です。\ ``with``\ ブロックの中で\ "
":meth:`~Flask.app_context`\ を使用すると、ブロックの内側で実行している"
"ものは全て\ :data:`current_app`\ へアクセスできるようになります。 ::"

# 68e8e28d51134ed98203f3b40225cebb
#: ../../appcontext.rst:83
msgid ""
"If you see that error somewhere else in your code not related to "
"configuring the application, it most likely indicates that you should "
"move that code into a view function or CLI command."
msgstr ""
"もしアプリケーションの設定処理と関係のない、どこか別の場所のコードでこの"
"エラーを見た場合は、そのコードをview関数またはCLIコマンドへ移動するべき"
"だと示している可能性が最も高いです。"

# 9d80dfc00eb5412790052ea5f818ddee
#: ../../appcontext.rst:89
msgid "Storing Data"
msgstr "データの格納"

# 8ce65e815bf94a8bb070243209f4f785
#: ../../appcontext.rst:91
msgid ""
"The application context is a good place to store common data during a "
"request or CLI command. Flask provides the :data:`g object <g>` for this "
"purpose. It is a simple namespace object that has the same lifetime as an"
" application context."
msgstr ""
"application contextはリクエストまたはCLIコマンドの期間中に共通のデータを"
"格納するにはよい場所です。Flaskはその目的のために\ :data:`gオブジェクト "
"<g>`\ を提供します。それはシンプルな名前空間オブジェクトで、application "
"contextと同じ生存期間を持ちます。"

# c20b4e70beee47178b3c114cdfaea1a2
#: ../../appcontext.rst:97
msgid ""
"The ``g`` name stands for \"global\", but that is referring to the data "
"being global *within a context*. The data on ``g`` is lost after the "
"context ends, and it is not an appropriate place to store data between "
"requests. Use the :data:`session` or a database to store data across "
"requests."
msgstr ""
"名前の\ ``g``\ は「global」の略称ですが、それは\ *contextの中で*\ "
"グローバルなデータであることを指しています。\ ``g``\ にある"
"データはcontextが終了すると消失し、それは（複数の）リクエストの間で"
"のデータを格納するには適切な場所ではありません。（複数の）リクエストを"
"またいでデータを格納するには、\ :data:`session`\ またはデータベースを"
"使用してください。"

# a4451d9a87da46d29276443680f13374
#: ../../appcontext.rst:103
msgid "A common use for :data:`g` is to manage resources during a request."
msgstr ""
":data:`g`\ のよくある利用方法はリクエストの期間中リソースを管理すること"
"です。"

# d0b7f1998ff541099541084aad8a797f
#: ../../appcontext.rst:105
msgid ""
"``get_X()`` creates resource ``X`` if it does not exist, caching it as "
"``g.X``."
msgstr ""
"``get_X()``\ で、リソース\ ``X``\ が存在しない場合にはそれを作成し、\ "
"``g.X``\ としてキャッシュします。"

# 7b4c850355474ab89e6e8dbf141ac0e6
#: ../../appcontext.rst:107
msgid ""
"``teardown_X()`` closes or otherwise deallocates the resource if it "
"exists. It is registered as a :meth:`~Flask.teardown_appcontext` handler."
msgstr ""
"``teardown_X()``\ で、リソースがもし存在する場合には（訳注: ファイルや"
"ネットワーク接続などでは）それを閉じるか、もしくは（訳注: メモリなどの）"
"割り当てを解消します。その処理は\ :meth:`~Flask.teardown_appcontext`\ "
"ハンドラとして（appに）登録されます。"

# f071b56992174291aec8194e3fdbc5bd
#: ../../appcontext.rst:111
msgid "For example, you can manage a database connection using this pattern::"
msgstr ""
"例えば、データベースの接続（connection）を以下のようなパターンを使って管理"
"できます::"

# ef536e7e2d43426d83628220f11bea32
#: ../../appcontext.rst:128
msgid ""
"During a request, every call to ``get_db()`` will return the same "
"connection, and it will be closed automatically at the end of the "
"request."
msgstr ""
"リクエストの期間中、\ ``get_db()``\ への全ての呼び出しは同じconnectionを"
"返すようになり、リクエストが終わるときには、そのconnectionは自動的に"
"閉じられるようになります。"

# 2b73fef501f3419eade84cb6d344e0ce
#: ../../appcontext.rst:132
msgid ""
"You can use :class:`~werkzeug.local.LocalProxy` to make a new context "
"local from ``get_db()``::"
msgstr ""
":class:`werkzeug.local.LocalProxy`\ を使用して、\ ``get_db()``\ から"
"context local（訳注: current_appと同じように、リクエストの期間中は、"
"個々のリクエストで固有のオブジェクトのプロキシとして機能するもの、"
"「リクエストのコンテキスト」のドキュメント参照）を新しく作成すること"
"が可能です\ ::"

# 5a8f7022d94b45778f0dfa23ad7a4bf3
#: ../../appcontext.rst:138
msgid ""
"Accessing ``db`` will call ``get_db`` internally, in the same way that "
":data:`current_app` works."
msgstr ""
":data:`current_app`\ が機能するのと同じやり方で、\ ``db``\ へのアクセスは"
"内部で\ ``get_db``\ を呼び出すようになります。"

# 53ec2063b0f64f12ba3618df677c84d1
#: ../../appcontext.rst:143
msgid ""
"If you're writing an extension, :data:`g` should be reserved for user "
"code. You may store internal data on the context itself, but be sure to "
"use a sufficiently unique name. The current context is accessed with "
":data:`_app_ctx_stack.top <_app_ctx_stack>`. For more information see "
":doc:`extensiondev`."
msgstr ""
"もしFlask拡張を書いている場合は、\ :data:`g`\ はユーザのコードのために"
"予約しておく（使わないでおく）べきです。内部データをcontext自身に格納しても"
"よいですが、十分に独自性のある名前を使うことを確実におさえてください。"
"その時点のcontextは\ :data:`_app_ctx_stack.top <_app_ctx_stack>`\ を使って"
"アクセスされます。さらなる情報は\ :doc:`extensiondev`\ を確認してください。"

# fda42d7a7ce14e41a9c351a06f88d227
#: ../../appcontext.rst:151
msgid "Events and Signals"
msgstr "出来事と合図（Events and Signals）"

# eb16cb72ad8e4adbb889926f86cb9a10
#: ../../appcontext.rst:153
msgid ""
"The application will call functions registered with "
":meth:`~Flask.teardown_appcontext` when the application context is "
"popped."
msgstr ""
"アプリケーションは、application contextが取り出された（push）とき、\ "
":meth:`~Flask.teardown_appcontext`\ に登録された関数を呼び出します。"

# 2f0ad15b326a481b9c46a3cfdad86404
#: ../../appcontext.rst:157
msgid ""
"If :data:`~signals.signals_available` is true, the following signals are "
"sent: :data:`appcontext_pushed`, :data:`appcontext_tearing_down`, and "
":data:`appcontext_popped`."
msgstr ""
"もし\ :data:`~signals.signals_available`\ がtrueのときは、次のsignalが"
"送られます: :data:`appcontext_pushed`, :data:`appcontext_tearing_down`, "
"そして\ :data:`appcontext_popped` です。"

