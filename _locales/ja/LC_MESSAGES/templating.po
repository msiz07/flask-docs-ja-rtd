# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# e18b9baec7bb41c99f7416240297921e
#: ../../templating.rst:4
msgid "Templates"
msgstr ""

# d2aefb3be3a24b76be1d71f8c41c5b91
#: ../../templating.rst:6
msgid ""
"Flask leverages Jinja2 as template engine.  You are obviously free to use"
" a different template engine, but you still have to install Jinja2 to run"
" Flask itself.  This requirement is necessary to enable rich extensions. "
"An extension can depend on Jinja2 being present."
msgstr ""

# f284113dbca34ca0a054d94ed42c5386
#: ../../templating.rst:11
msgid ""
"This section only gives a very quick introduction into how Jinja2 is "
"integrated into Flask.  If you want information on the template engine's "
"syntax itself, head over to the official `Jinja2 Template Documentation "
"<http://jinja.pocoo.org/docs/templates/>`_ for more information."
msgstr ""

# dc0ca8cf18a84f889beb058c34ccb22d
#: ../../templating.rst:18
msgid "Jinja Setup"
msgstr ""

# cb1ebf79457c47e98d87b2af83f26d78
#: ../../templating.rst:20
msgid "Unless customized, Jinja2 is configured by Flask as follows:"
msgstr ""

# 5519c04ff5494b3393c463bf20a36e2e
#: ../../templating.rst:22
msgid ""
"autoescaping is enabled for all templates ending in ``.html``, ``.htm``, "
"``.xml`` as well as ``.xhtml`` when using "
":func:`~flask.templating.render_template`."
msgstr ""

# 496ac53e5c9c4570bc8c7cabd30ee782
#: ../../templating.rst:25
msgid ""
"autoescaping is enabled for all strings when using "
":func:`~flask.templating.render_template_string`."
msgstr ""

# 0090946cd1a84a6f865b03df7001a526
#: ../../templating.rst:27
msgid ""
"a template has the ability to opt in/out autoescaping with the ``{% "
"autoescape %}`` tag."
msgstr ""

# f67df55b592d433ea97d2f116c56d43c
#: ../../templating.rst:29
msgid ""
"Flask inserts a couple of global functions and helpers into the Jinja2 "
"context, additionally to the values that are present by default."
msgstr ""

# 6ec0d9c32a6746b090790936064cd199
#: ../../templating.rst:34
msgid "Standard Context"
msgstr ""

# 86f258e1f6d345f5bd18553f99e3eee8
#: ../../templating.rst:36
msgid ""
"The following global variables are available within Jinja2 templates by "
"default:"
msgstr ""

# 536647c5de3c4eaa995d3af9c096c92b
#: ../../templating.rst:42
msgid "The current configuration object (:data:`flask.config`)"
msgstr ""

# f3143720eab54bb39bcff835fdc76780
#: ../../templating.rst:46
msgid "This is now always available, even in imported templates."
msgstr ""

# 14e1d752b8c34583bea9d4f3c062d5e2
#: ../../templating.rst:52
msgid ""
"The current request object (:class:`flask.request`).  This variable is "
"unavailable if the template was rendered without an active request "
"context."
msgstr ""

# 26659f49a9244a03b9655c19113dab69
#: ../../templating.rst:59
msgid ""
"The current session object (:class:`flask.session`).  This variable is "
"unavailable if the template was rendered without an active request "
"context."
msgstr ""

# 50a2bb85c94f4bda8e3fbad9cb09d267
#: ../../templating.rst:66
msgid ""
"The request-bound object for global variables (:data:`flask.g`).  This "
"variable is unavailable if the template was rendered without an active "
"request context."
msgstr ""

# 48edd20e283749b19b9ab62c238bfe44
#: ../../templating.rst:73
msgid "The :func:`flask.url_for` function."
msgstr ""

# 51fa5ec1314e422d843017434b5153b3
#: ../../templating.rst:78
msgid "The :func:`flask.get_flashed_messages` function."
msgstr ""

# ba5403b77ab849188ab2e137e03fab03
#: ../../templating.rst:80
msgid "The Jinja Context Behavior"
msgstr ""

# 83555d8d4d3643099f79ba36eed9b119
#: ../../templating.rst:82
msgid ""
"These variables are added to the context of variables, they are not "
"global variables.  The difference is that by default these will not show "
"up in the context of imported templates.  This is partially caused by "
"performance considerations, partially to keep things explicit."
msgstr ""

# 0359a6366ab5498390be08ebea6db52a
#: ../../templating.rst:87
msgid ""
"What does this mean for you?  If you have a macro you want to import, "
"that needs to access the request object you have two possibilities:"
msgstr ""

# d8b52200763d4bb186310d779f09d62c
#: ../../templating.rst:90
msgid ""
"you explicitly pass the request to the macro as parameter, or the "
"attribute of the request object you are interested in."
msgstr ""

# 42e65db8e14e438c81916ecc332484ed
#: ../../templating.rst:92
msgid "you import the macro \"with context\"."
msgstr ""

# f02ec316b2dc4450811be3a72cd9aff1
#: ../../templating.rst:94
msgid "Importing with context looks like this:"
msgstr ""

# f4889088a18c4df0968f863b1fe91668
#: ../../templating.rst:101
msgid "Standard Filters"
msgstr ""

# 1c59d103b5cd465294707db65dc0c5d3
#: ../../templating.rst:103
msgid ""
"These filters are available in Jinja2 additionally to the filters "
"provided by Jinja2 itself:"
msgstr ""

# 21c4f409eb2c430983248af380ad77bc
#: ../../templating.rst:109
msgid ""
"This function converts the given object into JSON representation.  This "
"is for example very helpful if you try to generate JavaScript on the fly."
msgstr ""

# 1b25ad5014b3450c964b7a42a7b9a20b
#: ../../templating.rst:119
msgid ""
"It is also safe to use the output of `|tojson` in a *single-quoted* HTML "
"attribute:"
msgstr ""

# 71edfcef1fc544889fe0b4ee863afbfc
#: ../../templating.rst:128
msgid ""
"Note that in versions of Flask prior to 0.10, if using the output of "
"``|tojson`` inside ``script``, make sure to disable escaping with "
"``|safe``. In Flask 0.10 and above, this happens automatically."
msgstr ""

# 6d9d7a844ae94733812b2bd0c06dd3bf
#: ../../templating.rst:133
msgid "Controlling Autoescaping"
msgstr ""

# fdfa37455f85404f85f36e8842343896
#: ../../templating.rst:135
msgid ""
"Autoescaping is the concept of automatically escaping special characters "
"for you.  Special characters in the sense of HTML (or XML, and thus "
"XHTML) are ``&``, ``>``, ``<``, ``\"`` as well as ``'``.  Because these "
"characters carry specific meanings in documents on their own you have to "
"replace them by so called \"entities\" if you want to use them for text."
"  Not doing so would not only cause user frustration by the inability to "
"use these characters in text, but can also lead to security problems.  "
"(see :ref:`xss`)"
msgstr ""

# 028b2211c0a94302b5f7d29ca618f008
#: ../../templating.rst:144
msgid ""
"Sometimes however you will need to disable autoescaping in templates. "
"This can be the case if you want to explicitly inject HTML into pages, "
"for example if they come from a system that generates secure HTML like a "
"markdown to HTML converter."
msgstr ""

# 3795301660f345e0a6cc6d6e59478bb7
#: ../../templating.rst:149
msgid "There are three ways to accomplish that:"
msgstr ""

# 5c2e5929b9ae40a7a1915b2f4f860a43
#: ../../templating.rst:151
msgid ""
"In the Python code, wrap the HTML string in a :class:`~flask.Markup` "
"object before passing it to the template.  This is in general the "
"recommended way."
msgstr ""

# b6d91e62daa3439faaa07690d3b29a62
#: ../../templating.rst:154
msgid ""
"Inside the template, use the ``|safe`` filter to explicitly mark a string"
" as safe HTML (``{{ myvariable|safe }}``)"
msgstr ""

# be27060c9fd445e3b006d55dfa622b4f
#: ../../templating.rst:156
msgid "Temporarily disable the autoescape system altogether."
msgstr ""

# 800f76dd7ea94b73b866e10e49ae8357
#: ../../templating.rst:158
msgid ""
"To disable the autoescape system in templates, you can use the ``{% "
"autoescape %}`` block:"
msgstr ""

# 2775e7a48507418083a74f29ee411885
#: ../../templating.rst:168
msgid ""
"Whenever you do this, please be very cautious about the variables you are"
" using in this block."
msgstr ""

# b05f947e684146e8a63ba7cda5ecd466
#: ../../templating.rst:174
msgid "Registering Filters"
msgstr ""

# 5cb809859bc2421d867302ffbecdacaf
#: ../../templating.rst:176
msgid ""
"If you want to register your own filters in Jinja2 you have two ways to "
"do that.  You can either put them by hand into the "
":attr:`~flask.Flask.jinja_env` of the application or use the "
":meth:`~flask.Flask.template_filter` decorator."
msgstr ""

# 16d60db6cd624daf8cd0375335c7bee0
#: ../../templating.rst:181
msgid "The two following examples work the same and both reverse an object::"
msgstr ""

# a3a6144cbeb84c6395e66165afb770cf
#: ../../templating.rst:191
msgid ""
"In case of the decorator the argument is optional if you want to use the "
"function name as name of the filter.  Once registered, you can use the "
"filter in your templates in the same way as Jinja2's builtin filters, for"
" example if you have a Python list in context called `mylist`::"
msgstr ""

# 12f4144062de4269a57addb8f4eeef69
#: ../../templating.rst:201
msgid "Context Processors"
msgstr ""

# a9add9948eed4bbba0ec3374ae671e60
#: ../../templating.rst:203
msgid ""
"To inject new variables automatically into the context of a template, "
"context processors exist in Flask.  Context processors run before the "
"template is rendered and have the ability to inject new values into the "
"template context.  A context processor is a function that returns a "
"dictionary.  The keys and values of this dictionary are then merged with "
"the template context, for all templates in the app::"
msgstr ""

# 5dd3bf0d93654497b8cb639981adc263
#: ../../templating.rst:214
msgid ""
"The context processor above makes a variable called `user` available in "
"the template with the value of `g.user`.  This example is not very "
"interesting because `g` is available in templates anyways, but it gives "
"an idea how this works."
msgstr ""

# 21564bf46fe9434f9af42f6eeb3c043d
#: ../../templating.rst:219
msgid ""
"Variables are not limited to values; a context processor can also make "
"functions available to templates (since Python allows passing around "
"functions)::"
msgstr ""

# 64afe9f3106744d0a492bc5790faf029
#: ../../templating.rst:229
msgid ""
"The context processor above makes the `format_price` function available "
"to all templates::"
msgstr ""

# 6450bfab866947828ea83a886e189b4d
#: ../../templating.rst:234
msgid ""
"You could also build `format_price` as a template filter (see :ref"
":`registering-filters`), but this demonstrates how to pass functions in a"
" context processor."
msgstr ""

