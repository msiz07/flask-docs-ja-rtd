# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-22 21:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

# 5d3e771b460d48908ed5b59e63cde452
#: ../../flask/docs/quickstart.rst:4
msgid "Quickstart"
msgstr "クイックスタート"

# 97a747bc2c8f49ffa46194e234112671
#: ../../flask/docs/quickstart.rst:6
msgid ""
"Eager to get started?  This page gives a good introduction to Flask.  It "
"assumes you already have Flask installed.  If you do not, head over to "
"the :ref:`installation` section."
msgstr ""
"すぐ始めたいですか？このページはFlaskのイントロダクションに良いでしょう。Flaskはインストール済みと想定しています。もしまだならば、\\ "
":ref:`installation`\\ セクションを確認してください。"

# 00595259ecee47dd8bd759592d905a53
#: ../../flask/docs/quickstart.rst:12
msgid "A Minimal Application"
msgstr "最少のアプリケーション"

# e1570c67382e40759aa8873fcdcf2773
#: ../../flask/docs/quickstart.rst:14
msgid "A minimal Flask application looks something like this::"
msgstr "最少のFlaskアプリケーションは以下のようなものになります::"

# 063c3db15dc547168de47abc07bdd7ea
#: ../../flask/docs/quickstart.rst:23
msgid "So what did that code do?"
msgstr "では、そのコードは何をしているのでしょうか？"

# 87b5d69f87054beab760456d7a60d633
#: ../../flask/docs/quickstart.rst:25
msgid ""
"First we imported the :class:`~flask.Flask` class.  An instance of this "
"class will be our WSGI application."
msgstr ""
"最初に、\\ :class:`~flask.Flask`\\ クラスをimportしています。このクラスのインスタンスはWSGI（訳注: "
"Pythonで標準化されている、WebアプリとWebサーバ間のインタフェース）アプリケーションになります。"

# fe5382420a9844228a973dd014e30b86
#: ../../flask/docs/quickstart.rst:27
msgid ""
"Next we create an instance of this class. The first argument is the name "
"of the application's module or package.  If you are using a single module"
" (as in this example), you should use ``__name__`` because depending on "
"if it's started as application or imported as module the name will be "
"different (``'__main__'`` versus the actual import name). This is needed "
"so that Flask knows where to look for templates, static files, and so on."
" For more information have a look at the :class:`~flask.Flask` "
"documentation."
msgstr ""
"次に、Flaskクラスのインスタンスを作成します。最初の引数はアプリケーションのモジュール（訳注: "
"簡単に言うと拡張子pyのPythonファイル）またはパッケージ（訳注: "
"簡単に言うとモジュールをまとめて格納したディレクトリ）の名前です。アプリケーションとして開始するかモジュールとしてimportするかによって名前（訳注: ここでは\ ``__name__``\ の値と同じ意味合い）が変化する（\\"
" ``'__main__'``\\ もしくは実際のimport名）ため、もし（この例のように）１つだけのモジュールを使っているときは、\\ "
"``__name__``\\ "
"を使うべきです。これはテンプレート、静的ファイルなどを探す場所をFlaskが知るために必要になります。さらなる情報については、\\ "
":class:`~flask.Flask`\\ のドキュメントを調べてください。"

# a6f42a311f6843ccacc8e3660800438a
#: ../../flask/docs/quickstart.rst:34
msgid ""
"We then use the :meth:`~flask.Flask.route` decorator to tell Flask what "
"URL should trigger our function."
msgstr ""
"それから\\ :meth:`~flask.Flask.route`\\ "
"デコレータを使って、どのURLが関数の引き金になるべきかをFlaskに伝えます。"

# e304d6ecb52e4cfea637f7bd28223722
#: ../../flask/docs/quickstart.rst:36
msgid ""
"The function is given a name which is also used to generate URLs for that"
" particular function, and returns the message we want to display in the "
"user's browser."
msgstr ""
"関数には名前が与えられ、関数に対応するURLを生成するときにもその名前は使用されます（訳注: \\ "
":func:`~flask.url_for`\\ "
"で関数に対応するURLを作成するときに使う、エンドポイント名が与えられることを指していると思います）。そして関数は、ユーザのブラウザに表示したいメッセージを返します。"

# c157b28898f44db8aba4c31269fb5ce2
#: ../../flask/docs/quickstart.rst:40
msgid ""
"Just save it as :file:`hello.py` or something similar. Make sure to not "
"call your application :file:`flask.py` because this would conflict with "
"Flask itself."
msgstr ""
"これを\\ :file:`hello.py`\\ "
"もしくは似たような名前で保存するだけです。Flask自身と衝突しないようにするため、自分のアプリケーションは\\ :file:`flask.py`\\ "
"と名付けないように必ずしてください。"

# b18f6d432b6d42f7855c20046abbd57a
#: ../../flask/docs/quickstart.rst:44
msgid ""
"To run the application you can either use the :command:`flask` command or"
" python's ``-m`` switch with Flask.  Before you can do that you need to "
"tell your terminal the application to work with by exporting the "
"``FLASK_APP`` environment variable::"
msgstr ""
"アプリケーションを実行するには、\\ :command:`flask`\\ コマンドでもpythonの\\ ``-m``\\ "
"スイッチにFlaskを指定しても、どちらも使用できます。実行できるようにする前に、\\ ``FLASK_APP``\\ "
"環境変数をexportして、実行するアプリケーションを端末（訳注: "
"Windowsでのコマンドプロンプト、Linuxでの端末、SSHログインしているときのPuTTYやTera "
"Termなど、コマンドラインで操作している環境を指します）へ伝える必要があります::"

# 770f3dfc5e9a4af7baea45557b001f97
#: ../../flask/docs/quickstart.rst:53
msgid ""
"If you are on Windows, the environment variable syntax depends on command"
" line interpreter. On Command Prompt::"
msgstr "Windows上では、環境変数の書き方はコマンドラインインタプリタに依存します。コマンドプロンプト上では::"

# f7567119532946b69614c6de9ec2a4f3
#: ../../flask/docs/quickstart.rst:58
msgid "And on PowerShell::"
msgstr "そしてPowerShell上では::"

# 267b255a46f541f0b80490b6ca49019e
#: ../../flask/docs/quickstart.rst:62
msgid "Alternatively you can use :command:`python -m flask`::"
msgstr "違うやり方として、\\ :command:`python -m flask`\\ を使用できます::"

# ebc0751096214ee6a5131cf3d9693430
#: ../../flask/docs/quickstart.rst:68
msgid ""
"This launches a very simple builtin server, which is good enough for "
"testing but probably not what you want to use in production. For "
"deployment options see :ref:`deployment`."
msgstr ""
"これはとてもシンプルな内蔵サーバを起動し、それはテスト用には十分ですが、おそらく本番環境では使用したくはならないでしょう。デプロイ（訳注: "
"実行環境への移行のような意味合い）のオプションについては、\\ :ref:`deployment`\\ を参照してください。"

# 3d41fb22c4a145018ed6b41a66972e41
#: ../../flask/docs/quickstart.rst:72
msgid ""
"Now head over to http://127.0.0.1:5000/, and you should see your hello "
"world greeting."
msgstr "それでは\\ http://127.0.0.1:5000/\\ を見てください、あなたのhello worldを確認できるはずです。"

# 3681f706a014496fb409b13d2a0355c8
#: ../../flask/docs/quickstart.rst:77
msgid "Externally Visible Server"
msgstr "外部から見えるサーバ"

# 953b7cb564ec492c8abc9c2607f87998
#: ../../flask/docs/quickstart.rst:79
msgid ""
"If you run the server you will notice that the server is only accessible "
"from your own computer, not from any other in the network.  This is the "
"default because in debugging mode a user of the application can execute "
"arbitrary Python code on your computer."
msgstr "もしサーバを実行した場合、サーバは自分のコンピュータからだけアクセス可能で、他にはネットワークのどこからもアクセスできないことに気付くでしょう。デバッギングモードでは、アプリケーションのユーザがコンピュータ上で任意のPythonコードを実行可能になるために、これが標準設定になっています。"

# 509abe6da4c742ec80959a0581f5147b
#: ../../flask/docs/quickstart.rst:84
msgid ""
"If you have the debugger disabled or trust the users on your network, you"
" can make the server publicly available simply by adding "
"``--host=0.0.0.0`` to the command line::"
msgstr ""
"デバッガを無効にしているか、ネットワーク上のユーザを信頼する場合、単純にコマンドラインへ\\ ``--host=0.0.0.0``\\ "
"を追加すれば、サーバへのアクセスを公開できます::"

# 7aff041abba44dc48da06c27085e56ba
#: ../../flask/docs/quickstart.rst:90
msgid "This tells your operating system to listen on all public IPs."
msgstr "こうすると、全ての公開されているIP上でアクセスを受け付けるよう、OSへ伝えます。"

# 66b05a10901e498cb407059b1ca698f4
#: ../../flask/docs/quickstart.rst:94
msgid "What to do if the Server does not Start"
msgstr "サーバがスタートしない場合にするべきこと"

# 45116159c70b42bab20485d6b5eded37
#: ../../flask/docs/quickstart.rst:96
msgid ""
"In case the :command:`python -m flask` fails or :command:`flask` does not"
" exist, there are multiple reasons this might be the case. First of all "
"you need to look at the error message."
msgstr ""
"もし\\ :command:`python -m flask`\\ が失敗するときや\\ :command:`flask`\\ "
"コマンドが存在しないときは、その原因であるかもしれない理由がいくつかあります。まず最初に、エラーメッセージを調べる必要があります。"

# 2ab0fe20a6fc42d3bccdcdd94a2da3da
#: ../../flask/docs/quickstart.rst:101
msgid "Old Version of Flask"
msgstr "古いバージョンのFlask"

# ef8f8c640c3c4d0093a009182d87ea03
#: ../../flask/docs/quickstart.rst:103
msgid ""
"Versions of Flask older than 0.11 use to have different ways to start the"
" application.  In short, the :command:`flask` command did not exist, and "
"neither did :command:`python -m flask`.  In that case you have two "
"options: either upgrade to newer Flask versions or have a look at the "
":ref:`server` docs to see the alternative method for running a server."
msgstr ""
"バージョン0.11より前のFlaskはアプリケーションを開始するときに別のやり方を使用していました。手短に言えば、\\ "
":command:`flask`\\ コマンドは存在せず、\\ :command:`python -m flask`\\ "
"も使いませんでした。この場合には、2つの選択肢があります: Flaskを新しいバージョンへアップグレードするか、\\ "
":ref:`server`\\ のドキュメントを調べて、サーバを実行する代わりのやり方を見つけてください。"

# cdf5f01e94f04119945160db81168d0a
#: ../../flask/docs/quickstart.rst:110
msgid "Invalid Import Name"
msgstr "間違った名前のimport"

# 8aded6ce7a6a45f1921961eb536bbbdc
#: ../../flask/docs/quickstart.rst:112
msgid ""
"The ``FLASK_APP`` environment variable is the name of the module to "
"import at :command:`flask run`. In case that module is incorrectly named "
"you will get an import error upon start (or if debug is enabled when you "
"navigate to the application). It will tell you what it tried to import "
"and why it failed."
msgstr ""
"``FLASK_APP``\\ 環境変数は\\ :command:`flask run`\\ "
"でimportするモジュールの名前になります。モジュール名が正確でない場合には、スタートしようとしたとき（もしくは、もしデバッグを有効にしていた場合はアプリケーションへアクセスしようとしたとき）にimport"
" errorが発生するでしょう。import errorは、何をimportしようとして、なぜ失敗したかを示しているでしょう。"

# 9ada36b68b9e4cb1add9e9d939d0b0a9
#: ../../flask/docs/quickstart.rst:117
msgid ""
"The most common reason is a typo or because you did not actually create "
"an ``app`` object."
msgstr "最もありがちな（サーバ起動失敗の）理由は、typoか、\\ ``app``\\ オブジェクトを実際に作成してはいないためです。"

# 87826b140bb343789270fa7690127fb9
#: ../../flask/docs/quickstart.rst:123
msgid "Debug Mode"
msgstr "デバッグモード"

# 01a75f4cd8854154bb35067274ce80ce
#: ../../flask/docs/quickstart.rst:125
msgid "(Want to just log errors and stack traces? See :ref:`application-errors`)"
msgstr ""
"（ただ、errorやstack traceをログに記録したいだけですか？その場合は\\ :ref:`application-errors`\\ "
"を確認してください）"

# 82fc498873cb4b568f098d9e4dd4ba09
#: ../../flask/docs/quickstart.rst:127
msgid ""
"The :command:`flask` script is nice to start a local development server, "
"but you would have to restart it manually after each change to your code."
" That is not very nice and Flask can do better.  If you enable debug "
"support the server will reload itself on code changes, and it will also "
"provide you with a helpful debugger if things go wrong."
msgstr ""
"\\ :command:`flask`\\ "
"スクリプトはローカルの開発サーバをスタートするには便利ですが、コードを変更するたびに手動で再起動が必要になるでしょう。それはあまり便利ではなく、そしてFlaskはもっと便利に使えます。もしデバッグサポートを有効にすれば、コードを変更したときにサーバは自分自身で再読み込み（reload）するようになり、さらに、もし問題が起きた場合には役に立つデバッガも提供するようにもなります。"

# f9428ba54a004a179667264525d12114
#: ../../flask/docs/quickstart.rst:133
msgid ""
"To enable all development features (including debug mode) you can export "
"the ``FLASK_ENV`` environment variable and set it to ``development`` "
"before running the server::"
msgstr ""
"すべての（デバッグモードも含めた）開発機能を有効にするために、サーバの実行前に環境変数\\ ``FLASK_ENV``\\ を\\ "
"``development``\\ に設定してエクスポートできます::"

# f2dcb5cc8fec4d86a5ca87408cd60f2d
#: ../../flask/docs/quickstart.rst:140
msgid "(On Windows you need to use ``set`` instead of ``export``.)"
msgstr "（Windowsでは、\\ ``export``\\ の代わりに\\ ``set``\\ を使う必要があります）"

# f7c99a21dd2c4988932eb134a0cfa742
#: ../../flask/docs/quickstart.rst:142
msgid "This does the following things:"
msgstr "これは以下のことを行います:"

# 8543ab5fe10244038bc0f06d395cb22f
#: ../../flask/docs/quickstart.rst:144
msgid "it activates the debugger"
msgstr "デバッガを有効にします"

# bc18b2158b3f4d51ace2a0953972ecf5
#: ../../flask/docs/quickstart.rst:145
msgid "it activates the automatic reloader"
msgstr "自動再読み込みを有効にします"

# c4f88dedb4dc4718b367cb7f7bc5ed38
#: ../../flask/docs/quickstart.rst:146
msgid "it enables the debug mode on the Flask application."
msgstr "Flaskアプリケーションのデバッグモードを有効にします。"

# bf604fc4973040178f9e1b2bea7d1d7d
#: ../../flask/docs/quickstart.rst:148
msgid ""
"You can also control debug mode separately from the environment by "
"exporting ``FLASK_DEBUG=1``."
msgstr ""
"環境（訳注: FLASK_ENVの設定とほぼ同じ意味合い）とは別に、\\ ``FLASK_DEBUG=1``\\ "
"をexportしてもデバッグモードを制御できます。"

# acfb8dc0c0e54f30a8ce9d393e95f205
#: ../../flask/docs/quickstart.rst:151
msgid "There are more parameters that are explained in the :ref:`server` docs."
msgstr "\\ :ref:`server`\\ のドキュメントでより多くのパラメータを説明しています。"

# ab11579bf7a6480f924a7dcc93c5636e
#: ../../flask/docs/quickstart.rst:153
msgid "Attention"
msgstr "注意"

# 207f00e9848045a1af24329d9ce5b676
#: ../../flask/docs/quickstart.rst:155
msgid ""
"Even though the interactive debugger does not work in forking "
"environments (which makes it nearly impossible to use on production "
"servers), it still allows the execution of arbitrary code. This makes it "
"a major security risk and therefore it **must never be used on production"
" machines**."
msgstr ""
"たとえforkした環境（訳注: :ref:`working-with-debuggers`\\ "
"を参照、外部デバッガを使用したい場合にFlaskではforkした環境というものを設定可能）ではインタラクティブなデバッガが動かない（それによって本番環境のサーバでは内蔵デバッガが殆ど使用不可能になります）としても、それでも（デバッグモードや外部デバッガの使用は）任意のコードを実行できるようにします。これは深刻なセキュリティ上のリスクであり、従って\\"
" **本番環境のマシンでは決して使用してはいけません**\\ 。"

# 3e61206cfbc642e3926319f45c0771a6
#: ../../flask/docs/quickstart.rst:160
msgid "Screenshot of the debugger in action:"
msgstr "実行中のデバッガのスクリーンショット:"

# 929435c3dc3f4b48acf6c8b74b8983bf
#: ../../flask/docs/quickstart.rst:167
msgid ""
"More information on using the debugger can be found in the `Werkzeug "
"documentation`_."
msgstr "デバッガ使用に関するさらなる情報は\\ `Werkzeugドキュメント`_\\ で見つけることができます。"

# 77b2a594767b4fd3a78afe0cd5c82cfa
#: ../../flask/docs/quickstart.rst:172
msgid "Have another debugger in mind? See :ref:`working-with-debuggers`."
msgstr "他のデバッガを考えていますか？\\ :ref:`working-with-debuggers`\\ を確認してください。"

# 3302a6e53ed84fc68cb87592716f8590
#: ../../flask/docs/quickstart.rst:176
msgid "Routing"
msgstr "経路設定（Routing）"

# 0e85b8ac320a4871bfbc148fb13df26e
#: ../../flask/docs/quickstart.rst:178
msgid ""
"Modern web applications use meaningful URLs to help users. Users are more"
" likely to like a page and come back if the page uses a meaningful URL "
"they can remember and use to directly visit a page."
msgstr "最近のwebアプリケーションは、ユーザに役立つような意味のあるURLを使用します。もし、記憶できてページへ直接訪れるために直接指定できる、意味のあるURLを使用していれば、ユーザはそのページをより好きになり、再訪問するようになるでしょう。"

# aa74313583dc4755ae650e65fa6d2272
#: ../../flask/docs/quickstart.rst:182
msgid ""
"Use the :meth:`~flask.Flask.route` decorator to bind a function to a URL."
" ::"
msgstr "関数とURLを結び付け（bind）したいときは、\\ :meth:`~flask.Flask.route`\\ デコレータを使用します。 ::"

# 70bdee9a7e91483e99eb7f7125b7f226
#: ../../flask/docs/quickstart.rst:192
msgid ""
"You can do more! You can make parts of the URL dynamic and attach "
"multiple rules to a function."
msgstr "もっとできることがあります！URLの一部を動的に変化させたり、複数のルールを関数に付与することも可能です。"

# 657fca8ce6ed4c17bda18dad7314d7e2
#: ../../flask/docs/quickstart.rst:196
msgid "Variable Rules"
msgstr "変数のルール"

# 08edbe6cd2b34256ba46fe9e39516ec7
#: ../../flask/docs/quickstart.rst:198
msgid ""
"You can add variable sections to a URL by marking sections with "
"``<variable_name>``. Your function then receives the ``<variable_name>`` "
"as a keyword argument. Optionally, you can use a converter to specify the"
" type of the argument like ``<converter:variable_name>``. ::"
msgstr ""
"``<variable_name>``\\ "
"のように一部へ目印をつけることで、URLに変数のセクションを追加することができます。こうすると、関数は\\ "
"``<variable_name>``\\ をキーワード引数のように受け取るようになります。必須ではないですが、引数のタイプを指定するために、\\"
" ``<converter:variable_name>``\\ のようにすればコンバータを使用できます。"

# 3e124969388c42c996b924d5113c34be
#: ../../flask/docs/quickstart.rst:220
msgid "Converter types:"
msgstr "コンバータの種類:"

# 67af66c1a8d344448caff79889df65ad
#: ../../flask/docs/quickstart.rst:223
msgid "``string``"
msgstr ""

# 2907680b402d475cb792c31d5040a15e
#: ../../flask/docs/quickstart.rst:223
msgid "(default) accepts any text without a slash"
msgstr "（標準設定）スラッシュ（/）以外の全てのテキストを受け付けます"

# 94b000d2b11c44e999a87f2d325407e4
#: ../../flask/docs/quickstart.rst:224
msgid "``int``"
msgstr ""

# bfef29b7b4644a1e814ce2ea8994d404
#: ../../flask/docs/quickstart.rst:224
msgid "accepts positive integers"
msgstr "正の整数を受け付けます"

# f44718d4b2a0461fb9a082922c34a756
#: ../../flask/docs/quickstart.rst:225
msgid "``float``"
msgstr ""

# 79bccf11c9d7425486c43d9e6aa990e0
#: ../../flask/docs/quickstart.rst:225
msgid "accepts positive floating point values"
msgstr "正の浮動小数点の値を受け付けます"

# 210aa631bd4b46c688ff01d82febe7c8
#: ../../flask/docs/quickstart.rst:226
msgid "``path``"
msgstr ""

# 97a0b5319d4c4a2683d7870695591be9
#: ../../flask/docs/quickstart.rst:226
msgid "like ``string`` but also accepts slashes"
msgstr "\\ ``string``\\ に似ていますが、スラッシュ（/）を受け付けます"

# 80408f462118415f84b910f4a7f8cf8a
#: ../../flask/docs/quickstart.rst:227
msgid "``uuid``"
msgstr ""

# f5299aa6cb9447c3a9a3ec27b24a3040
#: ../../flask/docs/quickstart.rst:227
msgid "accepts UUID strings"
msgstr "UUID文字列を受け付けます"

# 526958d6c84046bdbc36c4dcea98334b
#: ../../flask/docs/quickstart.rst:231
msgid "Unique URLs / Redirection Behavior"
msgstr "ユニークなURLと転送（Redirection）の振舞"

# 2c29d858e6d240e4bfc0e3c0f7ba5cb8
#: ../../flask/docs/quickstart.rst:233
msgid "The following two rules differ in their use of a trailing slash. ::"
msgstr ""
"最後のスラッシュ（/）の使い方が、以下の2つのルール（訳注: routeデコレータ"
"を使ったURLと関数との対応付けのこと、routeデコレータは内部的にWerkzeugの"
"Ruleクラスのインスタンスを作成しています）では異なっています。::"

# dd62f17ef3b4414a9dd88d32e3d40c9d
#: ../../flask/docs/quickstart.rst:243
msgid ""
"The canonical URL for the ``projects`` endpoint has a trailing slash. "
"It's similar to a folder in a file system. If you access the URL without "
"a trailing slash, Flask redirects you to the canonical URL with the "
"trailing slash."
msgstr ""
"``projects``\\ エンドポイント（訳注: エンドポイントはview用の関数などを特定するもので、たいていは関数名と同じですが異なる値がエンドポイントになる場合もあり、Flaskではrouteデコレータ使うと内部的にWerkzeugのRuleインスタンスを作成してURLのパターンとエンドポイントを対応付けます）の正規化（訳注: "
"記法の揺らぎを統一するような意味合い）されたURLでは、最後にスラッシュがあります。これはファイルシステムでのフォルダに似ています。もし最後のスラッシュなしでURLへアクセスした場合、Flaskは最後にスラッシュのある正規化されたURLへ転送（redirect）します。"

# d376ab8a788845839ab977183b9dac3a
#: ../../flask/docs/quickstart.rst:248
msgid ""
"The canonical URL for the ``about`` endpoint does not have a trailing "
"slash. It's similar to the pathname of a file. Accessing the URL with a "
"trailing slash produces a 404 \"Not Found\" error. This helps keep URLs "
"unique for these resources, which helps search engines avoid indexing the"
" same page twice."
msgstr ""
"``about``\\ "
"エンドポイントの正規化されたURLでは、最後にスラッシュがありません。これはファイルシステムでのファイルのパス名に似ています。もし最後にスラッシュを付けたURLへアクセスしたときは404の「Not"
" "
"Found」エラーが発生します。こうすると、これらのリソースに対するURLを唯ひとつに保てるため、検索エンジンが同じページを重複して登録することを防ぐ手助けになります。"

# 9371ea3d1eee41fcb5f5a0623de28d87
#: ../../flask/docs/quickstart.rst:258
msgid "URL Building"
msgstr "URLの構築"

# 02bf619b030645cbaf1289edcb2dae16
#: ../../flask/docs/quickstart.rst:260
msgid ""
"To build a URL to a specific function, use the :func:`~flask.url_for` "
"function. It accepts the name of the function as its first argument and "
"any number of keyword arguments, each corresponding to a variable part of"
" the URL rule. Unknown variable parts are appended to the URL as query "
"parameters."
msgstr ""
"ある特定の関数に対応するURLを構築するには、\\ :func:`~flask.url_for`\\ "
"関数を使用します。それは関数名を最初の引数に受け付けて、さらに、URLルールの変数部分に対応する、好きな数だけのキーワード引数を受け付けます。不明な変数パートはqueryパラメータとしてURLの後ろ（訳注:"
" ``?key=value``\\ の部分）に付けられます。"

# ac32a3cf62ea4e5c9ec25f8008c7ac56
#: ../../flask/docs/quickstart.rst:265
msgid ""
"Why would you want to build URLs using the URL reversing function "
":func:`~flask.url_for` instead of hard-coding them into your templates?"
msgstr ""
"URLをテンプレートへハードコーディングする代わりに、（関数名から）URLへと逆変換する\\ :func:`~flask.url_for`\\ "
"関数を使ってURLを構築する方が、なぜ好ましいのでしょうか？（訳注: "
"テンプレートの中でリンクなどがあったとき、そこへURLを直接記述するのではなく、リンク先で使いたい関数名からURLへ変換する処理を記述した方がなぜ好ましいか、という意味合い）"

# 09e7a3f768e048cea2955bebbe7d7bc8
#: ../../flask/docs/quickstart.rst:268
msgid "Reversing is often more descriptive than hard-coding the URLs."
msgstr "URLをハードコーディングするよりもURLへ逆変換する方が、分かり易い（descriptive）ことが多いためです。"

# 453717212689453881fa3d42fba9a152
#: ../../flask/docs/quickstart.rst:269
msgid ""
"You can change your URLs in one go instead of needing to remember to "
"manually change hard-coded URLs."
msgstr "（URLを変更するとき）ハードコーディングされた（複数の場所に埋め込まれているかもしれない）URLを忘れずに手作業で変更する必要がある代わりに、（関数とURLを対応付けている箇所で）一気に変更することができます。"

# b44ae5f4fc404bfcb7456c79960dff79
#: ../../flask/docs/quickstart.rst:271
msgid ""
"URL building handles escaping of special characters and Unicode data "
"transparently."
msgstr "URLを構築する処理では、特殊文字とユニコードのデータのエスケープ処理を透過的に扱います。"

# 1ae4c4dde68f441496688f758f02719f
#: ../../flask/docs/quickstart.rst:273
msgid ""
"The generated paths are always absolute, avoiding unexpected behavior of "
"relative paths in browsers."
msgstr "生成されたパスは常に絶対パスであり、相対パスによるブラウザ上での予想外の振舞を回避します。"

# e3db3c66a849494bbfc42826105e782f
#: ../../flask/docs/quickstart.rst:275
msgid ""
"If your application is placed outside the URL root, for example, in "
"``/myapplication`` instead of ``/``, :func:`~flask.url_for` properly "
"handles that for you."
msgstr ""
"もしアプリケーションがURLのroot以外のパス、例えば、\\ ``/``\\ の代わりに\\ ``/myapplication``\\ "
"へ置かれたときでも、\\ :func:`~flask.url_for`\\ は適切に処理します。"

# 8dc3ef7a952742ff9cb3c62cc9b14930
#: ../../flask/docs/quickstart.rst:279
msgid ""
"For example, here we use the :meth:`~flask.Flask.test_request_context` "
"method to try out :func:`~flask.url_for`. "
":meth:`~flask.Flask.test_request_context` tells Flask to behave as though"
" it's handling a request even while we use a Python shell. See :ref"
":`context-locals`."
msgstr ""
"以下の例では\\ :func:`~flask.url_for`\\ を試すために\\ "
":meth:`~flask.Flask.test_request_context`\\ メソッドを使っています。\\ "
":meth:`~flask.Flask.test_request_context`\\ "
"はFlaskに、Pythonシェルを使っている場合であってもリクエスト（訳注: "
"HTTPなどの通信リクエスト）を処理しているかのように振る舞うよう伝えます。\\ :ref:`context-locals`\\ "
"を参照ください。"

# bb2328c9ca8c456c84321d2414350994
#: ../../flask/docs/quickstart.rst:318
msgid "HTTP Methods"
msgstr "HTTPメソッド"

# d153ba8ef6934e5b958880b5e8c4c723
#: ../../flask/docs/quickstart.rst:320
msgid ""
"Web applications use different HTTP methods when accessing URLs. You "
"should familiarize yourself with the HTTP methods as you work with Flask."
" By default, a route only answers to ``GET`` requests. You can use the "
"``methods`` argument of the :meth:`~flask.Flask.route` decorator to "
"handle different HTTP methods. ::"
msgstr ""
"webアプリはURLへアクセスするときに異なるHTTPメソッドを使用します。Flaskで作業するときは、HTTPメソッドに親しんでおいた方が良いでしょう。標準設定では、経路（route）は\\"
" ``GET``\\ メソッドにだけ応答します。異なるHTTPメソッドを処理するために、\\ "
":meth:`~flask.Flask.route`\\ デコレータの\\ ``method``\\ 引数を使用できます。 ::"

# d63448edcde34047ab82deb7257d33b7
#: ../../flask/docs/quickstart.rst:335
msgid ""
"If ``GET`` is present, Flask automatically adds support for the ``HEAD`` "
"method and handles ``HEAD`` requests according to the `HTTP RFC`_. "
"Likewise, ``OPTIONS`` is automatically implemented for you."
msgstr ""
"もし\\ ``GET``\\ が（method引数の中に）存在する場合、Flaskは自動的に\\ ``HEAD``\\ "
"メソッドのサポートを追加して、\\ `HTTP RFC`_\\ に従って \\``HEAD``\\ "
"リクエストを処理します。同様に、あなたにとって良いように、\\ ``OPTIONS``\\ も自動的に実装されます。"

# 6c5aea7e032948ff9e5fa4bc4af698f7
#: ../../flask/docs/quickstart.rst:342
msgid "Static Files"
msgstr "静的ファイル"

# 861527d7dc3547a78441f85100f1f3c5
#: ../../flask/docs/quickstart.rst:344
msgid ""
"Dynamic web applications also need static files.  That's usually where "
"the CSS and JavaScript files are coming from.  Ideally your web server is"
" configured to serve them for you, but during development Flask can do "
"that as well.  Just create a folder called :file:`static` in your package"
" or next to your module and it will be available at ``/static`` on the "
"application."
msgstr ""
"動的なwebアプリケーションでも静的ファイルを必要とします。普通は、静的ファイルはCSSとJavaScriptがもたらされるところです。webサーバがそれらを扱うように構成されていると理想的ですが、開発中はFlaskで同様な対応が可能です。パッケージの中またはモジュールの隣に\\"
" :file:`static`\\ というフォルダを作成するだけで、アプリケーションから\\ ``/static``\\ "
"で利用できるようになります。"

# 1f8e37650de54f4f80cee9e75f40425b
#: ../../flask/docs/quickstart.rst:350
msgid ""
"To generate URLs for static files, use the special ``'static'`` endpoint "
"name::"
msgstr "静的ファイルに対応するURLを生成するには、特別な\\ ``'static'``\\ というエンドポイント名を使用します::"

# 046ddc0e9c454aa7a4922138c0bb2049
#: ../../flask/docs/quickstart.rst:354
msgid "The file has to be stored on the filesystem as :file:`static/style.css`."
msgstr "この例のファイルは、ファイルシステム上の\\ :file:`static/style.css`\\ に保管されている必要があります。"

# 7fa1dff61f094bc5b9e67ea3cfe1cad9
#: ../../flask/docs/quickstart.rst:357
msgid "Rendering Templates"
msgstr "テンプレートの変換（Rendering）"

# c411aeba47bc4143893d5b498c8d7f26
#: ../../flask/docs/quickstart.rst:359
msgid ""
"Generating HTML from within Python is not fun, and actually pretty "
"cumbersome because you have to do the HTML escaping on your own to keep "
"the application secure.  Because of that Flask configures the `Jinja2 "
"<http://jinja.pocoo.org/>`_ template engine for you automatically."
msgstr ""
"Pythonの中でHTMLを生成するのは楽しい作業ではなく、アプリケーションをセキュアに保つためにHTMLエスケープ処理を自分で行う必要があるために、実際にとても煩わしいものです。そのような理由から、Flaskは\\"
" `Jinja2 <http://jinja.pocoo.org/>`_\\ テンプレートエンジンを自動的に組み込んでいます。"

# 50d34f17a8c34cbdb08df7e3a55250b4
#: ../../flask/docs/quickstart.rst:364
msgid ""
"To render a template you can use the :func:`~flask.render_template` "
"method.  All you have to do is provide the name of the template and the "
"variables you want to pass to the template engine as keyword arguments. "
"Here's a simple example of how to render a template::"
msgstr ""
"テンプレートを変換するには\\ :func:`~flask.render_template`\\ "
"メソッドを使用できます。あなたがしなければならないことは、テンプレート名と、キーワード引数としてテンプレートエンジンに渡したい変数とを提供するだけです。テンプレートをどのように変換するかの単純な例は以下のとおりです::"

# 7316df5bcfd94924bcedf3803133ade6
#: ../../flask/docs/quickstart.rst:376
msgid ""
"Flask will look for templates in the :file:`templates` folder.  So if "
"your application is a module, this folder is next to that module, if it's"
" a package it's actually inside your package:"
msgstr ""
"Flaskはテンプレートを\\ :file:`templates`\\ "
"フォルダの中から探します。もしアプリケーションがモジュールなら、そのフォルダはモジュールの隣にあり、もしパッケージなら、そのフォルダは実際にはパッケージの中にあります:"

# bc57deee9a4f4179bfe57d7bf9419815
#: ../../flask/docs/quickstart.rst:380
msgid "**Case 1**: a module::"
msgstr "**ケース 1**: モジュール::"

# 20cce9db4bfb44e68ca697aef783168a
#: ../../flask/docs/quickstart.rst:386
msgid "**Case 2**: a package::"
msgstr "**ケース 2**: パッケージ::"

# 6da51e4b81ea47a3b1f481dc87e32150
#: ../../flask/docs/quickstart.rst:393
msgid ""
"For templates you can use the full power of Jinja2 templates.  Head over "
"to the official `Jinja2 Template Documentation "
"<http://jinja.pocoo.org/docs/templates/>`_ for more information."
msgstr ""
"テンプレートではJinja2テンプレートの力を全て使うことができます。より詳細な情報は公式の\\ `Jinja2テンプレートドキュメント "
"<http://jinja.pocoo.org/docs/templates/>`_\\ を確認してください。"

# 7b05342370b34cfaae4e4f5ad894a431
#: ../../flask/docs/quickstart.rst:397
msgid "Here is an example template:"
msgstr "これはテンプレートの例です:"

# a901005c7f51415199732d64ca34776e
#: ../../flask/docs/quickstart.rst:409
msgid ""
"Inside templates you also have access to the :class:`~flask.request`, "
":class:`~flask.session` and :class:`~flask.g` [#]_ objects as well as the"
" :func:`~flask.get_flashed_messages` function."
msgstr ""
"テンプレートの中では、\\ :func:`~flask.get_flashed_messages`\\ 関数と同様に、\\ "
":class:`~flask.request`\\ , :class:`~flask.session`, :class:`~flask.g` "
"[#]_\\ オブジェクトにもアクセスできます。"

# addddccdc296443d88da6f33e885ca3b
#: ../../flask/docs/quickstart.rst:413
msgid ""
"Templates are especially useful if inheritance is used.  If you want to "
"know how that works, head over to the :ref:`template-inheritance` pattern"
" documentation.  Basically template inheritance makes it possible to keep"
" certain elements on each page (like header, navigation and footer)."
msgstr ""
"継承を使うとテンプレートは非常に便利です。テンプレートがどのように働くか知りたいときは\\ :ref:`template-"
"inheritance`\\ "
"のパターンのドキュメントを確認してください。基本的にテンプレートの継承は（ヘッダ、ナビゲーション、フッタのように）ある種の要素を各ページで保持できるようにします。"

# f02d8ac777084080ae360f01507b5a31
#: ../../flask/docs/quickstart.rst:418
msgid ""
"Automatic escaping is enabled, so if ``name`` contains HTML it will be "
"escaped automatically.  If you can trust a variable and you know that it "
"will be safe HTML (for example because it came from a module that "
"converts wiki markup to HTML) you can mark it as safe by using the "
":class:`~jinja2.Markup` class or by using the ``|safe`` filter in the "
"template.  Head over to the Jinja 2 documentation for more examples."
msgstr ""
"自動エスケープが有効なので、もし\\ ``name``\\ "
"がHTMLを含んでいた場合は、自動的にエスケープされます。もし変数を信頼できて、それが安全なHTMLであると分かっている（例えばwikiのマークアップをHTMLへ変換するモジュールから来ているなど）場合は、\\"
" :class:`~jinja2.Markup`\\ クラスを使うか、\\ ``|safe``\\ フィルタ（訳注: "
"ここでのフィルタはjinja2テンプレートエンジンの機能のひとつ）をテンプレートの中で使って、安全だと印を付けることができます。さらなる例はJinja2ドキュメントを確認してください。"

# a2f2b69650e4428d9a47f88f19150375
#: ../../flask/docs/quickstart.rst:425
msgid ""
"Here is a basic introduction to how the :class:`~markupsafe.Markup` class"
" works::"
msgstr ""
":class:`~markupsafe.Markup`\ がどう働くかの基礎的なイントロダクションは以下"
"のとおりです::"

# 6ae3854c4d104c078ec6cb013116c29c
#: ../../flask/docs/quickstart.rst:437
msgid ""
"Autoescaping is no longer enabled for all templates.  The following "
"extensions for templates trigger autoescaping: ``.html``, ``.htm``, "
"``.xml``, ``.xhtml``.  Templates loaded from a string will have "
"autoescaping disabled."
msgstr ""
"自動エスケープは全てのテンプレートで有効というわけではなくなっています。テンプレートが以下の拡張子であるときは、自動エスケープをトリガーします:\\"
" ``.html``, ``.htm``, ``.xml``, ``.xhtml``\\ "
"。文字列から読み込まれたテンプレートでは、自動エスケープは無効になります。"

# fa932796c4c14cbebc704b43ab91cc99
#: ../../flask/docs/quickstart.rst:442
msgid ""
"Unsure what that :class:`~flask.g` object is? It's something in which you"
" can store information for your own needs, check the documentation of "
"that object (:class:`~flask.g`) and the :ref:`sqlite3` for more "
"information."
msgstr ""
":class:`~flask.g`\\ "
"オブジェクトが何なのか不確かですか？それは、独自のニーズのための情報を格納できるものであり、より詳細な情報はそのオブジェクト（\\ "
":class:`~flask.g`\\ ）と\\ :ref:`sqlite3`\\ のドキュメントをチェックしてください。"

# 6a9fedfc38dd4c21832ce9c2cd09fc1d
#: ../../flask/docs/quickstart.rst:449
msgid "Accessing Request Data"
msgstr "リクエストデータへのアクセス"

# 36e166891d454b14b2cc156e3a08400a
#: ../../flask/docs/quickstart.rst:451
msgid ""
"For web applications it's crucial to react to the data a client sends to "
"the server.  In Flask this information is provided by the global "
":class:`~flask.request` object.  If you have some experience with Python "
"you might be wondering how that object can be global and how Flask "
"manages to still be threadsafe.  The answer is context locals:"
msgstr ""
"webアプリでは、クライアントがサーバへ送信したデータへ反応することが非常に重要です。Flaskでは、その情報（クライアントがサーバへ送信したデータ）はグローバルな\\"
" :class:`~flask.request`\\ "
"オブジェクト（訳注: モジュールのトップレベルで定義されていることとほぼ同じ意味合いで、Pythonで変数などのスコープや名前解決でLEGBルール（Local, Enclosing, Global, Built-in）と呼ばれるもののGlobalにあたるもの。例えば「import flask.request」をしておけば、そのソースコード内でどこからでも、その時点での受信リクエスト情報を扱っているrequestオブジェクトにアクセスできる）で提供されます。もしPython経験が多少あるならば、そのオブジェクトがグローバルでありながらスレッドセーフでもあるように、Flaskがどうやって管理しているのか、不思議に思うかもしれません。その答えはコンテキストの局所的オブジェクト（context"
" locals）です:"

# fd8badb94239489e969133535e116e56
#: ../../flask/docs/quickstart.rst:461
msgid "Context Locals"
msgstr "コンテキストの局所的オブジェクト（Context Locals）"

# 03e43f149ad149909e9006c79de4555f
#: ../../flask/docs/quickstart.rst:463
msgid "Insider Information"
msgstr "内部情報"

# 5156488944eb40a0bf0efd0e0a159981
#: ../../flask/docs/quickstart.rst:465
msgid ""
"If you want to understand how that works and how you can implement tests "
"with context locals, read this section, otherwise just skip it."
msgstr ""
"もしcontext localsがどのように作用し、context "
"localsを使ってどうやってテストできるかを理解したい場合は、このセクションを読み、そうでない場合は飛ばしてください。"

# 0ef8472e1184425dbc97e19b78e7b137
#: ../../flask/docs/quickstart.rst:468
msgid ""
"Certain objects in Flask are global objects, but not of the usual kind. "
"These objects are actually proxies to objects that are local to a "
"specific context.  What a mouthful.  But that is actually quite easy to "
"understand."
msgstr "いくつかのFlaskのオブジェクトはグローバルなオブジェクト（訳注: モジュールのトップレベルとほぼ同じ意味合いで、Pythonで変数などのスコープや名前解決でLEGBルール（Local, Enclosing, Global, Built-in）と呼ばれるもののGlobalにあたるもの。関数の引数やローカル変数、withブロックのasターゲットのように、特定の範囲・ブロックからだけアクセスできるオブジェクトと区別しています）ですが、普通の種類のものではありません。それらのオブジェクトは実際には、ある特定のコンテキストに対して局所的なオブジェクトへのプロキシになります。長ったらしい説明ですが、実際には、理解するのは非常に簡単です。"

# 51a9d817179849368b705fa237171e01
#: ../../flask/docs/quickstart.rst:472
msgid ""
"Imagine the context being the handling thread.  A request comes in and "
"the web server decides to spawn a new thread (or something else, the "
"underlying object is capable of dealing with concurrency systems other "
"than threads).  When Flask starts its internal request handling it "
"figures out that the current thread is the active context and binds the "
"current application and the WSGI environments to that context (thread). "
"It does that in an intelligent way so that one application can invoke "
"another application without breaking."
msgstr "コンテキストは処理中のスレッドになると想像してください。リクエストがやって来て、webサーバが新規スレッド（もしくは別のなにか、スレッド以外で並列処理を扱える土台となるオブジェクト）を作成する決定をします。Flaskが内部のリクエスト処理を開始するとき、Flaskはそのときのスレッドが活動中（active）のコンテキストであることを理解し、そのときのFlaskアプリケーションおよびWSGI環境とそのコンテキスト（スレッド）との結び付け（bind）をします。Flaskは、あるアプリケーションを起動しながら別のアプリケーションは壊さないような（訳注: 作成・起動済みのflask.Flaskインスタンスを壊さずに、別のflask.Flaskインスタンスを作成・起動する、という意味合い）、賢いやり方でそれを実施します。"

# ea16a60cd0e84234bbfe9e04d7e06884
#: ../../flask/docs/quickstart.rst:481
msgid ""
"So what does this mean to you?  Basically you can completely ignore that "
"this is the case unless you are doing something like unit testing.  You "
"will notice that code which depends on a request object will suddenly "
"break because there is no request object.  The solution is creating a "
"request object yourself and binding it to the context.  The easiest "
"solution for unit testing is to use the "
":meth:`~flask.Flask.test_request_context` context manager.  In "
"combination with the ``with`` statement it will bind a test request so "
"that you can interact with it.  Here is an example::"
msgstr ""
"それでは、これはあなたにとって何を意味するのでしょうか？ユニットテストのようなことを行おうとしていない限り、基本的には完全に無視して構いません。（ユニットテストのようなことを行っているときは）requestオブジェクトが存在しないために、requestオブジェクトに依存しているコードが突然止まることに気付くでしょう。解決方法は、自分でrequestオブジェクトを作成してコンテキストに結び付けることです。ユニットテストのための最も簡単な解決方法はコンテキストマネージャ（訳注:"
" "
"Pythonの仕様にある、with文と組み合わせて特別な処理をする仕組みで、ここの「コンテキスト」はHTTPリクエストとは関係ないと思います）の\\"
" :meth:`~flask.Flask.test_request_context`\\ を使用することです。\\ ``with``\\ "
"文と組み合わせると、テスト用のrequestとやり取りできるように、テスト用requestとコンテキストとを結び付けます。以下はその例です::"

# 0d17e4e527ae4f34a20f9f646b084229
#: ../../flask/docs/quickstart.rst:498
msgid ""
"The other possibility is passing a whole WSGI environment to the "
":meth:`~flask.Flask.request_context` method::"
msgstr "別の可能なやり方は、WSGI環境全体を\\ :meth:`~flask.Flask.request_context`\\ メソッドへ渡すことです（訳注: WSGIではWebサーバとWSGIアプリ間の主要なインタフェースが主に環境変数で決まるため、おそらく環境変数となるキー・値の一式を渡す意味合いだと思います）。"

# b5700ddfe6a143aa9df8d8907d6aafc1
#: ../../flask/docs/quickstart.rst:507
msgid "The Request Object"
msgstr "リクエストオブジェクト"

# 47101d2496354247ab435a13583f5235
#: ../../flask/docs/quickstart.rst:509
msgid ""
"The request object is documented in the API section and we will not cover"
" it here in detail (see :class:`~flask.Request`). Here is a broad "
"overview of some of the most common operations.  First of all you have to"
" import it from the ``flask`` module::"
msgstr ""
"requestオブジェクトはAPIセクションにドキュメントがあり、ここでは詳細は網羅しません（詳細は\\ "
":class:`~flask.Request`\\ を確認してください）。ここでは、最もよくある操作のいくつかについて概観します。まず最初に、requestオブジェクトを\\"
" ``flask``\\ モジュールからimportする必要があります::"

# db42d80e2a2a4ed9b487c3fddbaf3f5b
#: ../../flask/docs/quickstart.rst:516
msgid ""
"The current request method is available by using the "
":attr:`~flask.Request.method` attribute.  To access form data (data "
"transmitted in a ``POST`` or ``PUT`` request) you can use the "
":attr:`~flask.Request.form` attribute.  Here is a full example of the two"
" attributes mentioned above::"
msgstr ""
"その時点のリクエストのメソッド（訳注: requestオブジェクトのメソッドではなく、HTTPのプロトコル上のメソッド）は\\ :attr:`~flask.Request.method`\\ "
"属性を使えば取得可能です。formのデータ（\\ ``POST``\\ または\\ ``PUT``\\ "
"リクエストで送信されるデータ）へアクセスするには、\\ :attr:`~flask.Request.form`\\ "
"属性を使用できます。以下は言及した2つの属性についての不足のない（どちらの用法も示した）例です::"

# 14d6cf3b8a7646e7adf38e2f108e7dcf
#: ../../flask/docs/quickstart.rst:535
msgid ""
"What happens if the key does not exist in the ``form`` attribute?  In "
"that case a special :exc:`KeyError` is raised.  You can catch it like a "
"standard :exc:`KeyError` but if you don't do that, a HTTP 400 Bad Request"
" error page is shown instead.  So for many situations you don't have to "
"deal with that problem."
msgstr ""
"``form``\\ 属性にキーが存在しない場合はどうなるでしょうか？そのような場合は特別な\\ :exc:`KeyError`\\ "
"を発生させます。それを標準の\\ :exc:`KeyError`\\ のようにcatchすることもできますし、そうしない場合には、代わりにHTTP"
" 400\\ Bad Requestのエラーページが表示されます。従って多くの場面では、その問題を特に処理する必要はないでしょう。"

# d6b9cf15c17f40cfa266ea666bcc216b
#: ../../flask/docs/quickstart.rst:541
msgid ""
"To access parameters submitted in the URL (``?key=value``) you can use "
"the :attr:`~flask.Request.args` attribute::"
msgstr ""
"URLの中（\\ ``?key=value``\\ の部分）で与えられるパラメータへのアクセスには\\ "
":attr:`~flask.Request.args`\\ 属性を使用できます::"

# 8f979095b55d4271862b53d6880e34fd
#: ../../flask/docs/quickstart.rst:546
msgid ""
"We recommend accessing URL parameters with `get` or by catching the "
":exc:`KeyError` because users might change the URL and presenting them a "
"400 bad request page in that case is not user friendly."
msgstr ""
"ユーザはURLを変更することがあり（訳注: URLの中の\ ``?key=value``\ で与えられるパラメータの部分もユーザが勝手に変更することがあります）、そのたびに400 bad "
"requestのページを表示することはユーザにとって親切ではないので、URLパラメータは\\ `get`\\ でアクセス（訳注: `get`\ でアクセスしたときは、キーが存在しない場合でも例外は発生せず、2番目の引数が代わりに返ります）するか、\\ "
":exc:`KeyError`\\ をcatchすることを推奨します。"

# 1d2ef4b6745c46559caf7e33aea0db0b
#: ../../flask/docs/quickstart.rst:550
msgid ""
"For a full list of methods and attributes of the request object, head "
"over to the :class:`~flask.Request` documentation."
msgstr "requestオブジェクトの全てのメソッドと属性のリストは、\\ :class:`~flask.Request`\\ ドキュメントを確認してください。"

# 12337a18b72f47f095335db154e4ddc3
#: ../../flask/docs/quickstart.rst:555
msgid "File Uploads"
msgstr "ファイルのアップロード"

# 8ac9c6a56bda4271b21660cf4bd9c494
#: ../../flask/docs/quickstart.rst:557
msgid ""
"You can handle uploaded files with Flask easily.  Just make sure not to "
"forget to set the ``enctype=\"multipart/form-data\"`` attribute on your "
"HTML form, otherwise the browser will not transmit your files at all."
msgstr ""
"Flaskではアップロードされたファイルを容易に処理できます。自分のHTMLのformで、\\ ``enctype=\"multipart"
"/form-data\"``\\ 属性の設定だけは忘れず確実にしてください。そうしないと、そもそもブラウザがファイルを送信しないでしょう。"

# 7be241a0f61f4db7a2672330ec183ffd
#: ../../flask/docs/quickstart.rst:561
msgid ""
"Uploaded files are stored in memory or at a temporary location on the "
"filesystem.  You can access those files by looking at the "
":attr:`~flask.request.files` attribute on the request object.  Each "
"uploaded file is stored in that dictionary.  It behaves just like a "
"standard Python :class:`file` object, but it also has a "
":meth:`~werkzeug.datastructures.FileStorage.save` method that allows you "
"to store that file on the filesystem of the server. Here is a simple "
"example showing how that works::"
msgstr ""
"アップロードされたファイルはメモリ中かファイルシステムの一時的な場所に格納されます。それらのファイルはrequestオブジェクトの\\ "
":attr:`~flask.request.files`\\ "
"属性を調べることでアクセスできます。アップロードされた各ファイルは、そのdictionaryに格納されます。それはPython標準の\\ "
":class:`file`\\ オブジェクトのように振る舞いますが、サーバのファイルシステムへそのファイルを格納できるようにする\\ "
":meth:`~werkzeug.datastructures.FileStorage.save`\\ "
"メソッドも持っています。以下は、それがどのように働くかを示す簡単な例です::"

# 5b10e1a8187140718e1900aad951fb6d
#: ../../flask/docs/quickstart.rst:579
msgid ""
"If you want to know how the file was named on the client before it was "
"uploaded to your application, you can access the "
":attr:`~werkzeug.datastructures.FileStorage.filename` attribute. However "
"please keep in mind that this value can be forged so never ever trust "
"that value.  If you want to use the filename of the client to store the "
"file on the server, pass it through the "
":func:`~werkzeug.utils.secure_filename` function that Werkzeug provides "
"for you::"
msgstr ""
"アップロードされる前にクライアント側でどのようなファイル名であったかを知りたい場合は、\\ "
":attr:`~werkzeug.datastructures.FileStorage.filename`\\ "
"属性にアクセスできます。しかし、その値は偽装される可能性があり決して信頼はできないことは覚えておいてください。クライアント側のファイル名を使用してサーバ側でファイルを格納したい場合は、Werkzeugが提供する\\"
" :func:`~werkzeug.utils.secure_filename`\\ 関数を通過させてください::"

# d45eda89843e481399ee33b2f916daeb
#: ../../flask/docs/quickstart.rst:598
msgid "For some better examples, checkout the :ref:`uploading-files` pattern."
msgstr "もっと良い例については、\\ :ref:`uploading-files`\\ のパターンを調べてください。"

# 73f29221aadb4a45b12a2c88687e5096
#: ../../flask/docs/quickstart.rst:601
msgid "Cookies"
msgstr "クッキー（Cookies）"

# 3597e701614947e2b8150596240a845f
#: ../../flask/docs/quickstart.rst:603
msgid ""
"To access cookies you can use the :attr:`~flask.Request.cookies` "
"attribute.  To set cookies you can use the "
":attr:`~flask.Response.set_cookie` method of response objects.  The "
":attr:`~flask.Request.cookies` attribute of request objects is a "
"dictionary with all the cookies the client transmits.  If you want to use"
" sessions, do not use the cookies directly but instead use the "
":ref:`sessions` in Flask that add some security on top of cookies for "
"you."
msgstr ""
"クッキーへアクセスするには\\ :attr:`~flask.Request.cookies`\\ "
"属性が使用できます。クッキーを設定するには、responseオブジェクトの\\ :attr:`~flask.Response.set_cookie`\\"
" メソッドを使用できます。requestオブジェクトの\\ :attr:`~flask.Request.cookies`\\ "
"属性はクライアントが送信する全てのクッキーのdictionaryです。セッションを使用したい場合は、クッキーを直接使うのではなく、クッキーの上にいくらかセキュリティーを追加した、Flaskの\\"
" :ref:`sessions`\\ を代わりに使用してください。"

# 1e2542d232ef420791526d0fe040b817
#: ../../flask/docs/quickstart.rst:611
msgid "Reading cookies::"
msgstr "クッキーの読取::"

# 7fc07d5fa09442c297841a431341b182
#: ../../flask/docs/quickstart.rst:621
msgid "Storing cookies::"
msgstr "クッキーの格納::"

# f9218aebb191494fa0991f74e68586dc
#: ../../flask/docs/quickstart.rst:631
msgid ""
"Note that cookies are set on response objects.  Since you normally just "
"return strings from the view functions Flask will convert them into "
"response objects for you.  If you explicitly want to do that you can use "
"the :meth:`~flask.make_response` function and then modify it."
msgstr ""
"クッキーはresponseオブジェクトに設定されていることに注目してください。通常はview関数からはただ文字列を返すだけなので、あなたにとって良いように、Flaskはそれら（訳注:"
" view関数の戻り値、クッキーなど）をresponseオブジェクトへと変換します。もしそれを自分で明示的に実行したい場合は、\\ "
":meth:`~flask.make_response`\\ 関数を使用して、それ（responseオブジェクト）を変更できます。"

# 2f753c8988f94090978aa8a5d53924b5
#: ../../flask/docs/quickstart.rst:636
msgid ""
"Sometimes you might want to set a cookie at a point where the response "
"object does not exist yet.  This is possible by utilizing the :ref"
":`deferred-callbacks` pattern."
msgstr ""
"ときには、responseオブジェクトがまだ存在しない時点でクッキーを設定したいこともあるでしょう。これは\\ :ref:`deferred-"
"callbacks`\\ のパターンを活用すれば可能です。"

# adf8de47d31d49b0aa22d6fffd0e6cf2
#: ../../flask/docs/quickstart.rst:640
msgid "For this also see :ref:`about-responses`."
msgstr "これについては\\ :ref:`about-responses`\\ も確認してください。"

# 37b90edaec3a46498c8215d10b273bd2
#: ../../flask/docs/quickstart.rst:643
msgid "Redirects and Errors"
msgstr "転送（Redirects）とエラー"

# 8f790d32548042b69b04dd92aca0b3cc
#: ../../flask/docs/quickstart.rst:645
msgid ""
"To redirect a user to another endpoint, use the :func:`~flask.redirect` "
"function; to abort a request early with an error code, use the "
":func:`~flask.abort` function::"
msgstr ""
"ユーザを別のエンドポイントへリダイレクトするには、\\ :func:`~flask.redirect`\\ 関数を使用します; "
"リクエストを早い段階でエラーコードと一緒に異常終了させるには、\\ :func:`~flask.abort`\\ 関数を使用します::"

# 9f34090436554a55866a15a4ca27b16b
#: ../../flask/docs/quickstart.rst:660
msgid ""
"This is a rather pointless example because a user will be redirected from"
" the index to a page they cannot access (401 means access denied) but it "
"shows how that works."
msgstr ""
"これは、ユーザをindexページからアクセスできないページ（401はアクセス拒否を意味します）へとリダイレクトするため、いくぶんポイントを捉えていない例ですが、上記の関数がどのように機能するかを示しています。"

# 721b9a305ab54c6690605de3ac784087
#: ../../flask/docs/quickstart.rst:664
msgid ""
"By default a black and white error page is shown for each error code.  If"
" you want to customize the error page, you can use the "
":meth:`~flask.Flask.errorhandler` decorator::"
msgstr ""
"標準設定では各エラーコードに対して白黒のエラーページを表示します。もしエラーページをカスタマイズしたい場合、\\ "
":meth:`~flask.Flask.errorhandler`\\ デコレータを使用できます::"

# 95cead5b2f3a4cb9a0aebc3929cdec1a
#: ../../flask/docs/quickstart.rst:674
msgid ""
"Note the ``404`` after the :func:`~flask.render_template` call.  This "
"tells Flask that the status code of that page should be 404 which means "
"not found.  By default 200 is assumed which translates to: all went well."
msgstr ""
":func:`~flask.render_template`\\ 呼び出しの後ろにある\\ ``404``\\ "
"に注目してください。これは、そのページのステータスコードはnot "
"foundを意味する404にするべきであることを、Flaskに伝えます。標準設定では200が想定されており、それは次のように翻訳されます: "
"すべてうまく行きました。"

# d84acb7e46d14c48ab21311ee3af5591
#: ../../flask/docs/quickstart.rst:678
msgid "See :ref:`error-handlers` for more details."
msgstr "より詳細は\\ :ref:`error-handlers`\\ を確認してください。"

# 2040c935795c487791ca2f6455412292
#: ../../flask/docs/quickstart.rst:683
msgid "About Responses"
msgstr "レスポンスについて"

# 40c669260dc3444c92eb000da2e2316d
#: ../../flask/docs/quickstart.rst:685
msgid ""
"The return value from a view function is automatically converted into a "
"response object for you. If the return value is a string it's converted "
"into a response object with the string as response body, a ``200 OK`` "
"status code and a :mimetype:`text/html` mimetype. If the return value is "
"a dict, :func:`jsonify` is called to produce a response. The logic that "
"Flask applies to converting return values into response objects is as "
"follows:"
msgstr ""
"view関数からの戻り値は自動的にresponseオブジェクトに変換されます。もし戻り値がstringの場合、stringをレスポンスのbodyに、ステータスコードを\\"
" ``200 OK``\\ に、そしてmimeタイプを\\ :mimetype:`text/html`\\ "
"にしたresponseオブジェクトへ変換されます。もし戻り値がdictの場合、responseを作成するために\\ "
":func:`~flask.json.jsonify`\\ "
"が呼び出されます。Flaskが（view関数の）戻り値をresponseへ変換するロジックは以下のとおりです:"

# 8ae8a215218348f5816a9f575ea46ca4
#: ../../flask/docs/quickstart.rst:693
msgid ""
"If a response object of the correct type is returned it's directly "
"returned from the view."
msgstr "もし適切なタイプのresponseオブジェクトが返された場合は、それがviewから直接返されます。"

# 58f0d89351984dd3b8edd9637d9092d9
#: ../../flask/docs/quickstart.rst:695
msgid ""
"If it's a string, a response object is created with that data and the "
"default parameters."
msgstr "もしstringであれば、responseオブジェクトはそのデータと標準設定のパラメータとを使用して作成されます。"

# 143287344dc74f82b75ac5c9d66c437e
#: ../../flask/docs/quickstart.rst:697
msgid "If it's a dict, a response object is created using ``jsonify``."
msgstr "もしdictであれば、responseオブジェクトは\\ :func:`~flask.json.jsonify`\\ を使用して作成されます。"

# cad6d48163454e75a92762542b440826
#: ../../flask/docs/quickstart.rst:698
msgid ""
"If a tuple is returned the items in the tuple can provide extra "
"information. Such tuples have to be in the form ``(response, status)``, "
"``(response, headers)``, or ``(response, status, headers)``. The "
"``status`` value will override the status code and ``headers`` can be a "
"list or dictionary of additional header values."
msgstr ""
"もしtupleが返された場合は、tuple内のアイテムは追加情報を提供できます。そのようなtupleは\\ ``(response, "
"status)``, ``(response, headers)``, または\\ ``(response, status, "
"headers)``\\ という形式でなければいけません。\\ ``status``\\ の値はステータスコードを上書きし、そして\\ "
"``headers``\\ は追加ヘッダの値であるlistかdictionaryが可能です。"

# 8b71cfd947854da4883a84adbc42e6d2
#: ../../flask/docs/quickstart.rst:704
msgid ""
"If none of that works, Flask will assume the return value is a valid WSGI"
" application and convert that into a response object."
msgstr "もし上記のいずれも機能しない場合、戻り値は妥当なWSGIアプリケーションであるとFlaskは仮定し、それをresponseオブジェクトへ変換します。"

# e84c20b53c594c81a1ae5cb61dbd682f
#: ../../flask/docs/quickstart.rst:707
msgid ""
"If you want to get hold of the resulting response object inside the view "
"you can use the :func:`~flask.make_response` function."
msgstr ""
"もし結果となるresponseオブジェクトをviewの内側で捉えたい場合は、\\ :func:`~flask.make_response`\\ "
"関数を使用できます。"

# 2f5dac76dc914be88d0b55f4c05c47ea
#: ../../flask/docs/quickstart.rst:710
msgid "Imagine you have a view like this::"
msgstr "以下のようなviewがあると想像してください::"

# ddcac0aed2804bd0828843145939d185
#: ../../flask/docs/quickstart.rst:716
msgid ""
"You just need to wrap the return expression with "
":func:`~flask.make_response` and get the response object to modify it, "
"then return it::"
msgstr ""
"必要なことは、\\ :func:`~flask.make_response`\\ "
"でreturnの式を囲み、変更するためにresponseオブジェクトを取得し、それからその（変更後の）responseオブジェクトを返すだけです。"

# d5d7f3690389476e84f1494d2fc2db0d
#: ../../flask/docs/quickstart.rst:728
msgid "APIs with JSON"
msgstr "JSONを使ったAPIs"

# f0a88465cfb94ce1b85dedf84428315f
#: ../../flask/docs/quickstart.rst:730
msgid ""
"A common response format when writing an API is JSON. It's easy to get "
"started writing such an API with Flask. If you return a ``dict`` from a "
"view, it will be converted to a JSON response."
msgstr ""
"APIを書いているときによくあるレスポンスのフォーマットにJSONがあります。FlaskでそのようなAPIの作成を始めることは簡単です。もし\\ "
"``dict``\\ をviewから返した場合、それはJSONのレスポンスへ変換されます。"

# 5240f4d7a8414d7281d70bdf8fc37430
#: ../../flask/docs/quickstart.rst:745
msgid ""
"Depending on your API design, you may want to create JSON responses for "
"types other than ``dict``. In that case, use the "
":func:`~flask.json.jsonify` function, which will serialize any supported "
"JSON data type. Or look into Flask community extensions that support more"
" complex applications."
msgstr ""
"APIの設計によっては、JSONのレスポンスを\\ ``dict``\\ "
"以外のタイプでも作成したくなるかもしれません。そのような場合は、サポートされているJSONのデータタイプは何でもシリアライズ（訳注: "
"Python内部で処理できるデータ形式のオブジェクトから、文字列やバイト列のように、階層を持たず、頭から順番に読み込んで処理できるデータ形式へ変換するような意味合い）する\\ :func:`~flask.json.jsonify`\\ "
"関数を使用します。もしくは、より複雑なアプリケーションをサポートする、コミュニティのFlask拡張を調べてください。"

# f13176e1cc944419a1ff9215f0b719c7
#: ../../flask/docs/quickstart.rst:762
msgid "Sessions"
msgstr "セッション"

# 83fd4840a7604a58b62b271d65e1936e
#: ../../flask/docs/quickstart.rst:764
msgid ""
"In addition to the request object there is also a second object called "
":class:`~flask.session` which allows you to store information specific to"
" a user from one request to the next.  This is implemented on top of "
"cookies for you and signs the cookies cryptographically.  What this means"
" is that the user could look at the contents of your cookie but not "
"modify it, unless they know the secret key used for signing."
msgstr ""
"requestオブジェクトに加えて、ユーザに特有の情報をあるリクエストから次のリクエストへと格納できるようにする、\\ "
":class:`~flask.session`\\ "
"と呼ばれる2番目のオブジェクトもあります。これはクッキー上に実装されていて、クッキーに暗号学的な署名をします。これが意味することは、ユーザは自分のクッキーの内容を見ることはできますが、署名に使われた秘密の鍵を知らないかぎり、変更はできないということです。"

# 9e1ae91bfa0b4ea7916348dffd5b231d
#: ../../flask/docs/quickstart.rst:771
msgid ""
"In order to use sessions you have to set a secret key.  Here is how "
"sessions work::"
msgstr "セッションを使用するためには、秘密の鍵を設定しなければなりません。セッションがどのように働くかは、以下のとおりです::"

# db405d20c07c4eb5b1a9ae8f322aa86d
#: ../../flask/docs/quickstart.rst:806
msgid ""
"The :func:`~flask.escape` mentioned here does escaping for you if you are"
" not using the template engine (as in this example)."
msgstr ""
"ここで言及されている\\ :func:`~flask.escape`\\ "
"は、（この例のように）テンプレートエンジンを使用していない場合にエスケープ処理をします。"

# d7ffd87d2b124af3a6465157920964c6
#: ../../flask/docs/quickstart.rst:809
msgid "How to generate good secret keys"
msgstr "良い秘密の鍵の生成方法"

# 8de5ba761e9e48f883977caddf2708a8
#: ../../flask/docs/quickstart.rst:811
msgid ""
"A secret key should be as random as possible. Your operating system has "
"ways to generate pretty random data based on a cryptographic random "
"generator. Use the following command to quickly generate a value for "
":attr:`Flask.secret_key` (or :data:`SECRET_KEY`)::"
msgstr ""
"秘密の鍵はできるだけでたらめ（random）なものにするべきです。暗号学的にでたらめであるデータを生成する装置に基づいた、非常にでたらめなデータを生成する方法がオペレーティングシステムにはあります。手早く\\"
" :attr:`Flask.secret_key`\\ （もしくは\\ :data:`SECRET_KEY`\\ "
"）の値を生成するには、以下のコマンドを使用してください::"

# 62d4501db7b84fe9a5117527974bc508
#: ../../flask/docs/quickstart.rst:819
msgid ""
"A note on cookie-based sessions: Flask will take the values you put into "
"the session object and serialize them into a cookie.  If you are finding "
"some values do not persist across requests, cookies are indeed enabled, "
"and you are not getting a clear error message, check the size of the "
"cookie in your page responses compared to the size supported by web "
"browsers."
msgstr ""
"クッキーに基づいたセッションについての注意: "
"Flaskはsessionオブジェクトに置かれた値を取り上げ、クッキーへシリアライズ（訳注: Python内部で処理できるデータ形式のオブジェクトから、文字列やバイト列のように、階層を持たず、頭から順番に読み込んで処理できるデータ形式へ変換するような意味合い）します。もしも（sessionで）ある値が複数のリクエストを跨いでは持続をしていないことが見つかり、実際にクッキーは有効であり、そして明確なエラーメッセージを得られないときは、ページのレスポンスにあるクッキーのサイズをチェックし、webブラウザによってサポートされているサイズと比較してください。"

# e6a85b189a624020b836bdcb796d651c
#: ../../flask/docs/quickstart.rst:825
msgid ""
"Besides the default client-side based sessions, if you want to handle "
"sessions on the server-side instead, there are several Flask extensions "
"that support this."
msgstr "クライアント側に基づいた標準的なセッションに加えて、もしサーバ側で代わりにセッションを処理したい場合、これをサポートするFlask拡張がいくつかあります。"

# e068092f3a77488d9a86fd8a4314263a
#: ../../flask/docs/quickstart.rst:830
msgid "Message Flashing"
msgstr "メッセージのフラッシュ表示"

# b3fe2055bd434571834e7f9d68635b62
#: ../../flask/docs/quickstart.rst:832
msgid ""
"Good applications and user interfaces are all about feedback.  If the "
"user does not get enough feedback they will probably end up hating the "
"application.  Flask provides a really simple way to give feedback to a "
"user with the flashing system.  The flashing system basically makes it "
"possible to record a message at the end of a request and access it on the"
" next (and only the next) request.  This is usually combined with a "
"layout template to expose the message."
msgstr ""
"良いアプリケーションおよびユーザインタフェースとは、すべてフィードバック次第です。もしユーザが十分なフィードバックを得られない場合、おそらくアプリケーションを嫌いになって終わりです。Flaskはフラッシュ表示の仕組み（flashing"
" "
"system）によって、ユーザへフィードバックを与える非常にシンプルな方法を提供します。フラッシュ表示の仕組みは、リクエストの最後にメッセージを記録し、次の（ただ次だけの）リクエストでアクセスできるようにします。これは、普通はそのメッセージを表示するレイアウトのテンプレートと組み合わされます。"

# ebdc10aa73354b478c9ccb445c8cfb41
#: ../../flask/docs/quickstart.rst:840
msgid ""
"To flash a message use the :func:`~flask.flash` method, to get hold of "
"the messages you can use :func:`~flask.get_flashed_messages` which is "
"also available in the templates.  Check out the :ref:`message-flashing-"
"pattern` for a full example."
msgstr ""
"メッセージをフラッシュ表示させるには\\ :func:`~flask.flash`\\ "
"メソッドを使用し、メッセージを捉えるには、テンプレートでも利用可能な\\ "
":func:`~flask.get_flashed_messages`\\ が使用できます。不足のない（どちらの用法も示した）例については\\ "
":ref:`message-flashing-pattern`\\ を調べてください。"

# 7521c668f6414c36987312e5267db5a8
#: ../../flask/docs/quickstart.rst:846
msgid "Logging"
msgstr "ログ機能（Logging）"

# 505a34561d64426aad18a93ca659f873
#: ../../flask/docs/quickstart.rst:850
msgid ""
"Sometimes you might be in a situation where you deal with data that "
"should be correct, but actually is not.  For example you may have some "
"client-side code that sends an HTTP request to the server but it's "
"obviously malformed.  This might be caused by a user tampering with the "
"data, or the client code failing.  Most of the time it's okay to reply "
"with ``400 Bad Request`` in that situation, but sometimes that won't do "
"and the code has to continue working."
msgstr ""
"ときには、適切であるべきなのに実際にはそうではないデータを処理する状況におかれるかもしれません。例えば、明らかに適切でない形式のHTTPリクエストをサーバへ送信するクライアント側のコードがあるかもしれません。これは、ユーザのデータ改ざんや、クライアントのコードの失敗によって引き起こされるかもしれません。その状況では殆どの場合は\\"
" ``400 Bad Request``\\ を返せば大丈夫ですが、ときにはそれでは通用せず、コードを動かし続けなければならないことがあります。"

# 56290c07aca64000a942857ae6c7c747
#: ../../flask/docs/quickstart.rst:858
msgid ""
"You may still want to log that something fishy happened.  This is where "
"loggers come in handy.  As of Flask 0.3 a logger is preconfigured for you"
" to use."
msgstr ""
"そのような状況でもまだ、起きてしまったそのようなうさんくさい何かをログしたいことがあるかもしれません（You may still want to log that "
"something fishy happened）。これはloggerを重宝する状況です。Flask "
"0.3以降は、loggerが使用できるように事前設定されています。"

# 9d985c3b693e484d8c2c1228630ec292
#: ../../flask/docs/quickstart.rst:862
msgid "Here are some example log calls::"
msgstr "以下はログ呼び出しのいくつかの例です::"

# 7e4827c388e540b4b82a59569f536ce2
#: ../../flask/docs/quickstart.rst:868
msgid ""
"The attached :attr:`~flask.Flask.logger` is a standard logging "
":class:`~logging.Logger`, so head over to the official :mod:`logging` "
"docs for more information."
msgstr ""
"付与されている\\ :attr:`~flask.Flask.logger`\\ はPython標準のロギングの\\ "
":class:`~logging.Logger`\\ なので、さらなる情報は公式の\\ :mod:`logging`\\ "
"のドキュメントを確認してください。"

# ab6cbe9447ea4de4bbf8b0decf97b57f
#: ../../flask/docs/quickstart.rst:872
msgid "Read more on :ref:`application-errors`."
msgstr "さらに、\\ :ref:`application-errors`\\ も読んでください。"

# 21c1cff9a436456f9cf73d1fab6f45f0
#: ../../flask/docs/quickstart.rst:875
msgid "Hooking in WSGI Middleware"
msgstr "WSGIミドルウェア内でのフック"

#: ../../flask/docs/quickstart.rst:877
msgid ""
"To add WSGI middleware to your Flask application, wrap the application's "
"``wsgi_app`` attribute. For example, to apply Werkzeug's "
":class:`~werkzeug.middlware.proxy_fix.ProxyFix` middleware for running "
"behind Nginx:"
msgstr ""
"自分のFlaskアプリケーションにWSGIミドルウェアを追加するには、アプリ"
"ケーションの\ ``wsgi_app``\ 属性を包み込みます（wrap）。例えば、"
"Nginxの背後で実行するためにWerkzeugの\ "
":class:`~werkzeug.middleware.proxy_fix.ProxyFix`\ ミドルウェアを適用する"
"には以下のようにします:"

#: ../../flask/docs/quickstart.rst:887
msgid ""
"Wrapping ``app.wsgi_app`` instead of ``app`` means that ``app`` still "
"points at your Flask application, not at the middleware, so you can "
"continue to use and configure ``app`` directly."
msgstr ""
"``app``\ の代わりに\ ``app.wsgi_app``\ を包み込むことは、\ ``app``\ "
"はミドルウェアではなく変わらず自分のFlaskアプリケーションを指し、引き"
"続き直接\ ``app``\ を使用して（Flaskアプリケーションを）設定できることを意味します。"

# 0476910807c44e45a291d05ed57df5a0
#: ../../flask/docs/quickstart.rst:892
msgid "Using Flask Extensions"
msgstr "Flask拡張の使用"

# d25503a11d8c4d848b62caf1a1ee2326
#: ../../flask/docs/quickstart.rst:894
msgid ""
"Extensions are packages that help you accomplish common tasks. For "
"example, Flask-SQLAlchemy provides SQLAlchemy support that makes it "
"simple and easy to use with Flask."
msgstr ""
"（Flask）拡張は、よくあるタスクを達成する手助けをするパッケージです。例えば、Flask-"
"SQLAlchemyはSQLAlchemyのサポートを提供し、シンプルかつ容易にSQLAlchemyをFlaskと一緒に使用できるようにします。"

# e41d486b941e48e385847ce3b902e50e
#: ../../flask/docs/quickstart.rst:898
msgid "For more on Flask extensions, have a look at :ref:`extensions`."
msgstr "Flask拡張についてさらには、\\ :ref:`extensions`\\ を調べてください。"

# 09f396485bfb49639fd4ad512116d750
#: ../../flask/docs/quickstart.rst:901
msgid "Deploying to a Web Server"
msgstr "webサーバへのデプロイ"

# 97c96b4cd53247b7919f931b1ead81b9
#: ../../flask/docs/quickstart.rst:903
msgid "Ready to deploy your new Flask app? Go to :ref:`deployment`."
msgstr "新しいFlaskアプリをデプロイする準備ができましたか？\\ :ref:`deployment`\\ へ進んでください。"

# 745b4cdd410b494c9fc3be5f2002b985
#~ msgid ""
#~ "If you want to add a WSGI "
#~ "middleware to your application you can"
#~ " wrap the internal WSGI application.  "
#~ "For example if you want to use "
#~ "one of the middlewares from the "
#~ "Werkzeug package to work around bugs "
#~ "in lighttpd, you can do it like"
#~ " this::"
#~ msgstr "アプリケーションにWSGIのミドルウェアを追加したい場合は、内部のWSGIアプリケーションをラップできます。例えば、lighttpdのバグへ対処するためにWerkzeugパッケージにあるミドルウェアのひとつを使いたい場合、以下のように実施できます::"

