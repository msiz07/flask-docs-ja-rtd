# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-20 18:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

# bd9fbb4a5618478e9ce79c9ad24fbf22
#: ../../flask/docs/shell.rst:2
msgid "Working with the Shell"
msgstr "Shellを使った作業"

# ffb69f018c0f41ac95b020993dc202ce
#: ../../flask/docs/shell.rst:6
msgid ""
"One of the reasons everybody loves Python is the interactive shell.  It "
"basically allows you to execute Python commands in real time and "
"immediately get results back.  Flask itself does not come with an "
"interactive shell, because it does not require any specific setup "
"upfront, just import your application and start playing around."
msgstr ""
"皆がPythonを愛する理由の一つは、インタラクティブなshellです。それは基本的に"
"Pythonコマンドをリアルタイムで実行し即座に結果を取り戻すことを可能にします。"
"（Shellを利用するために）前もって特別な準備をする必要はないため、Flask自体は"
"インタラクティブなshellを伴っているわけではなく、（shellを使うには）自分の"
"アプリケーションをただimportして、遊んでみてください。"

# e765791ac98448bdad01816c37e89086
#: ../../flask/docs/shell.rst:12
msgid ""
"There are however some handy helpers to make playing around in the shell "
"a more pleasant experience.  The main issue with interactive console "
"sessions is that you're not triggering a request like a browser does "
"which means that :data:`~flask.g`, :data:`~flask.request` and others are "
"not available.  But the code you want to test might depend on them, so "
"what can you do?"
msgstr ""
"しかしながらshellでの遊びをより楽しい経験にするための、便利なヘルパーが"
"いくつか存在します。インタラクティブなコンソールでのセッションで重要な問題は、"
"ブラウザが行うようにリクエストを引き起こしてはいないことで、それは\ :data:"
"`~flask.g`, :data:`~flask.request`\ などが利用できないことを意味します。しかし"
"あなたがテストしたいコードはそれら（g, requestなど）に依存しているものかも"
"しれませんので、それではどうすればよいでしょうか？"

# 970be3664041423393fb4bfc6ff85d5a
#: ../../flask/docs/shell.rst:19
msgid ""
"This is where some helper functions come in handy.  Keep in mind however "
"that these functions are not only there for interactive shell usage, but "
"also for unit testing and other situations that require a faked request "
"context."
msgstr ""
"これはいくつかのヘルパー関数が便利な場所です。しかしながら、それらの関数は"
"インタラクティブなshellで使用するためだけではなく、ユニットテストおよび偽装"
"されたrequest contextを要求するその他の状況のためにもあるということを覚えて"
"いてください。"

# 401dd83ddda449419e151c716f23f7c2
#: ../../flask/docs/shell.rst:24
#, fuzzy
#| msgid "" "Generally it's recommended that you read the :doc:`reqcontext`
#| chapter of" " the documentation first."
msgid "Generally it's recommended that you read :doc:`reqcontext` first."
msgstr ""
"概して、まずはドキュメントの :doc:`reqcontext` の章を読んでおくことが"
"推奨されます。"

# c063ae40d0c24a5a821a1b11e792b762
#: ../../flask/docs/shell.rst:27
msgid "Command Line Interface"
msgstr "コマンドライン・インタフェース"

# 813d81cdf6434b999f4cbd8181ed8af8
#: ../../flask/docs/shell.rst:29
msgid ""
"Starting with Flask 0.11 the recommended way to work with the shell is "
"the ``flask shell`` command which does a lot of this automatically for "
"you. For instance the shell is automatically initialized with a loaded "
"application context."
msgstr ""
"Flask 0.11から、shellを使って作業するための推奨されるやり方は、（shellを"
"使って作業するために）多くのことを自動的に行う\ ``flask shell``\ コマンド"
"です。例えば読み込まれたapplication contextを使ってshellが自動的に初期化"
"されます。"

# 7ae2aed5b4a34a2294e8c0dc1d0d6345
#: ../../flask/docs/shell.rst:34
msgid "For more information see :doc:`/cli`."
msgstr "さらなる情報は :doc:`/cli` を確認してください。"

# 31ca9f55fb5b4cdf9cf8300d4c07a9cc
#: ../../flask/docs/shell.rst:37
msgid "Creating a Request Context"
msgstr "リクエストのコンテキストの作成（Creating a Request Context）"

# 4102b21e26ce4bf0b0e5eb4717747379
#: ../../flask/docs/shell.rst:39
msgid ""
"The easiest way to create a proper request context from the shell is by "
"using the :attr:`~flask.Flask.test_request_context` method which creates "
"us a :class:`~flask.ctx.RequestContext`:"
msgstr ""
"適切なリクエストのcontextをshellから作成する最も簡単な方法は、\ :class:"
"`~flask.ctx.RequestContext`\ を作成する\ :attr:"
"`~flask.Flask.test_request_context`\ メソッドを使用することです:"

# af416ed640df43bdb6e439adcfc1cbb1
#: ../../flask/docs/shell.rst:45
msgid ""
"Normally you would use the ``with`` statement to make this request object"
" active, but in the shell it's easier to use the "
":meth:`~flask.ctx.RequestContext.push` and "
":meth:`~flask.ctx.RequestContext.pop` methods by hand:"
msgstr ""
"普通は（訳注: インタラクティブなshell以外の主な状況では）、このリクエストの"
"オブジェクトを有効（active）にするために\ ``with``\ 文を使用するでしょうが、"
"shellの中では手作業で\ :meth:`~flask.ctx.RequestContext.push`\ メソッドと\ "
":meth:`~flask.ctx.RequestContext.pop`\ メソッドを使用する方が容易です:"

# da129c67afd24aeaae32783ab2f8760a
#: ../../flask/docs/shell.rst:52
msgid ""
"From that point onwards you can work with the request object until you "
"call `pop`:"
msgstr ""
"その点（上記のpushを実行した箇所）より後では、\ `pop`\ を呼ぶまでは、"
"リクエストのオブジェクトを使って作業できます。"

# 3637ee07ea61486ca8b4e2a335886200
#: ../../flask/docs/shell.rst:58
msgid "Firing Before/After Request"
msgstr "リクエスト前後の処理の起動（Firing Before/After Request）"

# 5b2a9d0d3a0549dea9ac75e3edcbd0f8
#: ../../flask/docs/shell.rst:60
msgid ""
"By just creating a request context, you still don't have run the code "
"that is normally run before a request.  This might result in your "
"database being unavailable if you are connecting to the database in a "
"before-request callback or the current user not being stored on the "
":data:`~flask.g` object etc."
msgstr ""
"リクエストのcontextを作成するだけでは、普通は（訳注: インタラクティブな"
"shell以外の主な状況では）リクエストの前に走るコードをまだ走らせていません。"
"これは、もしリクエストの前のcallbackでデータベースに接続している場合には"
"データベースが使えなくなったり、そのときのユーザ（current user）が\ "
":data:`~flask.g`\ オブジェクトなどに格納されなくなったりするなどの結果を"
"招くかもしれません。"

# a2a107dd349643fba2fc8a2df7ef9a5e
#: ../../flask/docs/shell.rst:66
msgid ""
"This however can easily be done yourself.  Just call "
":meth:`~flask.Flask.preprocess_request`:"
msgstr ""
"しかしながら、これはあなた自身によって簡単に実施できます。\ "
":meth:`~flask.Flask.preprocess_request`\ を呼ぶだけです:"

# 830d54719db44ec4b2ac56e15f9aff41
#: ../../flask/docs/shell.rst:73
msgid ""
"Keep in mind that the :meth:`~flask.Flask.preprocess_request` function "
"might return a response object, in that case just ignore it."
msgstr ""
":meth:`~flask.Flask.preprocess_request`\ 関数はレスポンスのオブジェクトを"
"返すかもしれず、その場合には単に無視することを覚えておいてください。"

# 92e0cac282de48f9ae976161201569ab
#: ../../flask/docs/shell.rst:76
msgid ""
"To shutdown a request, you need to trick a bit before the after request "
"functions (triggered by :meth:`~flask.Flask.process_response`) operate on"
" a response object:"
msgstr ""
"リクエストを終わらせるには、終わらせる前にリクエストの後処理関数（the after "
"request functions）（\ :meth:`~flask.Flask.process_response`\ によって"
"引き起こされます）がレスポンスのオブジェクトを操作するように、少し工夫が"
"必要です:"

# 2dd820564c524f0e8cf6741ecefa9b91
#: ../../flask/docs/shell.rst:84
msgid ""
"The functions registered as :meth:`~flask.Flask.teardown_request` are "
"automatically called when the context is popped.  So this is the perfect "
"place to automatically tear down resources that were needed by the "
"request context (such as database connections)."
msgstr ""
":meth:`~flask.Flask.teardown_request`\ として登録された関数は、contextが"
"popされるとき自動的に呼び出されます。従って、これはリクエストのcontextで"
"必要とされていたリソース（例えばデータベース接続）を自動的に取り壊すには"
"完璧な場所です。"

# 05aaed478a304dc89ccb046f99b4e383
#: ../../flask/docs/shell.rst:91
msgid "Further Improving the Shell Experience"
msgstr "Shellでの経験のさらなる改善"

# 201ecbdd78354501b01048a64ca6644a
#: ../../flask/docs/shell.rst:93
msgid ""
"If you like the idea of experimenting in a shell, create yourself a "
"module with stuff you want to star import into your interactive session."
"  There you could also define some more helper methods for common things "
"such as initializing the database, dropping tables etc."
msgstr ""
"もしshellの中で実験するというアイデアが気に入った場合、自分のインタラク"
"ティブなセッションの中にスターimport（訳注: 「*」を使ってモジュール内の"
"関数など一式をまとめてimportすること）をしたくなるものを持ったモジュール"
"を独自に作成してください。そこでは、例えばデータベースの初期化やテーブル"
"の消去などのような、ありがちなものを手助けするメソッドをさらにいくつか"
"定義もできます。"

# 0927380e0ed24cceb6e54ca1620dc032
#: ../../flask/docs/shell.rst:98
msgid "Just put them into a module (like `shelltools`) and import from there:"
msgstr ""
"それらをただ（\ `shelltools`\ のような）モジュールの中へ押し入れ、そこから"
"importします:"
