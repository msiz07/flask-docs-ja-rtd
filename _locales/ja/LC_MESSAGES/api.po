# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-21 20:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

# 8186878dbd8040279c5b8adf15101907
#: ../../flask/docs/api.rst:2
msgid "API"
msgstr ""

# 4237fd1a33f247b59536141c0ac6e33a
#: ../../flask/docs/api.rst:6
msgid ""
"This part of the documentation covers all the interfaces of Flask.  For "
"parts where Flask depends on external libraries, we document the most "
"important right here and provide links to the canonical documentation."
msgstr ""

# dc063d5031a0469db303a79f87f984cf
#: ../../flask/docs/api.rst:12
msgid "Application Object"
msgstr ""

# 921b6cab52a1431eb8ab5802b56be4c5
#: flask.app.Flask:1 of
msgid ""
"The flask object implements a WSGI application and acts as the central "
"object.  It is passed the name of the module or package of the "
"application.  Once it is created it will act as a central registry for "
"the view functions, the URL rules, template configuration and much more."
msgstr ""

# 79a9561235854003aebdadd4bc85ff38
#: flask.app.Flask:6 of
msgid ""
"The name of the package is used to resolve resources from inside the "
"package or the folder the module is contained in depending on if the "
"package parameter resolves to an actual python package (a folder with an "
":file:`__init__.py` file inside) or a standard module (just a ``.py`` "
"file)."
msgstr ""

# 1a2ff17376b54a318c9b908c00bb4912
#: flask.app.Flask:11 of
msgid "For more information about resource loading, see :func:`open_resource`."
msgstr ""

# 6fe473ce347343ffa060d7579f20979b
#: flask.app.Flask:13 of
msgid ""
"Usually you create a :class:`Flask` instance in your main module or in "
"the :file:`__init__.py` file of your package like this::"
msgstr ""

# 62b2228251ba4bbe998cefcee80f96ce
#: flask.app.Flask:19 of
msgid "About the First Parameter"
msgstr ""

# cce5ed8d0f694bccaf2e24374f386888
#: flask.app.Flask:21 of
msgid ""
"The idea of the first parameter is to give Flask an idea of what belongs "
"to your application.  This name is used to find resources on the "
"filesystem, can be used by extensions to improve debugging information "
"and a lot more."
msgstr ""

# 4910df983e8647fd9e724728582d0f7d
#: flask.app.Flask:26 of
msgid ""
"So it's important what you provide there.  If you are using a single "
"module, `__name__` is always the correct value.  If you however are using"
" a package, it's usually recommended to hardcode the name of your package"
" there."
msgstr ""

# a4ea3097615f48f5bb783238ec43db93
#: flask.app.Flask:31 of
msgid ""
"For example if your application is defined in "
":file:`yourapplication/app.py` you should create it with one of the two "
"versions below::"
msgstr ""

# 3916d84bf1464f39be1f5453c3b08d80
#: flask.app.Flask:37 of
msgid ""
"Why is that?  The application will work even with `__name__`, thanks to "
"how resources are looked up.  However it will make debugging more "
"painful.  Certain extensions can make assumptions based on the import "
"name of your application.  For example the Flask-SQLAlchemy extension "
"will look for the code in your application that triggered an SQL query in"
" debug mode.  If the import name is not properly set up, that debugging "
"information is lost.  (For example it would only pick up SQL queries in "
"`yourapplication.app` and not `yourapplication.views.frontend`)"
msgstr ""

# 2fb44aa7f06c46639ae4b7d59b53729b
#: flask.app.Flask:58 of
msgid "The ``host_matching`` and ``static_host`` parameters were added."
msgstr ""

# f4c4b48a842645b692c563418527fac3
#: flask.app.Flask:61 of
msgid ""
"The ``subdomain_matching`` parameter was added. Subdomain matching needs "
"to be enabled manually now. Setting :data:`SERVER_NAME` does not "
"implicitly enable it."
msgstr ""

# d31d0202acc2493b8923de6c075dd8aa
#: flask.app.Flask:55 of
msgid "The `root_path` parameter was added."
msgstr ""

# 5f22c81185ba47cfa81bb497e714ff35
#: flask.app.Flask:51 of
msgid "The `instance_path` and `instance_relative_config` parameters were added."
msgstr ""

# 808962a651ef441f924ded1ee5977d04
#: flask.app.Flask:47 of
msgid ""
"The `static_url_path`, `static_folder`, and `template_folder` parameters "
"were added."
msgstr ""

# e99ebe2b888241ff9f7dbd2fec0fea31
# 4d5f2179ef1546b5b7910f4fc630fac6
# 298f4648092649939247fc8ff04f9f2e
# 8c9e80d5ba264c80b5ee5f11b4964c56
# 81f4368afad84a81992facef5a17603c
# b59a9acb261d49b180d869f42f20544f
# 30bb286147ae48129f5380369b45ec21
# 6fa66514559447d2b3193c42045de2e3
# 2af450442f5f4cc5a3fc858a12665957
# 772fb28176854d55a85a65b568c04c9e
# 8f3bd4bcd88941548383197db8cfe052
# 3af82a4d64c84004a5f4eff6f1f06016
# d0967b3602ef475ba8418afb5067efea
# b739edf623fd4068aeb5e9a247b34038
# ec7e217331494ad8adb024bff96639fd
# 410291c601cf423eaf50c95e1c70aa40
# d2580f88c109494880e4d11f42d41a09
# f6107c432ef4468f98ababe8c3eedb5b
# 45ef32534fed4189bb9d74fa6136696b
# 926e8846f502460f952bfe62eeaa7f53
# abaeea9abbae4afcb182b996f71ec403
# b0848505c8024b23ad9410baf02b6af4
# 5ef76eb3f9cb4cd0aefbcbb12b26208b
# a99cf5c409e34396af670f3736004af0
# fe153e5568fd4e5a8cab26a6724789cf
# 3818aa66c3c14b2eab5353d946223715
# a2801a266e8d44e88126e2e1410e90a8
# 45b8eca97cb54c138efbaa438c07df65
# 02be080e8dd9449790fa3d9354000e3c
# 6bccfcc543f3429b8a20a0ec5a37d6d9
# 140e392868134bbba587611378feafe4
# e9827c501a0249ee98fc7e08f90a371a
# 3eb9875f93864af4a947515d0a0345cc
# 5c7fb98abf644a64a084ef6e708bbe55
# 94b6b0849c34463bbcde5a35c9e19dcc
# ef2bbe52b5f7433e87448af7d87096e7
# 86a09f782abb42d3986290baf4778d13
# a348b15bcdf645c2a5304a40949d347e
# bdaa495ba48f4b9f9760f7e20b20ac3c
# db64fef3642d456e9dae52b71d11ceca
# ebc770b3fc1d405e8af24781094a5353
# 7f1d3a6e6d6949f28c740339a1221179
# 80542e28d5c248109363dd07bf6ade21
# 7c9c7a7073fb46839b47d84ee4360b77
# 83440d92ff074d3cadf06db7edaa1789
# 1f9d49425c6249babafd4c2b804cf7b9
# 0cdc9b26387e4fb5b0616ac6659ea13c
# 237f7ff2140b4d83ac0ac49b7525b3de
# 526133ed95ed403c9ceaa166df787441
# 1b36f722d85e46da91d32fd98ecdbfd7
# 5bb5efab79604d9eaeba4b5f2563e6d3
# 26e3076b7821490d8a4d0bd447c40c34
# 0a26f3de55284b46b33b0e32719de424
# ac219e752f134ab3ad7d69614c6cc604
# 5047a2a2731d4e0a828828007563364e
# 424988fd55944e6c9728b5bb054fcce2
# fe530424788e48ed8f61e97a0fd039a2
# d31ab96968044ddb9de5f3f9c203e44d
# ed29579a441d4b29b67b184c4e55cb44
# 303be8131dde4ed9a2398a1db81f5787
# ec3a16fdb2ee43c6a9f3b713a379d5c9
# 98538c543c054ec4b9366273fa326435
# 20434810ae1243b48f6db5d8e74def4e
# 16ceb22fa14546dd81f84883c98a929b
#: ../../docstring ../../flask/docs/api.rst flask.app.Flask
#: flask.app.Flask.add_template_filter flask.app.Flask.add_template_global
#: flask.app.Flask.add_template_test flask.app.Flask.add_url_rule
#: flask.app.Flask.async_to_sync flask.app.Flask.before_first_request
#: flask.app.Flask.create_url_adapter flask.app.Flask.do_teardown_appcontext
#: flask.app.Flask.do_teardown_request flask.app.Flask.ensure_sync
#: flask.app.Flask.finalize_request flask.app.Flask.handle_exception
#: flask.app.Flask.handle_http_exception flask.app.Flask.handle_url_build_error
#: flask.app.Flask.handle_user_exception flask.app.Flask.inject_url_defaults
#: flask.app.Flask.log_exception flask.app.Flask.make_config
#: flask.app.Flask.make_response flask.app.Flask.open_instance_resource
#: flask.app.Flask.process_response flask.app.Flask.raise_routing_exception
#: flask.app.Flask.register_blueprint flask.app.Flask.request_context
#: flask.app.Flask.run flask.app.Flask.select_jinja_autoescape
#: flask.app.Flask.shell_context_processor flask.app.Flask.should_ignore_error
#: flask.app.Flask.teardown_appcontext flask.app.Flask.template_filter
#: flask.app.Flask.template_global flask.app.Flask.template_test
#: flask.app.Flask.test_cli_runner flask.app.Flask.test_client
#: flask.app.Flask.test_request_context flask.app.Flask.trap_http_exception
#: flask.app.Flask.update_template_context flask.app.Flask.wsgi_app
#: flask.blueprints.Blueprint
#: flask.blueprints.Blueprint.add_app_template_filter
#: flask.blueprints.Blueprint.add_app_template_global
#: flask.blueprints.Blueprint.add_app_template_test
#: flask.blueprints.Blueprint.add_url_rule
#: flask.blueprints.Blueprint.after_app_request
#: flask.blueprints.Blueprint.app_context_processor
#: flask.blueprints.Blueprint.app_errorhandler
#: flask.blueprints.Blueprint.app_template_filter
#: flask.blueprints.Blueprint.app_template_global
#: flask.blueprints.Blueprint.app_template_test
#: flask.blueprints.Blueprint.app_url_defaults
#: flask.blueprints.Blueprint.app_url_value_preprocessor
#: flask.blueprints.Blueprint.before_app_first_request
#: flask.blueprints.Blueprint.before_app_request
#: flask.blueprints.Blueprint.make_setup_state
#: flask.blueprints.Blueprint.record flask.blueprints.Blueprint.record_once
#: flask.blueprints.Blueprint.register
#: flask.blueprints.Blueprint.register_blueprint
#: flask.blueprints.Blueprint.teardown_app_request
#: flask.blueprints.BlueprintSetupState
#: flask.blueprints.BlueprintSetupState.add_url_rule flask.cli.AppGroup
#: flask.cli.FlaskGroup flask.cli.FlaskGroup.main flask.cli.load_dotenv
#: flask.cli.run_command flask.cli.shell_command flask.config.Config
#: flask.config.Config.from_envvar flask.config.Config.from_file
#: flask.config.Config.from_json flask.config.Config.from_mapping
#: flask.config.Config.from_object flask.config.Config.from_pyfile
#: flask.config.Config.get_namespace flask.ctx.AppContext
#: flask.ctx.AppContext.pop flask.ctx.RequestContext
#: flask.ctx.RequestContext.pop flask.ctx._AppCtxGlobals.get
#: flask.ctx._AppCtxGlobals.pop flask.ctx._AppCtxGlobals.setdefault
#: flask.ctx.after_this_request flask.ctx.copy_current_request_context
#: flask.helpers.flash flask.helpers.get_flashed_messages
#: flask.helpers.get_template_attribute flask.helpers.make_response
#: flask.helpers.safe_join flask.helpers.send_file
#: flask.helpers.send_from_directory flask.helpers.stream_with_context
#: flask.helpers.url_for flask.json.JSONEncoder.default flask.json.dump
#: flask.json.dumps flask.json.jsonify flask.json.load flask.json.loads
#: flask.json.tag.JSONTag flask.json.tag.JSONTag.check
#: flask.json.tag.JSONTag.tag flask.json.tag.JSONTag.to_json
#: flask.json.tag.JSONTag.to_python flask.json.tag.TaggedJSONSerializer.dumps
#: flask.json.tag.TaggedJSONSerializer.loads
#: flask.json.tag.TaggedJSONSerializer.register
#: flask.json.tag.TaggedJSONSerializer.tag
#: flask.json.tag.TaggedJSONSerializer.untag
#: flask.scaffold.Scaffold.after_request flask.scaffold.Scaffold.before_request
#: flask.scaffold.Scaffold.context_processor flask.scaffold.Scaffold.delete
#: flask.scaffold.Scaffold.endpoint flask.scaffold.Scaffold.errorhandler
#: flask.scaffold.Scaffold.get flask.scaffold.Scaffold.get_send_file_max_age
#: flask.scaffold.Scaffold.open_resource flask.scaffold.Scaffold.patch
#: flask.scaffold.Scaffold.post flask.scaffold.Scaffold.put
#: flask.scaffold.Scaffold.register_error_handler flask.scaffold.Scaffold.route
#: flask.scaffold.Scaffold.send_static_file
#: flask.scaffold.Scaffold.teardown_request
#: flask.scaffold.Scaffold.url_defaults
#: flask.scaffold.Scaffold.url_value_preprocessor flask.sessions.NullSession
#: flask.sessions.SecureCookieSession flask.sessions.SecureCookieSession.get
#: flask.sessions.SecureCookieSession.setdefault
#: flask.sessions.SecureCookieSessionInterface.open_session
#: flask.sessions.SecureCookieSessionInterface.save_session
#: flask.sessions.SessionInterface.get_cookie_domain
#: flask.sessions.SessionInterface.get_cookie_httponly
#: flask.sessions.SessionInterface.get_cookie_name
#: flask.sessions.SessionInterface.get_cookie_path
#: flask.sessions.SessionInterface.get_cookie_samesite
#: flask.sessions.SessionInterface.get_cookie_secure
#: flask.sessions.SessionInterface.get_expiration_time
#: flask.sessions.SessionInterface.is_null_session
#: flask.sessions.SessionInterface.make_null_session
#: flask.sessions.SessionInterface.open_session
#: flask.sessions.SessionInterface.save_session
#: flask.sessions.SessionInterface.should_set_cookie
#: flask.templating.render_template flask.templating.render_template_string
#: flask.testing.FlaskCliRunner flask.testing.FlaskCliRunner.invoke
#: flask.testing.FlaskClient flask.testing.FlaskClient.open
#: flask.testing.FlaskClient.session_transaction
#: flask.views.MethodView.dispatch_request flask.views.View.as_view
#: flask.wrappers.Request flask.wrappers.Request.on_json_loading_failed
#: flask.wrappers.Response markupsafe.Markup markupsafe.Markup.escape
#: markupsafe._speedups.escape of werkzeug.exceptions.abort
#: werkzeug.sansio.response.Response.delete_cookie
#: werkzeug.sansio.response.Response.set_cookie
#: werkzeug.sansio.response.Response.set_etag werkzeug.utils.redirect
#: werkzeug.wrappers.request.Request.application
#: werkzeug.wrappers.request.Request.from_values
#: werkzeug.wrappers.request.Request.get_data
#: werkzeug.wrappers.request.Request.get_json
#: werkzeug.wrappers.response.Response.add_etag
#: werkzeug.wrappers.response.Response.call_on_close
#: werkzeug.wrappers.response.Response.force_type
#: werkzeug.wrappers.response.Response.freeze
#: werkzeug.wrappers.response.Response.from_app
#: werkzeug.wrappers.response.Response.get_app_iter
#: werkzeug.wrappers.response.Response.get_data
#: werkzeug.wrappers.response.Response.get_json
#: werkzeug.wrappers.response.Response.get_wsgi_headers
#: werkzeug.wrappers.response.Response.get_wsgi_response
#: werkzeug.wrappers.response.Response.make_conditional
#: werkzeug.wrappers.response.Response.set_data
msgid "Parameters"
msgstr ""

# 67504cd3d044450c96bdfcd065d4b10b
#: flask.app.Flask:66 of
msgid "the name of the application package"
msgstr ""

# a3477e58a34a4feea10dd4e7643886a8
#: flask.app.Flask:67 of
msgid ""
"can be used to specify a different path for the static files on the web."
"  Defaults to the name of the `static_folder` folder."
msgstr ""

#: flask.app.Flask:70 of
msgid ""
"The folder with static files that is served at ``static_url_path``. "
"Relative to the application ``root_path`` or an absolute path. Defaults "
"to ``'static'``."
msgstr ""

# d6a247578b38406bb307447077dc91f1
#: flask.app.Flask:73 of
msgid ""
"the host to use when adding the static route. Defaults to None. Required "
"when using ``host_matching=True`` with a ``static_folder`` configured."
msgstr ""

# f37ad4c2a8074476a3ed7515379bd3b8
#: flask.app.Flask:76 of
msgid "set ``url_map.host_matching`` attribute. Defaults to False."
msgstr ""

# f397b87b11534f9ba286d34d4538bee7
#: flask.app.Flask:78 of
msgid ""
"consider the subdomain relative to :data:`SERVER_NAME` when matching "
"routes. Defaults to False."
msgstr ""

# 05654e74861d457ba2828fe913a68381
#: flask.app.Flask:80 of
msgid ""
"the folder that contains the templates that should be used by the "
"application.  Defaults to ``'templates'`` folder in the root path of the "
"application."
msgstr ""

# a674ca2c17584cb0a63f156e366b69c3
#: flask.app.Flask:84 of
msgid ""
"An alternative instance path for the application. By default the folder "
"``'instance'`` next to the package or module is assumed to be the "
"instance path."
msgstr ""

# fa6abbac42c942608d8918bcf3d6dbd5
#: flask.app.Flask:88 of
msgid ""
"if set to ``True`` relative filenames for loading the config are assumed "
"to be relative to the instance path instead of the application root."
msgstr ""

#: flask.app.Flask:92 of
msgid ""
"The path to the root of the application files. This should only be set "
"manually when it can't be detected automatically, such as for namespace "
"packages."
msgstr ""

# 2f2100254cd04100a78384da014d361b
#: flask.app.Flask.add_template_filter:1 of
msgid ""
"Register a custom template filter.  Works exactly like the "
":meth:`template_filter` decorator."
msgstr ""

# 46a8ebfcc403440594da3580f1559abb
# b0e98bb8d68a4e7fbdd91001eee412d8
# d7571117e17849c6a37a3cdea77459d3
# a2782ba979274ac28c75911f4bddde2f
#: flask.app.Flask.add_template_filter:4 flask.app.Flask.template_filter:9
#: flask.blueprints.Blueprint.add_app_template_filter:5
#: flask.blueprints.Blueprint.app_template_filter:4 of
msgid "the optional name of the filter, otherwise the function name will be used."
msgstr ""

# cff7fb01a6064418ab2d8d9e3c4243d8
# a8db2e5b0b3c419296342e91723b83c1
# c5176cadb0f14f6a9dda6d500fb8f06b
# c66d121e648d40eea530b7b9ac61d004
#: ../../docstring ../../flask/docs/api.rst flask.Request.if_match
#: flask.Request.if_none_match flask.Request.range
#: flask.app.Flask.add_template_filter flask.app.Flask.add_template_global
#: flask.app.Flask.add_template_test flask.app.Flask.add_url_rule
#: flask.app.Flask.app_context flask.app.Flask.async_to_sync
#: flask.app.Flask.auto_find_instance_path flask.app.Flask.before_first_request
#: flask.app.Flask.create_global_jinja_loader
#: flask.app.Flask.create_jinja_environment flask.app.Flask.create_url_adapter
#: flask.app.Flask.dispatch_request flask.app.Flask.do_teardown_appcontext
#: flask.app.Flask.do_teardown_request flask.app.Flask.ensure_sync
#: flask.app.Flask.finalize_request flask.app.Flask.full_dispatch_request
#: flask.app.Flask.handle_exception flask.app.Flask.handle_http_exception
#: flask.app.Flask.handle_url_build_error flask.app.Flask.handle_user_exception
#: flask.app.Flask.inject_url_defaults flask.app.Flask.iter_blueprints
#: flask.app.Flask.log_exception flask.app.Flask.make_config
#: flask.app.Flask.make_default_options_response flask.app.Flask.make_response
#: flask.app.Flask.make_shell_context flask.app.Flask.open_instance_resource
#: flask.app.Flask.preprocess_request flask.app.Flask.process_response
#: flask.app.Flask.raise_routing_exception flask.app.Flask.register_blueprint
#: flask.app.Flask.request_context flask.app.Flask.run
#: flask.app.Flask.select_jinja_autoescape
#: flask.app.Flask.shell_context_processor flask.app.Flask.should_ignore_error
#: flask.app.Flask.teardown_appcontext flask.app.Flask.template_filter
#: flask.app.Flask.template_global flask.app.Flask.template_test
#: flask.app.Flask.test_cli_runner flask.app.Flask.test_client
#: flask.app.Flask.test_request_context flask.app.Flask.trap_http_exception
#: flask.app.Flask.try_trigger_before_first_request_functions
#: flask.app.Flask.update_template_context flask.app.Flask.wsgi_app
#: flask.blueprints.Blueprint.add_app_template_filter
#: flask.blueprints.Blueprint.add_app_template_global
#: flask.blueprints.Blueprint.add_app_template_test
#: flask.blueprints.Blueprint.add_url_rule
#: flask.blueprints.Blueprint.after_app_request
#: flask.blueprints.Blueprint.app_context_processor
#: flask.blueprints.Blueprint.app_errorhandler
#: flask.blueprints.Blueprint.app_template_filter
#: flask.blueprints.Blueprint.app_template_global
#: flask.blueprints.Blueprint.app_template_test
#: flask.blueprints.Blueprint.app_url_defaults
#: flask.blueprints.Blueprint.app_url_value_preprocessor
#: flask.blueprints.Blueprint.before_app_first_request
#: flask.blueprints.Blueprint.before_app_request
#: flask.blueprints.Blueprint.make_setup_state
#: flask.blueprints.Blueprint.record flask.blueprints.Blueprint.record_once
#: flask.blueprints.Blueprint.register
#: flask.blueprints.Blueprint.register_blueprint
#: flask.blueprints.Blueprint.teardown_app_request
#: flask.blueprints.BlueprintSetupState
#: flask.blueprints.BlueprintSetupState.add_url_rule flask.cli.AppGroup
#: flask.cli.run_command flask.cli.shell_command flask.config.Config
#: flask.config.Config.from_envvar flask.config.Config.from_file
#: flask.config.Config.from_json flask.config.Config.from_mapping
#: flask.config.Config.from_object flask.config.Config.from_pyfile
#: flask.config.Config.get_namespace flask.ctx.AppContext
#: flask.ctx.AppContext.pop flask.ctx.AppContext.push flask.ctx.RequestContext
#: flask.ctx.RequestContext.copy flask.ctx.RequestContext.match_request
#: flask.ctx.RequestContext.pop flask.ctx.RequestContext.push
#: flask.ctx._AppCtxGlobals.get flask.ctx._AppCtxGlobals.pop
#: flask.ctx._AppCtxGlobals.setdefault flask.ctx.after_this_request
#: flask.ctx.copy_current_request_context flask.ctx.has_app_context
#: flask.ctx.has_request_context flask.helpers.flash
#: flask.helpers.get_flashed_messages flask.helpers.get_template_attribute
#: flask.helpers.make_response flask.helpers.safe_join
#: flask.helpers.send_from_directory flask.helpers.stream_with_context
#: flask.helpers.url_for flask.json.JSONEncoder.default flask.json.dump
#: flask.json.dumps flask.json.jsonify flask.json.load flask.json.loads
#: flask.json.tag.JSONTag flask.json.tag.JSONTag.check
#: flask.json.tag.JSONTag.tag flask.json.tag.JSONTag.to_json
#: flask.json.tag.JSONTag.to_python flask.json.tag.TaggedJSONSerializer
#: flask.json.tag.TaggedJSONSerializer.dumps
#: flask.json.tag.TaggedJSONSerializer.loads
#: flask.json.tag.TaggedJSONSerializer.register
#: flask.json.tag.TaggedJSONSerializer.tag
#: flask.json.tag.TaggedJSONSerializer.untag
#: flask.scaffold.Scaffold.after_request flask.scaffold.Scaffold.before_request
#: flask.scaffold.Scaffold.context_processor flask.scaffold.Scaffold.delete
#: flask.scaffold.Scaffold.endpoint flask.scaffold.Scaffold.errorhandler
#: flask.scaffold.Scaffold.get flask.scaffold.Scaffold.get_send_file_max_age
#: flask.scaffold.Scaffold.open_resource flask.scaffold.Scaffold.patch
#: flask.scaffold.Scaffold.post flask.scaffold.Scaffold.put
#: flask.scaffold.Scaffold.register_error_handler flask.scaffold.Scaffold.route
#: flask.scaffold.Scaffold.send_static_file
#: flask.scaffold.Scaffold.teardown_request
#: flask.scaffold.Scaffold.url_defaults
#: flask.scaffold.Scaffold.url_value_preprocessor flask.sessions.NullSession
#: flask.sessions.SecureCookieSession flask.sessions.SecureCookieSession.get
#: flask.sessions.SecureCookieSession.setdefault
#: flask.sessions.SecureCookieSessionInterface.open_session
#: flask.sessions.SecureCookieSessionInterface.save_session
#: flask.sessions.SessionInterface.get_cookie_domain
#: flask.sessions.SessionInterface.get_cookie_httponly
#: flask.sessions.SessionInterface.get_cookie_name
#: flask.sessions.SessionInterface.get_cookie_path
#: flask.sessions.SessionInterface.get_cookie_samesite
#: flask.sessions.SessionInterface.get_cookie_secure
#: flask.sessions.SessionInterface.get_expiration_time
#: flask.sessions.SessionInterface.is_null_session
#: flask.sessions.SessionInterface.make_null_session
#: flask.sessions.SessionInterface.open_session
#: flask.sessions.SessionInterface.save_session
#: flask.sessions.SessionInterface.should_set_cookie
#: flask.templating.render_template flask.templating.render_template_string
#: flask.testing.FlaskCliRunner flask.testing.FlaskCliRunner.invoke
#: flask.testing.FlaskClient flask.testing.FlaskClient.open
#: flask.testing.FlaskClient.session_transaction
#: flask.views.MethodView.dispatch_request flask.views.View.as_view
#: flask.views.View.dispatch_request flask.wrappers.Request
#: flask.wrappers.Request.on_json_loading_failed flask.wrappers.Response
#: markupsafe.Markup markupsafe.Markup.escape markupsafe.Markup.striptags
#: markupsafe.Markup.unescape of werkzeug.exceptions.abort
#: werkzeug.sansio.response.Response.delete_cookie
#: werkzeug.sansio.response.Response.get_etag
#: werkzeug.sansio.response.Response.set_cookie
#: werkzeug.sansio.response.Response.set_etag werkzeug.utils.redirect
#: werkzeug.wrappers.request.Request.application
#: werkzeug.wrappers.request.Request.close
#: werkzeug.wrappers.request.Request.from_values
#: werkzeug.wrappers.request.Request.get_data
#: werkzeug.wrappers.request.Request.get_json
#: werkzeug.wrappers.request.Request.make_form_data_parser
#: werkzeug.wrappers.response.Response.add_etag
#: werkzeug.wrappers.response.Response.calculate_content_length
#: werkzeug.wrappers.response.Response.call_on_close
#: werkzeug.wrappers.response.Response.close
#: werkzeug.wrappers.response.Response.force_type
#: werkzeug.wrappers.response.Response.freeze
#: werkzeug.wrappers.response.Response.from_app
#: werkzeug.wrappers.response.Response.get_app_iter
#: werkzeug.wrappers.response.Response.get_data
#: werkzeug.wrappers.response.Response.get_json
#: werkzeug.wrappers.response.Response.get_wsgi_headers
#: werkzeug.wrappers.response.Response.get_wsgi_response
#: werkzeug.wrappers.response.Response.iter_encoded
#: werkzeug.wrappers.response.Response.make_conditional
#: werkzeug.wrappers.response.Response.make_sequence
#: werkzeug.wrappers.response.Response.set_data
msgid "Return type"
msgstr ""

# 83f5ef148ac141adb03ddd4d50087a09
#: flask.app.Flask.add_template_global:1 of
msgid ""
"Register a custom template global function. Works exactly like the "
":meth:`template_global` decorator."
msgstr ""

# db318b46bb6741ac91aaff8342e28ece
# 9e5b39ed1bab4ace90624a3bcef14345
#: flask.app.Flask.add_template_global:6 flask.app.Flask.template_global:11 of
msgid ""
"the optional name of the global function, otherwise the function name "
"will be used."
msgstr ""

# ec7c1c19fcbf4fb58cf8829b4a2ed269
#: flask.app.Flask.add_template_test:1 of
msgid ""
"Register a custom template test.  Works exactly like the "
":meth:`template_test` decorator."
msgstr ""

# 2e4dfd18e335427082162f973fd845b0
# b330ac25f38b4cada6136f3a27698392
# 73e85331de654f6098737ad9f6c1b363
# ca2f24d53f9542049b3d30c023d6d9de
#: flask.app.Flask.add_template_test:6 flask.app.Flask.template_test:16
#: flask.blueprints.Blueprint.add_app_template_test:7
#: flask.blueprints.Blueprint.app_template_test:6 of
msgid "the optional name of the test, otherwise the function name will be used."
msgstr ""

#: flask.app.Flask.add_url_rule:1 of
msgid ""
"Register a rule for routing incoming requests and building URLs. The "
":meth:`route` decorator is a shortcut to call this with the ``view_func``"
" argument. These are equivalent:"
msgstr ""

#: flask.app.Flask.add_url_rule:18 flask.scaffold.Scaffold.route:11 of
msgid "See :ref:`url-route-registrations`."
msgstr ""

#: flask.app.Flask.add_url_rule:20 of
msgid ""
"The endpoint name for the route defaults to the name of the view function"
" if the ``endpoint`` parameter isn't passed. An error will be raised if a"
" function has already been registered for the endpoint."
msgstr ""

#: flask.app.Flask.add_url_rule:25 of
msgid ""
"The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is always "
"added automatically, and ``OPTIONS`` is added automatically by default."
msgstr ""

#: flask.app.Flask.add_url_rule:29 of
msgid ""
"``view_func`` does not necessarily need to be passed, but if the rule "
"should participate in routing an endpoint name must be associated with a "
"view function at some point with the :meth:`endpoint` decorator."
msgstr ""

#: flask.app.Flask.add_url_rule:42 of
msgid ""
"If ``view_func`` has a ``required_methods`` attribute, those methods are "
"added to the passed and automatic methods. If it has a "
"``provide_automatic_methods`` attribute, it is used as the default if the"
" parameter is not passed."
msgstr ""

#: flask.app.Flask.add_url_rule:47 flask.scaffold.Scaffold.route:19 of
msgid "The URL rule string."
msgstr ""

#: flask.app.Flask.add_url_rule:48 of
msgid ""
"The endpoint name to associate with the rule and view function. Used when"
" routing and building URLs. Defaults to ``view_func.__name__``."
msgstr ""

#: flask.app.Flask.add_url_rule:51 of
msgid "The view function to associate with the endpoint name."
msgstr ""

#: flask.app.Flask.add_url_rule:53 of
msgid ""
"Add the ``OPTIONS`` method and respond to ``OPTIONS`` requests "
"automatically."
msgstr ""

#: flask.app.Flask.add_url_rule:55 flask.scaffold.Scaffold.route:20 of
msgid "Extra options passed to the :class:`~werkzeug.routing.Rule` object."
msgstr ""

#: flask.scaffold.Scaffold.after_request:1 of
msgid "Register a function to run after each request to this object."
msgstr ""

#: flask.scaffold.Scaffold.after_request:3 of
msgid ""
"The function is called with the response object, and must return a "
"response object. This allows the functions to modify or replace the "
"response before it is sent."
msgstr ""

#: flask.scaffold.Scaffold.after_request:7 of
msgid ""
"If a function raises an exception, any remaining ``after_request`` "
"functions will not be called. Therefore, this should not be used for "
"actions that must execute, such as to close resources. Use "
":meth:`teardown_request` for that."
msgstr ""

#: ../../docstring flask.Blueprint.after_request_funcs:1
#: flask.Flask.after_request_funcs:1 of
msgid ""
"A data structure of functions to call at the end of each request, in the "
"format ``{scope: [functions]}``. The ``scope`` key is the name of a "
"blueprint the functions are active for, or ``None`` for all requests."
msgstr ""

#: ../../docstring flask.Blueprint.after_request_funcs:6
#: flask.Flask.after_request_funcs:6 of
msgid "To register a function, use the :meth:`after_request` decorator."
msgstr ""

#: ../../docstring flask.Blueprint.after_request_funcs:9
#: flask.Blueprint.before_request_funcs:9 flask.Blueprint.error_handler_spec:12
#: flask.Blueprint.teardown_request_funcs:10
#: flask.Blueprint.template_context_processors:10
#: flask.Blueprint.url_default_functions:10
#: flask.Blueprint.url_value_preprocessors:10 flask.Blueprint.view_functions:5
#: flask.Flask.after_request_funcs:9 flask.Flask.before_request_funcs:9
#: flask.Flask.error_handler_spec:12 flask.Flask.teardown_request_funcs:10
#: flask.Flask.template_context_processors:10
#: flask.Flask.url_default_functions:10 flask.Flask.url_value_preprocessors:10
#: flask.Flask.view_functions:5 of
msgid ""
"This data structure is internal. It should not be modified directly and "
"its format may change at any time."
msgstr ""

# e512123826e943b9b88c745ed4df3e64
#: flask.app.Flask.app_context:1 of
msgid ""
"Create an :class:`~flask.ctx.AppContext`. Use as a ``with`` block to push"
" the context, which will make :data:`current_app` point at this "
"application."
msgstr ""

# fea9e1bd935f49f8aea190fb266b843d
#: flask.app.Flask.app_context:5 of
msgid ""
"An application context is automatically pushed by "
":meth:`RequestContext.push() <flask.ctx.RequestContext.push>` when "
"handling a request, and when running a CLI command. Use this to manually "
"create a context outside of these situations."
msgstr ""

# 2468903b9cf5449ab0edefef92b8e862
#: flask.app.Flask.app_context:15 of
msgid "See :doc:`/appcontext`."
msgstr ""

#: flask.app.Flask.async_to_sync:1 of
msgid "Return a sync function that will run the coroutine function."
msgstr ""

#: flask.app.Flask.async_to_sync:7 of
msgid ""
"Override this method to change how the app converts async code to be "
"synchronously callable."
msgstr ""

# cff92552d00e4ac4879c315c18f61d39
#: flask.app.Flask.auto_find_instance_path:1 of
msgid ""
"Tries to locate the instance path if it was not provided to the "
"constructor of the application class.  It will basically calculate the "
"path to a folder named ``instance`` next to your main file or the "
"package."
msgstr ""

# c8eccbb8f44f47ddbe4e821c8aaea261
#: flask.app.Flask.before_first_request:1 of
msgid ""
"Registers a function to be run before the first request to this instance "
"of the application."
msgstr ""

# cff2bdf32cd34c53af4b45fd0efa9a79
#: flask.app.Flask.before_first_request:4 of
msgid ""
"The function will be called without any arguments and its return value is"
" ignored."
msgstr ""

# b61f2fc73e22442eb048c6a94ee8d4b9
#: ../../docstring flask.Flask.before_first_request_funcs:1 of
msgid ""
"A list of functions that will be called at the beginning of the first "
"request to this instance. To register a function, use the "
":meth:`before_first_request` decorator."
msgstr ""

#: flask.scaffold.Scaffold.before_request:1 of
msgid "Register a function to run before each request."
msgstr ""

# 8e96ad9b5b5742c9a4f705bbac8c5e9d
#: flask.scaffold.Scaffold.before_request:3 of
msgid ""
"For example, this can be used to open a database connection, or to load "
"the logged in user from the session."
msgstr ""

#: flask.scaffold.Scaffold.before_request:13 of
msgid ""
"The function will be called without any arguments. If it returns a "
"non-``None`` value, the value is handled as if it was the return value "
"from the view, and further request handling is stopped."
msgstr ""

#: ../../docstring flask.Blueprint.before_request_funcs:1
#: flask.Flask.before_request_funcs:1 of
msgid ""
"A data structure of functions to call at the beginning of each request, "
"in the format ``{scope: [functions]}``. The ``scope`` key is the name of "
"a blueprint the functions are active for, or ``None`` for all requests."
msgstr ""

#: ../../docstring flask.Blueprint.before_request_funcs:6
#: flask.Flask.before_request_funcs:6 of
msgid "To register a function, use the :meth:`before_request` decorator."
msgstr ""

#: ../../docstring flask.Flask.blueprints:1 of
msgid ""
"Maps registered blueprint names to blueprint objects. The dict retains "
"the order the blueprints were registered in. Blueprints can be registered"
" multiple times, this dict does not track how often they were attached."
msgstr ""

#: ../../docstring flask.Blueprint.cli:1 flask.Flask.cli:1 of
msgid ""
"The Click command group for registering CLI commands for this object. The"
" commands are available from the ``flask`` command once the application "
"has been discovered and blueprints have been registered."
msgstr ""

# 22551b4cfa484da49f6e469eab609cc7
#: ../../docstring flask.Flask.config:1 of
msgid ""
"The configuration dictionary as :class:`Config`.  This behaves exactly "
"like a regular dictionary but supports additional methods to load a "
"config from files."
msgstr ""

# 6a90440f536d4345a3d6036194afb771
#: flask.scaffold.Scaffold.context_processor:1 of
msgid "Registers a template context processor function."
msgstr ""

# ec27aa158784490a9ce7256551d89aae
#: flask.app.Flask.create_global_jinja_loader:1 of
msgid ""
"Creates the loader for the Jinja2 environment.  Can be used to override "
"just the loader and keeping the rest unchanged.  It's discouraged to "
"override this function.  Instead one should override the "
":meth:`jinja_loader` function instead."
msgstr ""

# 37bde5e59bbf41649d4eabb99303bbfa
#: flask.app.Flask.create_global_jinja_loader:6 of
msgid ""
"The global loader dispatches between the loaders of the application and "
"the individual blueprints."
msgstr ""

# 1ede55378ed24318afbf18fc8b43bb0d
#: flask.app.Flask.create_jinja_environment:1 of
msgid ""
"Create the Jinja environment based on :attr:`jinja_options` and the "
"various Jinja-related methods of the app. Changing :attr:`jinja_options` "
"after this will have no effect. Also adds Flask-related globals and "
"filters to the environment."
msgstr ""

# 6f91f9cdfdf6498cad1a9c3b0844c563
#: flask.app.Flask.create_jinja_environment:6 of
msgid ""
"``Environment.auto_reload`` set in accordance with "
"``TEMPLATES_AUTO_RELOAD`` configuration option."
msgstr ""

# 5226fb56071b4912be840c32442042e2
#: flask.app.Flask.create_url_adapter:1 of
msgid ""
"Creates a URL adapter for the given request. The URL adapter is created "
"at a point where the request context is not yet set up so the request is "
"passed explicitly."
msgstr ""

# e569eea148a04882a7d4c08f7a918250
#: flask.app.Flask.create_url_adapter:11 of
msgid ""
":data:`SERVER_NAME` no longer implicitly enables subdomain matching. Use "
":attr:`subdomain_matching` instead."
msgstr ""

# b996eec2a93746a48aa0eaf040fd4c08
#: flask.app.Flask.create_url_adapter:7 of
msgid ""
"This can now also be called without a request object when the URL adapter"
" is created for the application context."
msgstr ""

# ab68b39338a2463b91625afadbdbd5af
#: flask.Flask.debug:1 of
msgid ""
"Whether debug mode is enabled. When using ``flask run`` to start the "
"development server, an interactive debugger will be shown for unhandled "
"exceptions, and the server will be reloaded when code changes. This maps "
"to the :data:`DEBUG` config key. This is enabled when :attr:`env` is "
"``'development'`` and is overridden by the ``FLASK_DEBUG`` environment "
"variable. It may not behave as expected if set in code."
msgstr ""

# a47b20b4e6844b2ba7ee438861a23d43
#: flask.Flask.debug:9 of
msgid "**Do not enable debug mode when deploying in production.**"
msgstr ""

# 6226479bc4044325b2501069bcc80033
#: flask.Flask.debug:11 of
msgid ""
"Default: ``True`` if :attr:`env` is ``'development'``, or ``False`` "
"otherwise."
msgstr ""

# 288b0bc3ca8b4fe38cf0e4d22fec23f4
#: ../../docstring flask.Flask.default_config:1 of
msgid "Default configuration parameters."
msgstr ""

#: flask.scaffold.Scaffold.delete:1 of
msgid "Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``."
msgstr ""

# 25dd293f47a54e4392c77c214cfaee5a
#: flask.app.Flask.dispatch_request:1 of
msgid ""
"Does the request dispatching.  Matches the URL and returns the return "
"value of the view or error handler.  This does not have to be a response "
"object.  In order to convert the return value to a proper response "
"object, call :func:`make_response`."
msgstr ""

# 17bbe03aff44420488456453bbad0e8f
#: flask.app.Flask.dispatch_request:6 of
msgid ""
"This no longer does the exception handling, this code was moved to the "
"new :meth:`full_dispatch_request`."
msgstr ""

# c7031030a2f741a78fac8b429b37f6b3
#: flask.app.Flask.do_teardown_appcontext:1 of
msgid "Called right before the application context is popped."
msgstr ""

# 9962d203bc49441facf64cf8b7b1a548
#: flask.app.Flask.do_teardown_appcontext:3 of
msgid ""
"When handling a request, the application context is popped after the "
"request context. See :meth:`do_teardown_request`."
msgstr ""

# c9362407fc774c07ace748866c91f211
#: flask.app.Flask.do_teardown_appcontext:6 of
msgid ""
"This calls all functions decorated with :meth:`teardown_appcontext`. Then"
" the :data:`appcontext_tearing_down` signal is sent."
msgstr ""

# 1c118f12d68f44cc900d4ef4ff39af73
#: flask.app.Flask.do_teardown_appcontext:10 of
msgid "This is called by :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`."
msgstr ""

# 08b960c996444bd9919c084978f438cc
#: flask.app.Flask.do_teardown_request:1 of
msgid ""
"Called after the request is dispatched and the response is returned, "
"right before the request context is popped."
msgstr ""

# 0d9d7e7d6bb94399b32ba91c58a8d748
#: flask.app.Flask.do_teardown_request:4 of
msgid ""
"This calls all functions decorated with :meth:`teardown_request`, and "
":meth:`Blueprint.teardown_request` if a blueprint handled the request. "
"Finally, the :data:`request_tearing_down` signal is sent."
msgstr ""

# 40fd317669a44657be5f8b29f9a5ae08
#: flask.app.Flask.do_teardown_request:9 of
msgid ""
"This is called by :meth:`RequestContext.pop() "
"<flask.ctx.RequestContext.pop>`, which may be delayed during testing to "
"maintain access to resources."
msgstr ""

# 50d0eb2fe3194e3dbe71f82b6246815d
#: flask.app.Flask.do_teardown_request:14 of
msgid ""
"An unhandled exception raised while dispatching the request. Detected "
"from the current exception information if not passed. Passed to each "
"teardown function."
msgstr ""

# 975a6cc100fb45648d20f9732b450fe3
#: flask.app.Flask.do_teardown_request:18 of
msgid "Added the ``exc`` argument."
msgstr ""

#: flask.scaffold.Scaffold.endpoint:1 of
msgid ""
"Decorate a view function to register it for the given endpoint. Used if a"
" rule is added without a ``view_func`` with :meth:`add_url_rule`."
msgstr ""

#: flask.scaffold.Scaffold.endpoint:13 of
msgid "The endpoint name to associate with the view function."
msgstr ""

#: flask.app.Flask.ensure_sync:1 of
msgid ""
"Ensure that the function is synchronous for WSGI workers. Plain ``def`` "
"functions are returned as-is. ``async def`` functions are wrapped to run "
"and wait for the response."
msgstr ""

#: flask.app.Flask.ensure_sync:5 of
msgid "Override this method to change how the app runs async views."
msgstr ""

# 75bc18c0fcea4894b8c0ceae09fdcf7f
#: ../../docstring flask.Flask.env:1 of
msgid ""
"What environment the app is running in. Flask and extensions may enable "
"behaviors based on the environment, such as enabling debug mode. This "
"maps to the :data:`ENV` config key. This is set by the "
":envvar:`FLASK_ENV` environment variable and may not behave as expected "
"if set in code."
msgstr ""

# 353c3a5139f341caa11422fea296f961
#: ../../docstring flask.Flask.env:7 of
msgid "**Do not enable development when deploying in production.**"
msgstr ""

# 2f0ff1935719493b968cb5cbb308aa84
#: ../../docstring flask.Flask.env:9 of
msgid "Default: ``'production'``"
msgstr ""

#: ../../docstring flask.Blueprint.error_handler_spec:1
#: flask.Flask.error_handler_spec:1 of
msgid ""
"A data structure of registered error handlers, in the format ``{scope: "
"{code: {class: handler}}}```. The ``scope`` key is the name of a "
"blueprint the handlers are active for, or ``None`` for all requests. The "
"``code`` key is the HTTP status code for ``HTTPException``, or ``None`` "
"for other exceptions. The innermost dictionary maps exception classes to "
"handler functions."
msgstr ""

# df7fbfa1d87a485fa3af775c6302c927
#: ../../docstring flask.Blueprint.error_handler_spec:9
#: flask.Flask.error_handler_spec:9 of
msgid "To register an error handler, use the :meth:`errorhandler` decorator."
msgstr ""

# 8b8f891e9d1145a78edd90a8e1e17421
#: flask.scaffold.Scaffold.errorhandler:1 of
msgid "Register a function to handle errors by code or exception class."
msgstr ""

# 2f588a2ae52c418bb98d874c9519f33f
#: flask.scaffold.Scaffold.errorhandler:3 of
msgid ""
"A decorator that is used to register a function given an error code.  "
"Example::"
msgstr ""

# cc77c5002e0f4ed5a97a976b9b5ce1e7
#: flask.scaffold.Scaffold.errorhandler:10 of
msgid "You can also register handlers for arbitrary exceptions::"
msgstr ""

# a263e908b17441f2b36a17d8ae55d9c6
#: flask.scaffold.Scaffold.errorhandler:16 of
msgid ""
"Use :meth:`register_error_handler` instead of modifying "
":attr:`error_handler_spec` directly, for application wide error handlers."
msgstr ""

# 0cd19f1675d64997b220418d47a948a1
#: flask.scaffold.Scaffold.errorhandler:21 of
msgid ""
"One can now additionally also register custom exception types that do not"
" necessarily have to be a subclass of the "
":class:`~werkzeug.exceptions.HTTPException` class."
msgstr ""

# 6dd71aa104bd4bb2bbc27ff41a2f7d05
#: flask.scaffold.Scaffold.errorhandler:26 of
msgid "the code as integer for the handler, or an arbitrary exception"
msgstr ""

#: ../../docstring flask.Flask.extensions:1 of
msgid ""
"a place where extensions can store application specific state.  For "
"example this is where an extension could store database engines and "
"similar things."
msgstr ""

# 58413d0752f04353b78369cbcdff8eb4
#: ../../docstring flask.Flask.extensions:5 of
msgid ""
"The key must match the name of the extension module. For example in case "
"of a \"Flask-Foo\" extension in `flask_foo`, the key would be ``'foo'``."
msgstr ""

# 27a5dae9b36b441fbeac1d5d2b2aacda
#: flask.app.Flask.finalize_request:1 of
msgid ""
"Given the return value from a view function this finalizes the request by"
" converting it into a response and invoking the postprocessing functions."
"  This is invoked for both normal request dispatching as well as error "
"handlers."
msgstr ""

# 5878ad9f75be4dd39b5b4c01df41bfd4
#: flask.app.Flask.finalize_request:6 of
msgid ""
"Because this means that it might be called as a result of a failure a "
"special safe mode is available which can be enabled with the "
"`from_error_handler` flag.  If enabled, failures in response processing "
"will be logged and otherwise ignored."
msgstr ""

# 9eab6562848d4d9fa13317c91fc7b8cb
# 427e563f0975421ba175db64cab2736a
# ca886b5339684d36829edae98d17e35b
#: flask.app.Flask.finalize_request flask.app.Flask.raise_routing_exception
#: flask.app.Flask.try_trigger_before_first_request_functions of
msgid "internal"
msgstr ""

# 326767a032de41cb835b26e3681bfe6a
#: flask.app.Flask.full_dispatch_request:1 of
msgid ""
"Dispatches the request and on top of that performs request pre and "
"postprocessing as well as HTTP exception catching and error handling."
msgstr ""

#: flask.scaffold.Scaffold.get:1 of
msgid "Shortcut for :meth:`route` with ``methods=[\"GET\"]``."
msgstr ""

#: flask.scaffold.Scaffold.get_send_file_max_age:1 of
msgid ""
"Used by :func:`send_file` to determine the ``max_age`` cache value for a "
"given file path if it wasn't passed."
msgstr ""

#: flask.scaffold.Scaffold.get_send_file_max_age:4 of
msgid ""
"By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from the "
"configuration of :data:`~flask.current_app`. This defaults to ``None``, "
"which tells the browser to use conditional requests instead of a timed "
"cache, which is usually preferable."
msgstr ""

#: flask.scaffold.Scaffold.get_send_file_max_age:9 of
msgid "The default configuration is ``None`` instead of 12 hours."
msgstr ""

# 9d4839768ddc4001b836a089f067ba7a
#: flask.Flask.got_first_request:1 of
msgid ""
"This attribute is set to ``True`` if the application started handling the"
" first request."
msgstr ""

# 03ce2fdf25774cfabc8106e33156f0fe
#: flask.app.Flask.handle_exception:1 of
msgid ""
"Handle an exception that did not have an error handler associated with "
"it, or that was raised from an error handler. This always causes a 500 "
"``InternalServerError``."
msgstr ""

# ce9e2cb632f94063a8b2c66027d1aa79
#: flask.app.Flask.handle_exception:5 of
msgid "Always sends the :data:`got_request_exception` signal."
msgstr ""

# 67d8746f76d34873a7c152263b4df4da
#: flask.app.Flask.handle_exception:7 of
msgid ""
"If :attr:`propagate_exceptions` is ``True``, such as in debug mode, the "
"error will be re-raised so that the debugger can display it. Otherwise, "
"the original exception is logged, and an "
":exc:`~werkzeug.exceptions.InternalServerError` is returned."
msgstr ""

# 11c3d5c76de440e2b337e4a784bd1c10
#: flask.app.Flask.handle_exception:12 of
msgid ""
"If an error handler is registered for ``InternalServerError`` or ``500``,"
" it will be used. For consistency, the handler will always receive the "
"``InternalServerError``. The original unhandled exception is available as"
" ``e.original_exception``."
msgstr ""

# f6b873f54df04dfc998d826bf0725159
#: flask.app.Flask.handle_exception:17 of
msgid ""
"Always passes the ``InternalServerError`` instance to the handler, "
"setting ``original_exception`` to the unhandled error."
msgstr ""

# b43a31deb1a643d58de8e616df4b8e4e
#: flask.app.Flask.handle_exception:22 of
msgid ""
"``after_request`` functions and other finalization is done even for the "
"default 500 response when there is no handler."
msgstr ""

# fd1ab5359ca741589055f937e45989ef
#: flask.app.Flask.handle_http_exception:1 of
msgid ""
"Handles an HTTP exception.  By default this will invoke the registered "
"error handlers and fall back to returning the exception as response."
msgstr ""

# ec307e666c8644cab557e23d141ccf54
#: flask.app.Flask.handle_http_exception:5 of
msgid ""
"``RoutingException``, used internally for actions such as  slash "
"redirects during routing, is not passed to error  handlers."
msgstr ""

# a6975ffb167b4992b2fede37f9984f1a
#: flask.app.Flask.handle_http_exception:10 of
msgid ""
"Exceptions are looked up by code *and* by MRO, so ``HTTPExcpetion`` "
"subclasses can be handled with a catch-all handler for the base "
"``HTTPException``."
msgstr ""

# b6954aac61d34ac6940509f59aca55d7
#: flask.app.Flask.handle_url_build_error:1 of
msgid "Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`."
msgstr ""

# 82cc50b726b745e084b341b3f7365e98
#: flask.app.Flask.handle_user_exception:1 of
msgid ""
"This method is called whenever an exception occurs that should be "
"handled. A special case is :class:`~werkzeug .exceptions.HTTPException` "
"which is forwarded to the :meth:`handle_http_exception` method. This "
"function will either return a response value or reraise the exception "
"with the same traceback."
msgstr ""

# afebef02802f44c091a7ad3c82d567ac
#: flask.app.Flask.handle_user_exception:8 of
msgid ""
"Key errors raised from request data like ``form`` show the bad key in "
"debug mode rather than a generic bad request message."
msgstr ""

#: flask.Blueprint.has_static_folder:1 flask.Flask.has_static_folder:1 of
msgid "``True`` if :attr:`static_folder` is set."
msgstr ""

#: ../../docstring flask.Blueprint.import_name:1 flask.Flask.import_name:1 of
msgid ""
"The name of the package or module that this object belongs to. Do not "
"change this once it is set by the constructor."
msgstr ""

# f87106b46a9b49f3a647ad372e785784
#: flask.app.Flask.inject_url_defaults:1 of
msgid ""
"Injects the URL defaults for the given endpoint directly into the values "
"dictionary passed.  This is used internally and automatically called on "
"URL building."
msgstr ""

# 27aa031fe11340a78b6c845f5919e3dd
#: ../../docstring flask.Flask.instance_path:1 of
msgid "Holds the path to the instance folder."
msgstr ""

# 9c4a2daf7d764de390eeadb9b1eda347
#: flask.app.Flask.iter_blueprints:1 of
msgid "Iterates over all blueprints by the order they were registered."
msgstr ""

# 273fca40976b424f9e19ac7c5b04d8eb
#: flask.Flask.jinja_env:1 of
msgid "The Jinja environment used to load templates."
msgstr ""

# 727b857727c34eea88c61e9a67a2e11d
#: flask.Flask.jinja_env:3 of
msgid ""
"The environment is created the first time this property is accessed. "
"Changing :attr:`jinja_options` after that will have no effect."
msgstr ""

#: flask.Blueprint.jinja_loader:1 flask.Flask.jinja_loader:1 of
msgid ""
"The Jinja loader for this object's templates. By default this is a class "
":class:`jinja2.loaders.FileSystemLoader` to :attr:`template_folder` if it"
" is set."
msgstr ""

# 7d486e2451154de99ea2e5eb3ac2c3b6
#: ../../docstring flask.Flask.jinja_options:1 of
msgid ""
"Options that are passed to the Jinja environment in "
":meth:`create_jinja_environment`. Changing these options after the "
"environment is created (accessing :attr:`jinja_env`) will have no effect."
msgstr ""

# 38047fd0b5b64357b6a686b4c643b86d
#: ../../docstring flask.Flask.jinja_options:6 of
msgid ""
"This is a ``dict`` instead of an ``ImmutableDict`` to allow easier "
"configuration."
msgstr ""

# 1add8512265b47039e03b8b6acb469bb
#: flask.app.Flask.log_exception:1 of
msgid ""
"Logs an exception.  This is called by :meth:`handle_exception` if "
"debugging is disabled and right before the handler is called. The default"
" implementation logs the exception as error on the :attr:`logger`."
msgstr ""

# 861b072020d24dca98b1c8ab8a59a275
#: flask.Flask.logger:1 of
msgid ""
"A standard Python :class:`~logging.Logger` for the app, with the same "
"name as :attr:`name`."
msgstr ""

# 555a2c0af4474688b840567634f6723e
#: flask.Flask.logger:4 of
msgid ""
"In debug mode, the logger's :attr:`~logging.Logger.level` will be set to "
":data:`~logging.DEBUG`."
msgstr ""

# 84fb373f302649c19ec0087d7f44fdaa
#: flask.Flask.logger:7 of
msgid ""
"If there are no handlers configured, a default handler will be added. See"
" :doc:`/logging` for more information."
msgstr ""

# 31a5e1da57764b18b8839b57f8008696
#: flask.Flask.logger:10 of
msgid ""
"The logger takes the same name as :attr:`name` rather than hard-coding "
"``\"flask.app\"``."
msgstr ""

# 89c3d7c0f7cb49efa9971e2d1efa6f34
#: flask.Flask.logger:14 of
msgid ""
"Behavior was simplified. The logger is always named ``\"flask.app\"``. "
"The level is only set during configuration, it doesn't check "
"``app.debug`` each time. Only one format is used, not different ones "
"depending on ``app.debug``. No handlers are removed, and a handler is "
"only added if no handlers are already configured."
msgstr ""

# cd89c302797b44e09844c45f6eb093d2
#: flask.app.Flask.make_config:1 of
msgid ""
"Used to create the config attribute by the Flask constructor. The "
"`instance_relative` parameter is passed in from the constructor of Flask "
"(there named `instance_relative_config`) and indicates if the config "
"should be relative to the instance path or the root path of the "
"application."
msgstr ""

# a7bcb0a3bbf148b1b924154b902faca3
#: flask.app.Flask.make_default_options_response:1 of
msgid ""
"This method is called to create the default ``OPTIONS`` response. This "
"can be changed through subclassing to change the default behavior of "
"``OPTIONS`` responses."
msgstr ""

# e021a67f697d409a8665ae647fc46a2c
#: flask.app.Flask.make_response:1 of
msgid ""
"Convert the return value from a view function to an instance of "
":attr:`response_class`."
msgstr ""

#: flask.app.Flask.make_response:4 of
msgid ""
"the return value from the view function. The view function must return a "
"response. Returning ``None``, or the view ending without returning, is "
"not allowed. The following types are allowed for ``view_rv``:  ``str``"
"     A response object is created with the string encoded to UTF-8     as"
" the body.  ``bytes``     A response object is created with the bytes as "
"the body.  ``dict``     A dictionary that will be jsonify'd before being "
"returned.  ``tuple``     Either ``(body, status, headers)``, ``(body, "
"status)``, or     ``(body, headers)``, where ``body`` is any of the other"
" types     allowed here, ``status`` is a string or an integer, and     "
"``headers`` is a dictionary or a list of ``(key, value)``     tuples. If "
"``body`` is a :attr:`response_class` instance,     ``status`` overwrites "
"the exiting value and ``headers`` are     extended.  "
":attr:`response_class`     The object is returned unchanged.  other "
":class:`~werkzeug.wrappers.Response` class     The object is coerced to "
":attr:`response_class`.  :func:`callable`     The function is called as a"
" WSGI application. The result is     used to create a response object."
msgstr ""

# 54674a4971f548dfbbd85e31c14a1ffc
#: flask.app.Flask.make_response:4 of
msgid ""
"the return value from the view function. The view function must return a "
"response. Returning ``None``, or the view ending without returning, is "
"not allowed. The following types are allowed for ``view_rv``:"
msgstr ""

#: flask.app.Flask.make_response:11 of
msgid "``str``"
msgstr ""

# 90311da154084650b0ee46a46cfe621f
#: flask.app.Flask.make_response:10 of
msgid "A response object is created with the string encoded to UTF-8 as the body."
msgstr ""

#: flask.app.Flask.make_response:14 of
msgid "``bytes``"
msgstr ""

# 1bb0ddbc58fe4f2c8f02a04ac11984af
#: flask.app.Flask.make_response:14 of
msgid "A response object is created with the bytes as the body."
msgstr ""

# cf6928f3e1994720b5ce19f5da02a5ae
#: flask.app.Flask.make_response:17 of
msgid "``dict``"
msgstr ""

# cd60a232abc845018e8447bd9d2dc84d
#: flask.app.Flask.make_response:17 of
msgid "A dictionary that will be jsonify'd before being returned."
msgstr ""

# 9e48403caa2e470dac3a9155a7401d81
#: flask.app.Flask.make_response:26 of
msgid "``tuple``"
msgstr ""

# a72fdfcf8e8a4d3880f3f89acd698e89
#: flask.app.Flask.make_response:20 of
msgid ""
"Either ``(body, status, headers)``, ``(body, status)``, or ``(body, "
"headers)``, where ``body`` is any of the other types allowed here, "
"``status`` is a string or an integer, and ``headers`` is a dictionary or "
"a list of ``(key, value)`` tuples. If ``body`` is a "
":attr:`response_class` instance, ``status`` overwrites the exiting value "
"and ``headers`` are extended."
msgstr ""

# 1d35f9b66d2c400899148b18c9dbba3b
#: flask.app.Flask.make_response:29 of
msgid ":attr:`response_class`"
msgstr ""

# 328ba27f1a2446c5b7c35a28bb924e2e
#: flask.app.Flask.make_response:29 of
msgid "The object is returned unchanged."
msgstr ""

# 7f3dfd52c9ff4ce495123c5d3c95ec05
#: flask.app.Flask.make_response:32 of
msgid "other :class:`~werkzeug.wrappers.Response` class"
msgstr ""

# 76b648cd7bd443038d7692cb39375d21
#: flask.app.Flask.make_response:32 of
msgid "The object is coerced to :attr:`response_class`."
msgstr ""

# cbd17b4f9d054e4c818d0359d741c2f1
#: flask.app.Flask.make_response:36 of
msgid ":func:`callable`"
msgstr ""

# 2bc5d02a2747445fb6c745546c879379
#: flask.app.Flask.make_response:35 of
msgid ""
"The function is called as a WSGI application. The result is used to "
"create a response object."
msgstr ""

# f7898712b692421faeb7fb44d400ca36
#: flask.app.Flask.make_response:38 of
msgid ""
"Previously a tuple was interpreted as the arguments for the response "
"object."
msgstr ""

# 5a2d136eefc24079b6e4fa61033c7c5e
#: flask.app.Flask.make_shell_context:1 of
msgid ""
"Returns the shell context for an interactive shell for this application."
"  This runs all the registered shell context processors."
msgstr ""

# 09dd9786db06464db1ecadb42ca03497
#: flask.Flask.name:1 of
msgid ""
"The name of the application.  This is usually the import name with the "
"difference that it's guessed from the run file if the import name is "
"main.  This name is used as a display name when Flask needs the name of "
"the application.  It can be set and overridden to change the value."
msgstr ""

# 48aec5430c3948c5882298ec09402418
#: flask.app.Flask.open_instance_resource:1 of
msgid ""
"Opens a resource from the application's instance folder "
"(:attr:`instance_path`).  Otherwise works like :meth:`open_resource`.  "
"Instance resources can also be opened for writing."
msgstr ""

# ac695a7c6cc240a9a74e468660019901
# 5f85d39ab9fd43c3895542bb0736295a
# 8c966b3fc9864647af7f16eabe54a9c9
#: flask.app.Flask.open_instance_resource:6 of
msgid ""
"the name of the resource.  To access resources within subfolders use "
"forward slashes as separator."
msgstr ""

# e2772f71b945461c8f11fc45f170c110
#: flask.app.Flask.open_instance_resource:8 of
msgid "resource file opening mode, default is 'rb'."
msgstr ""

#: flask.scaffold.Scaffold.open_resource:1 of
msgid "Open a resource file relative to :attr:`root_path` for reading."
msgstr ""

#: flask.scaffold.Scaffold.open_resource:4 of
msgid ""
"For example, if the file ``schema.sql`` is next to the file ``app.py`` "
"where the ``Flask`` app is defined, it can be opened with:"
msgstr ""

#: flask.scaffold.Scaffold.open_resource:13 of
msgid "Path to the resource relative to :attr:`root_path`."
msgstr ""

#: flask.scaffold.Scaffold.open_resource:15 of
msgid ""
"Open the file in this mode. Only reading is supported, valid values are "
"\"r\" (or \"rt\") and \"rb\"."
msgstr ""

#: flask.scaffold.Scaffold.patch:1 of
msgid "Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``."
msgstr ""

# d1c3594cfb8d4e2da2040410650ae033
#: ../../docstring flask.Flask.permanent_session_lifetime:1 of
msgid ""
"A :class:`~datetime.timedelta` which is used to set the expiration date "
"of a permanent session.  The default is 31 days which makes a permanent "
"session survive for roughly one month."
msgstr ""

# 2132721960274cbc9438db55f69aa9f1
#: ../../docstring flask.Flask.permanent_session_lifetime:5 of
msgid ""
"This attribute can also be configured from the config with the "
"``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to "
"``timedelta(days=31)``"
msgstr ""

#: flask.scaffold.Scaffold.post:1 of
msgid "Shortcut for :meth:`route` with ``methods=[\"POST\"]``."
msgstr ""

# 3d0d2461c53845108626b8dc965ab9a7
#: flask.app.Flask.preprocess_request:1 of
msgid ""
"Called before the request is dispatched. Calls "
":attr:`url_value_preprocessors` registered with the app and the current "
"blueprint (if any). Then calls :attr:`before_request_funcs` registered "
"with the app and the blueprint."
msgstr ""

# f86a08a0c7584087a28cb340930c40c4
#: flask.app.Flask.preprocess_request:6 of
msgid ""
"If any :meth:`before_request` handler returns a non-None value, the value"
" is handled as if it was the return value from the view, and further "
"request handling is stopped."
msgstr ""

# 2d6b116d41c84fe38ba4e8e6b3bd7b5f
#: flask.Flask.preserve_context_on_exception:1 of
msgid ""
"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration "
"value in case it's set, otherwise a sensible default is returned."
msgstr ""

# 039937b9089e4ef9a481d336964b44e0
#: flask.app.Flask.process_response:1 of
msgid ""
"Can be overridden in order to modify the response object before it's sent"
" to the WSGI server.  By default this will call all the "
":meth:`after_request` decorated functions."
msgstr ""

# 05b6bef0c8094f4b92a9146f903170ed
#: flask.app.Flask.process_response:5 of
msgid ""
"As of Flask 0.5 the functions registered for after request execution are "
"called in reverse order of registration."
msgstr ""

# 5049cfd6225e4eaab7da44a0972b5117
#: flask.app.Flask.process_response:9 of
msgid "a :attr:`response_class` object."
msgstr ""

# 905fac2318cc407a9e69c4de4f43e6b1
# 24c40e37ae6543b995165f1b67a3929a
# 245c62dbc9984c15978748da852a780f
# 7eba599503f4460eba8b0279e0508dea
# a268dc161d7d42669d1e88e753885588
# 9f1e74c83dcb4414a6dbbe173a770727
#: ../../docstring flask.app.Flask.process_response flask.cli.load_dotenv
#: flask.config.Config.from_envvar flask.helpers.safe_join
#: flask.testing.FlaskCliRunner.invoke markupsafe._speedups.escape of
#: werkzeug.wrappers.request.Request.application
#: werkzeug.wrappers.request.Request.from_values
#: werkzeug.wrappers.response.Response.force_type
#: werkzeug.wrappers.response.Response.from_app
#: werkzeug.wrappers.response.Response.get_app_iter
#: werkzeug.wrappers.response.Response.get_wsgi_headers
#: werkzeug.wrappers.response.Response.get_wsgi_response
msgid "Returns"
msgstr ""

# c723d3b772294337bc45a2bbfe9c8e78
#: flask.app.Flask.process_response:10 of
msgid ""
"a new response object or the same, has to be an instance of "
":attr:`response_class`."
msgstr ""

# 2415173a667741cb856df5b98e8f36ff
#: flask.Flask.propagate_exceptions:1 of
msgid ""
"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration value in "
"case it's set, otherwise a sensible default is returned."
msgstr ""

#: flask.scaffold.Scaffold.put:1 of
msgid "Shortcut for :meth:`route` with ``methods=[\"PUT\"]``."
msgstr ""

# ff3aa26487bc46e0967fbb1f7bdf626e
#: flask.app.Flask.raise_routing_exception:1 of
msgid ""
"Exceptions that are recording during routing are reraised with this "
"method.  During debug we are not reraising redirect requests for non "
"``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising a different "
"error instead to help debug situations."
msgstr ""

# c22d06c233cc4143934bc7bbf5a8cfde
#: flask.app.Flask.register_blueprint:1 of
msgid ""
"Register a :class:`~flask.Blueprint` on the application. Keyword "
"arguments passed to this method will override the defaults set on the "
"blueprint."
msgstr ""

# 763d9273212f4f8ca3ab0af3519aee7a
#: flask.app.Flask.register_blueprint:5 of
msgid ""
"Calls the blueprint's :meth:`~flask.Blueprint.register` method after "
"recording the blueprint in the application's :attr:`blueprints`."
msgstr ""

# 2f5a8f3c5b1444dea659c90d994abb4a
#: flask.app.Flask.register_blueprint:8 of
msgid "The blueprint to register."
msgstr ""

# 321cc88945f54e4b90107626fe060497
#: flask.app.Flask.register_blueprint:9 of
msgid "Blueprint routes will be prefixed with this."
msgstr ""

# a79744670ca249b88fc89935a62f9f51
#: flask.app.Flask.register_blueprint:10 of
msgid "Blueprint routes will match on this subdomain."
msgstr ""

# 82fcf36b4f2d4970bb1fc76196d441a4
#: flask.app.Flask.register_blueprint:11 of
msgid "Blueprint routes will use these default values for view arguments."
msgstr ""

# 10378f1607d64b19833992bff6b2bf17
#: flask.app.Flask.register_blueprint:13 of
msgid ""
"Additional keyword arguments are passed to "
":class:`~flask.blueprints.BlueprintSetupState`. They can be accessed in "
":meth:`~flask.Blueprint.record` callbacks."
msgstr ""

#: flask.app.Flask.register_blueprint:17 flask.blueprints.Blueprint.register:16
#: flask.blueprints.Blueprint.register_blueprint:5 of
msgid ""
"The ``name`` option can be used to change the (pre-dotted) name the "
"blueprint is registered with. This allows the same blueprint to be "
"registered multiple times with unique names for ``url_for``."
msgstr ""

# c16b9cfbeb244937b323c0ef777b7946
#: flask.scaffold.Scaffold.register_error_handler:1 of
msgid ""
"Alternative error attach function to the :meth:`errorhandler` decorator "
"that is more straightforward to use for non decorator usage."
msgstr ""

# 9f464902ed2647d9bc64694f5e86e521
#: flask.app.Flask.request_context:1 of
msgid ""
"Create a :class:`~flask.ctx.RequestContext` representing a WSGI "
"environment. Use a ``with`` block to push the context, which will make "
":data:`request` point at this request."
msgstr ""

# c6a62540bd9f45e4b0edccda30b7497d
# e8c26d9da707473eb34d09517bb20eeb
#: flask.app.Flask.request_context:5 flask.app.Flask.test_request_context:6 of
msgid "See :doc:`/reqcontext`."
msgstr ""

# ab315e9791074816aa6a15f57c9d2590
#: flask.app.Flask.request_context:7 of
msgid ""
"Typically you should not call this from your own code. A request context "
"is automatically pushed by the :meth:`wsgi_app` when handling a request. "
"Use :meth:`test_request_context` to create an environment and context "
"instead of this method."
msgstr ""

# a4bd1ca913864a22bbe5fd9f1e38ae0e
#: flask.app.Flask.request_context:12 of
msgid "a WSGI environment"
msgstr ""

# 1afad4a6f1f446dba4453bdb6443796d
# 5d1c2ec142074aebaf5b6a37e23d6c95
#: ../../docstring flask.Blueprint.root_path:1 flask.Flask.root_path:1 of
msgid ""
"Absolute path to the package on the filesystem. Used to look up resources"
" contained in the package."
msgstr ""

#: flask.scaffold.Scaffold.route:1 of
msgid ""
"Decorate a view function to register it with the given URL rule and "
"options. Calls :meth:`add_url_rule`, which has more details about the "
"implementation."
msgstr ""

#: flask.scaffold.Scaffold.route:13 of
msgid ""
"The endpoint name for the route defaults to the name of the view function"
" if the ``endpoint`` parameter isn't passed."
msgstr ""

#: flask.scaffold.Scaffold.route:16 of
msgid ""
"The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and "
"``OPTIONS`` are added automatically."
msgstr ""

# 305cb16c17154fd0b7a0118c059aef17
#: flask.app.Flask.run:1 of
msgid "Runs the application on a local development server."
msgstr ""

#: flask.app.Flask.run:3 of
msgid ""
"Do not use ``run()`` in a production setting. It is not intended to meet "
"security and performance requirements for a production server. Instead, "
"see :doc:`/deploying/index` for WSGI server recommendations."
msgstr ""

# 7635429887524392882e33e4ab6fc4fd
#: flask.app.Flask.run:7 of
msgid ""
"If the :attr:`debug` flag is set the server will automatically reload for"
" code changes and show a debugger in case an exception happened."
msgstr ""

# 220511298b83408fb0f04e024e8788d4
#: flask.app.Flask.run:10 of
msgid ""
"If you want to run the application in debug mode, but disable the code "
"execution on the interactive debugger, you can pass ``use_evalex=False`` "
"as parameter.  This will keep the debugger's traceback screen active, but"
" disable code execution."
msgstr ""

# 73510cec7eaa441db0599187064cb905
#: flask.app.Flask.run:15 of
msgid ""
"It is not recommended to use this function for development with automatic"
" reloading as this is badly supported.  Instead you should be using the "
":command:`flask` command line script's ``run`` support."
msgstr ""

# 47142c6126194736a5b7113e84119ead
#: flask.app.Flask.run:19 of
msgid "Keep in Mind"
msgstr ""

# f323ff7010574fc393c1f9858072c832
#: flask.app.Flask.run:21 of
msgid ""
"Flask will suppress any server error with a generic error page unless it "
"is in debug mode.  As such to enable just the interactive debugger "
"without the code reloading, you have to invoke :meth:`run` with "
"``debug=True`` and ``use_reloader=False``. Setting ``use_debugger`` to "
"``True`` without being in debug mode won't catch any exceptions because "
"there won't be any to catch."
msgstr ""

# 9c4ac4beca954a9492fd3aa2d63e4b89
#: flask.app.Flask.run:29 of
msgid ""
"the hostname to listen on. Set this to ``'0.0.0.0'`` to have the server "
"available externally as well. Defaults to ``'127.0.0.1'`` or the host in "
"the ``SERVER_NAME`` config variable if present."
msgstr ""

# 4b525fdb76da44bb8863e05cbc246e59
#: flask.app.Flask.run:33 of
msgid ""
"the port of the webserver. Defaults to ``5000`` or the port defined in "
"the ``SERVER_NAME`` config variable if present."
msgstr ""

# f187a624e5fc4b0db3f5e8301616d89b
#: flask.app.Flask.run:35 of
msgid "if given, enable or disable debug mode. See :attr:`debug`."
msgstr ""

# d941d9183e8d42d18619bb1a079194f7
# 5ae8149d87354c33bd5f6de22d142417
#: flask.app.Flask.run:37 flask.cli.FlaskGroup:12 of
msgid ""
"Load the nearest :file:`.env` and :file:`.flaskenv` files to set "
"environment variables. Will also change the working directory to the "
"directory containing the first file found."
msgstr ""

# 7d273972d8c44fc3974542788fd335c4
#: flask.app.Flask.run:40 of
msgid ""
"the options to be forwarded to the underlying Werkzeug server. See "
":func:`werkzeug.serving.run_simple` for more information."
msgstr ""

# c8918c5381dc478fb01d5b82ddcb0706
# 5ac486d9ec6940d2876ebff850053041
#: flask.app.Flask.run:44 flask.cli.FlaskGroup:18 of
msgid ""
"If installed, python-dotenv will be used to load environment variables "
"from :file:`.env` and :file:`.flaskenv` files."
msgstr ""

# 1f82a3b3b6854905ac339b5f0442073c
#: flask.app.Flask.run:48 of
msgid ""
"If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG` environment "
"variables will override :attr:`env` and :attr:`debug`."
msgstr ""

# 7dbe16252faa48329602751f6556eced
#: flask.app.Flask.run:52 of
msgid "Threaded mode is enabled by default."
msgstr ""

# b80a7d37d0d74478834a2c04400271d0
#: flask.app.Flask.run:54 of
msgid "The default port is now picked from the ``SERVER_NAME`` variable."
msgstr ""

# 3ec633d68353435db9cdfa1cd0806041
#: ../../docstring flask.Flask.secret_key:1 of
msgid ""
"If a secret key is set, cryptographic components can use this to sign "
"cookies and other things. Set this to a complex random value when you "
"want to use the secure cookie for instance."
msgstr ""

# 1d35c65a22d743b798f9d49ff12ba8da
#: ../../docstring flask.Flask.secret_key:5 of
msgid ""
"This attribute can also be configured from the config with the "
":data:`SECRET_KEY` configuration key. Defaults to ``None``."
msgstr ""

# 5e182d05ac8a4c8aa13738c350d25ee2
#: flask.app.Flask.select_jinja_autoescape:1 of
msgid ""
"Returns ``True`` if autoescaping should be active for the given template "
"name. If no template name is given, returns `True`."
msgstr ""

#: ../../docstring flask.Flask.send_file_max_age_default:1 of
msgid ""
"A :class:`~datetime.timedelta` or number of seconds which is used as the "
"default ``max_age`` for :func:`send_file`. The default is ``None``, which"
" tells the browser to use conditional requests instead of a timed cache."
msgstr ""

#: ../../docstring flask.Flask.send_file_max_age_default:6 of
msgid "Configured with the :data:`SEND_FILE_MAX_AGE_DEFAULT` configuration key."
msgstr ""

#: ../../docstring flask.Flask.send_file_max_age_default:9 of
msgid "Defaults to ``None`` instead of 12 hours."
msgstr ""

#: flask.scaffold.Scaffold.send_static_file:1 of
msgid ""
"The view function used to serve files from :attr:`static_folder`. A route"
" is automatically registered for this view at :attr:`static_url_path` if "
":attr:`static_folder` is set."
msgstr ""

# 247576417181401193ee5d47f760e9ac
#: ../../docstring flask.Flask.session_cookie_name:1 of
msgid "The secure cookie uses this for the name of the session cookie."
msgstr ""

# 0796f4e0a30b42e2b99d459fab9709c9
#: ../../docstring flask.Flask.session_cookie_name:3 of
msgid ""
"This attribute can also be configured from the config with the "
"``SESSION_COOKIE_NAME`` configuration key.  Defaults to ``'session'``"
msgstr ""

# fbaacd44688e4d10b57c7bfcea6732a7
#: ../../docstring flask.Flask.session_interface:1 of
msgid ""
"the session interface to use.  By default an instance of "
":class:`~flask.sessions.SecureCookieSessionInterface` is used here."
msgstr ""

# 9510c8e5dd3f4fb3bc5d55a12cdba6f9
#: flask.app.Flask.shell_context_processor:1 of
msgid "Registers a shell context processor function."
msgstr ""

# 7c7483c051a44a0f9aa2fbb5fb52664a
#: ../../docstring flask.Flask.shell_context_processors:1 of
msgid ""
"A list of shell context processor functions that should be run when a "
"shell context is created."
msgstr ""

# 09d66572fb974cfb914fcf5f5cf32228
#: flask.app.Flask.should_ignore_error:1 of
msgid ""
"This is called to figure out if an error should be ignored or not as far "
"as the teardown system is concerned.  If this function returns ``True`` "
"then the teardown handlers will not be passed the error."
msgstr ""

#: flask.Blueprint.static_folder:1 flask.Flask.static_folder:1 of
msgid ""
"The absolute path to the configured static folder. ``None`` if no static "
"folder is set."
msgstr ""

# a14e8d2fea3d479db6f195ac453127bb
# b27a5db0af3042de8ccb7d1dff4fa252
#: flask.Blueprint.static_url_path:1 flask.Flask.static_url_path:1 of
msgid "The URL prefix that the static route will be accessible from."
msgstr ""

# 42e1724c1e724706b9fd7d874bacccdd
# c48fc6e8299e455f89cc744b759cc677
#: flask.Blueprint.static_url_path:3 flask.Flask.static_url_path:3 of
msgid ""
"If it was not configured during init, it is derived from "
":attr:`static_folder`."
msgstr ""

# dddd1e923f2b4b6b980f2047b04c11fd
#: flask.app.Flask.teardown_appcontext:1 of
msgid ""
"Registers a function to be called when the application context ends.  "
"These functions are typically also called when the request context is "
"popped."
msgstr ""

# 4b7e9b423a644d21be030e4757bbab38
# afa88ee6af5b43b49774d37e0605f834
# 33ef651f549a4a09b78adc46fedfb4b2
# 501437e06b3347d185142aae7c2b9627
#: flask.app.Flask.teardown_appcontext:5 flask.ctx.after_this_request:5
#: flask.ctx.copy_current_request_context:7
#: flask.scaffold.Scaffold.teardown_request:6 of
msgid "Example::"
msgstr ""

# ba1ff8667706499992dcf5845e108712
#: flask.app.Flask.teardown_appcontext:12 of
msgid ""
"When ``ctx.pop()`` is executed in the above example, the teardown "
"functions are called just before the app context moves from the stack of "
"active contexts.  This becomes relevant if you are using such constructs "
"in tests."
msgstr ""

# e166fbdb428a42dea86a9afd4ce68d86
#: flask.app.Flask.teardown_appcontext:17 of
msgid ""
"Since a request context typically also manages an application context it "
"would also be called when you pop a request context."
msgstr ""

# 3a460ab77add419180d1bcfbfc014902
#: flask.app.Flask.teardown_appcontext:20 of
msgid ""
"When a teardown function was called because of an unhandled exception it "
"will be passed an error object. If an :meth:`errorhandler` is registered,"
" it will handle the exception and the teardown will not receive it."
msgstr ""

# c0502e4919b7418c8e9ad03e2b443ba6
# cc9a06f170b645d4bdd35dbf9e6de45f
#: flask.app.Flask.teardown_appcontext:25
#: flask.scaffold.Scaffold.teardown_request:26 of
msgid "The return values of teardown functions are ignored."
msgstr ""

# 740f19dd71d3422b9baf1bac86e77400
#: ../../docstring flask.Flask.teardown_appcontext_funcs:1 of
msgid ""
"A list of functions that are called when the application context is "
"destroyed.  Since the application context is also torn down if the "
"request ends this is the place to store code that disconnects from "
"databases."
msgstr ""

# ce219cde151947519104bc647b1140e7
#: flask.scaffold.Scaffold.teardown_request:1 of
msgid ""
"Register a function to be run at the end of each request, regardless of "
"whether there was an exception or not.  These functions are executed when"
" the request context is popped, even if not an actual request was "
"performed."
msgstr ""

# c6bf930d9a8243a59307d1345c21e0a7
#: flask.scaffold.Scaffold.teardown_request:13 of
msgid ""
"When ``ctx.pop()`` is executed in the above example, the teardown "
"functions are called just before the request context moves from the stack"
" of active contexts.  This becomes relevant if you are using such "
"constructs in tests."
msgstr ""

#: flask.scaffold.Scaffold.teardown_request:18 of
msgid ""
"Teardown functions must avoid raising exceptions, since they . If they "
"execute code that might fail they will have to surround the execution of "
"these code by try/except statements and log occurring errors."
msgstr ""

# c587276ac550475083affe19a3ff77d7
#: flask.scaffold.Scaffold.teardown_request:23 of
msgid ""
"When a teardown function was called because of an exception it will be "
"passed an error object."
msgstr ""

# 593a98ac81c54ba7a91ed7a474beedd7
#: flask.scaffold.Scaffold.teardown_request:28 of
msgid "Debug Note"
msgstr ""

# 84b1b27c4e4f4350a080882652905915
#: flask.scaffold.Scaffold.teardown_request:30 of
msgid ""
"In debug mode Flask will not tear down a request on an exception "
"immediately.  Instead it will keep it alive so that the interactive "
"debugger can still access it.  This behavior can be controlled by the "
"``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable."
msgstr ""

#: ../../docstring flask.Blueprint.teardown_request_funcs:1
#: flask.Flask.teardown_request_funcs:1 of
msgid ""
"A data structure of functions to call at the end of each request even if "
"an exception is raised, in the format ``{scope: [functions]}``. The "
"``scope`` key is the name of a blueprint the functions are active for, or"
" ``None`` for all requests."
msgstr ""

#: ../../docstring flask.Blueprint.teardown_request_funcs:7
#: flask.Flask.teardown_request_funcs:7 of
msgid "To register a function, use the :meth:`teardown_request` decorator."
msgstr ""

#: ../../docstring flask.Blueprint.template_context_processors:1
#: flask.Flask.template_context_processors:1 of
msgid ""
"A data structure of functions to call to pass extra context values when "
"rendering templates, in the format ``{scope: [functions]}``. The "
"``scope`` key is the name of a blueprint the functions are active for, or"
" ``None`` for all requests."
msgstr ""

#: ../../docstring flask.Blueprint.template_context_processors:7
#: flask.Flask.template_context_processors:7 of
msgid "To register a function, use the :meth:`context_processor` decorator."
msgstr ""

# 4b57ed160ff94fb3b4412195725fe318
#: flask.app.Flask.template_filter:1 of
msgid ""
"A decorator that is used to register custom template filter. You can "
"specify a name for the filter, otherwise the function name will be used. "
"Example::"
msgstr ""

#: ../../docstring flask.Blueprint.template_folder:1
#: flask.Flask.template_folder:1 of
msgid ""
"The path to the templates folder, relative to :attr:`root_path`, to add "
"to the template loader. ``None`` if templates should not be added."
msgstr ""

# 28eb2d0e3a1042b395a5f38f4cde61bb
#: flask.app.Flask.template_global:1 of
msgid ""
"A decorator that is used to register a custom template global function. "
"You can specify a name for the global function, otherwise the function "
"name will be used. Example::"
msgstr ""

# 75ecdabf42294ad882d0c458bc0a86a2
#: flask.app.Flask.template_test:1 of
msgid ""
"A decorator that is used to register custom template test. You can "
"specify a name for the test, otherwise the function name will be used. "
"Example::"
msgstr ""

# fdc409bb9803490db1bd5473a051f156
#: flask.Flask.templates_auto_reload:1 of
msgid ""
"Reload templates when they are changed. Used by "
":meth:`create_jinja_environment`."
msgstr ""

# 63f8bbfe6c7d4745b14800186c9e2889
#: flask.Flask.templates_auto_reload:4 of
msgid ""
"This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If "
"not set, it will be enabled in debug mode."
msgstr ""

# c67ed2737ad140e1812788c14e5e9748
#: flask.Flask.templates_auto_reload:7 of
msgid ""
"This property was added but the underlying config and behavior already "
"existed."
msgstr ""

# ed73fa5ae40a4ae6bdefbde3831474e0
#: flask.app.Flask.test_cli_runner:1 of
msgid "Create a CLI runner for testing CLI commands. See :ref:`testing-cli`."
msgstr ""

# f180e31e69ef43fdade0bdbb4feaf4cf
#: flask.app.Flask.test_cli_runner:4 of
msgid ""
"Returns an instance of :attr:`test_cli_runner_class`, by default "
":class:`~flask.testing.FlaskCliRunner`. The Flask app object is passed as"
" the first argument."
msgstr ""

# 52215139ded8435f97e7b8715a201028
#: ../../docstring flask.Flask.test_cli_runner_class:1 of
msgid ""
"The :class:`~click.testing.CliRunner` subclass, by default "
":class:`~flask.testing.FlaskCliRunner` that is used by "
":meth:`test_cli_runner`. Its ``__init__`` method should take a Flask app "
"object as the first argument."
msgstr ""

#: flask.app.Flask.test_client:1 of
msgid ""
"Creates a test client for this application.  For information about unit "
"testing head over to :doc:`/testing`."
msgstr ""

# e783dc05d50c448b998e72b521712bb8
#: flask.app.Flask.test_client:4 of
msgid ""
"Note that if you are testing for assertions or exceptions in your "
"application code, you must set ``app.testing = True`` in order for the "
"exceptions to propagate to the test client.  Otherwise, the exception "
"will be handled by the application (not visible to the test client) and "
"the only indication of an AssertionError or other exception will be a 500"
" status code response to the test client.  See the :attr:`testing` "
"attribute.  For example::"
msgstr ""

# d18926212d3f4a9d842937ae8211a9d6
#: flask.app.Flask.test_client:15 of
msgid ""
"The test client can be used in a ``with`` block to defer the closing down"
" of the context until the end of the ``with`` block.  This is useful if "
"you want to access the context locals for testing::"
msgstr ""

# d8919a1937434765858cdb09cc491e38
#: flask.app.Flask.test_client:23 of
msgid ""
"Additionally, you may pass optional keyword arguments that will then be "
"passed to the application's :attr:`test_client_class` constructor. For "
"example::"
msgstr ""

# e25d2a7541594041996f3996774be179
#: flask.app.Flask.test_client:37 of
msgid "See :class:`~flask.testing.FlaskClient` for more information."
msgstr ""

# 519e0a7ab3ca47ff91436cdab629966a
#: flask.app.Flask.test_client:47 of
msgid ""
"Added `**kwargs` to support passing additional keyword arguments to the "
"constructor of :attr:`test_client_class`."
msgstr ""

# cae28273e4c64937b8c8b7ed42cf7f1e
#: flask.app.Flask.test_client:42 of
msgid ""
"The `use_cookies` parameter was added as well as the ability to override "
"the client to be used by setting the :attr:`test_client_class` attribute."
msgstr ""

# 3d362966630c4e09b607f06f246966b0
#: flask.app.Flask.test_client:39 of
msgid "added support for ``with`` block usage for the client."
msgstr ""

# 013fe8c610264421b56110b752070576
#: ../../docstring flask.Flask.test_client_class:1 of
msgid "the test client that is used with when `test_client` is used."
msgstr ""

# 94290f3beebd4d699a5d8e1337a3f2a8
#: flask.app.Flask.test_request_context:1 of
msgid ""
"Create a :class:`~flask.ctx.RequestContext` for a WSGI environment "
"created from the given values. This is mostly useful during testing, "
"where you may want to run a function that uses request data without "
"dispatching a full request."
msgstr ""

# e308ff650a274fa1b8270217815a2ba1
#: flask.app.Flask.test_request_context:8 of
msgid ""
"Use a ``with`` block to push the context, which will make :data:`request`"
" point at the request for the created environment. ::"
msgstr ""

# bfe9016d48be4430867330168f33ebd1
#: flask.app.Flask.test_request_context:15 of
msgid ""
"When using the shell, it may be easier to push and pop the context "
"manually to avoid indentation. ::"
msgstr ""

# 891794bf22e843178161a833082b01a5
#: flask.app.Flask.test_request_context:23 of
msgid ""
"Takes the same arguments as Werkzeug's "
":class:`~werkzeug.test.EnvironBuilder`, with some defaults from the "
"application. See the linked Werkzeug docs for most of the available "
"arguments. Flask-specific behavior is listed here."
msgstr ""

# ac8c9ef2f1284c25990efa8d4072de27
#: flask.app.Flask.test_request_context:28 of
msgid "URL path being requested."
msgstr ""

# 9da1187f6f6b426095a9af3413e39733
#: flask.app.Flask.test_request_context:29 of
msgid ""
"Base URL where the app is being served, which ``path`` is relative to. If"
" not given, built from :data:`PREFERRED_URL_SCHEME`, ``subdomain``, "
":data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`."
msgstr ""

# d72a786f95a3452a8f2afd1604eb5775
#: flask.app.Flask.test_request_context:33 of
msgid "Subdomain name to append to :data:`SERVER_NAME`."
msgstr ""

# 38bdf34086de48cc9206263f19668b43
#: flask.app.Flask.test_request_context:35 of
msgid "Scheme to use instead of :data:`PREFERRED_URL_SCHEME`."
msgstr ""

# 82efcce7f7fd416794f1c11eabba091a
#: flask.app.Flask.test_request_context:37 of
msgid "The request body, either as a string or a dict of form keys and values."
msgstr ""

# 2515d44b270f42ff93b7eb387bb4e512
#: flask.app.Flask.test_request_context:39 of
msgid ""
"If given, this is serialized as JSON and passed as ``data``. Also "
"defaults ``content_type`` to ``application/json``."
msgstr ""

# 1a9af4f1c04f4ebbb2354e4ec13521e2
#: flask.app.Flask.test_request_context:42 of
msgid ""
"other positional arguments passed to "
":class:`~werkzeug.test.EnvironBuilder`."
msgstr ""

# f0412e8bed3842fa9e7433310889a758
#: flask.app.Flask.test_request_context:44 of
msgid "other keyword arguments passed to :class:`~werkzeug.test.EnvironBuilder`."
msgstr ""

# 2fe9ab2f8b144071855afbae23a21d1e
#: ../../docstring flask.Flask.testing:1 of
msgid ""
"The testing flag.  Set this to ``True`` to enable the test mode of Flask "
"extensions (and in the future probably also Flask itself). For example "
"this might activate test helpers that have an additional runtime cost "
"which should not be enabled by default."
msgstr ""

# fade0a61a1b54303b8a0dabfab7c36a1
#: ../../docstring flask.Flask.testing:6 of
msgid ""
"If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the "
"default it's implicitly enabled."
msgstr ""

# a2ee9bd3c39044cfb1ce6dfe46b01873
#: ../../docstring flask.Flask.testing:9 of
msgid ""
"This attribute can also be configured from the config with the "
"``TESTING`` configuration key.  Defaults to ``False``."
msgstr ""

# 77cf57bcc12643b1a8fd53dcb6478471
#: flask.app.Flask.trap_http_exception:1 of
msgid ""
"Checks if an HTTP exception should be trapped or not.  By default this "
"will return ``False`` for all exceptions except for a bad request key "
"error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It also returns"
" ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``."
msgstr ""

# 37bd5a7dd4e3483f8e9b0a1400074b0a
#: flask.app.Flask.trap_http_exception:6 of
msgid ""
"This is called for all HTTP exceptions raised by a view function. If it "
"returns ``True`` for any exception the error handler for this exception "
"is not called and it shows up as regular exception in the traceback.  "
"This is helpful for debugging implicitly raised HTTP exceptions."
msgstr ""

# 60093c59a5124fcaa7b44a48417cfe9d
#: flask.app.Flask.trap_http_exception:12 of
msgid "Bad request errors are not trapped by default in debug mode."
msgstr ""

# 698e50dfec1f4313b89b8d775384fdcf
#: flask.app.Flask.try_trigger_before_first_request_functions:1 of
msgid ""
"Called before each request and will ensure that it triggers the "
":attr:`before_first_request_funcs` and only exactly once per application "
"instance (which means process usually)."
msgstr ""

# dce86a52f8304b5ebdbe36f140b4f8b9
#: flask.app.Flask.update_template_context:1 of
msgid ""
"Update the template context with some commonly used variables. This "
"injects request, session, config and g into the template context as well "
"as everything template context processors want to inject.  Note that the "
"as of Flask 0.6, the original values in the context will not be "
"overridden if a context processor decides to return a value with the same"
" key."
msgstr ""

# 253598c5b35742eda3bcd8bc4d1cdb2e
#: flask.app.Flask.update_template_context:8 of
msgid ""
"the context as a dictionary that is updated in place to add extra "
"variables."
msgstr ""

# ada9752a1b214d82bffe1f928e035d14
#: ../../docstring flask.Flask.url_build_error_handlers:1 of
msgid ""
"A list of functions that are called when :meth:`url_for` raises a "
":exc:`~werkzeug.routing.BuildError`.  Each function registered here is "
"called with `error`, `endpoint` and `values`.  If a function returns "
"``None`` or raises a :exc:`BuildError` the next function is tried."
msgstr ""

#: ../../docstring flask.Blueprint.url_default_functions:1
#: flask.Flask.url_default_functions:1 of
msgid ""
"A data structure of functions to call to modify the keyword arguments "
"when generating URLs, in the format ``{scope: [functions]}``. The "
"``scope`` key is the name of a blueprint the functions are active for, or"
" ``None`` for all requests."
msgstr ""

#: ../../docstring flask.Blueprint.url_default_functions:7
#: flask.Flask.url_default_functions:7 of
msgid "To register a function, use the :meth:`url_defaults` decorator."
msgstr ""

# d060f077b9b944bf8486bb43ae465644
#: flask.scaffold.Scaffold.url_defaults:1 of
msgid ""
"Callback function for URL defaults for all view functions of the "
"application.  It's called with the endpoint and values and should update "
"the values passed in place."
msgstr ""

# e18aff94e3fd47868030983332d64558
#: ../../docstring flask.Flask.url_map:1 of
msgid ""
"The :class:`~werkzeug.routing.Map` for this instance.  You can use this "
"to change the routing converters after the class was created but before "
"any routes are connected.  Example::"
msgstr ""

# aa412beb4b324adaa45c8efc2efcf2ce
#: flask.scaffold.Scaffold.url_value_preprocessor:1 of
msgid ""
"Register a URL value preprocessor function for all view functions in the "
"application. These functions will be called before the "
":meth:`before_request` functions."
msgstr ""

# be44732d4a724c7698dc2e873a7a6872
#: flask.scaffold.Scaffold.url_value_preprocessor:5 of
msgid ""
"The function can modify the values captured from the matched url before "
"they are passed to the view. For example, this can be used to pop a "
"common language code value and place it in ``g`` rather than pass it to "
"every view."
msgstr ""

# 2443d8dbcfa64f89bd1e2c6a4c2a221f
#: flask.scaffold.Scaffold.url_value_preprocessor:10 of
msgid ""
"The function is passed the endpoint name and values dict. The return "
"value is ignored."
msgstr ""

#: ../../docstring flask.Blueprint.url_value_preprocessors:1
#: flask.Flask.url_value_preprocessors:1 of
msgid ""
"A data structure of functions to call to modify the keyword arguments "
"passed to the view function, in the format ``{scope: [functions]}``. The "
"``scope`` key is the name of a blueprint the functions are active for, or"
" ``None`` for all requests."
msgstr ""

#: ../../docstring flask.Blueprint.url_value_preprocessors:7
#: flask.Flask.url_value_preprocessors:7 of
msgid "To register a function, use the :meth:`url_value_preprocessor` decorator."
msgstr ""

# 43275c5459fa4222ab8ffc07f11dfb39
#: ../../docstring flask.Flask.use_x_sendfile:1 of
msgid ""
"Enable this if you want to use the X-Sendfile feature.  Keep in mind that"
" the server has to support this.  This only affects files sent with the "
":func:`send_file` method."
msgstr ""

# c77ee37c6637492ca063190b8264dc43
#: ../../docstring flask.Flask.use_x_sendfile:7 of
msgid ""
"This attribute can also be configured from the config with the "
"``USE_X_SENDFILE`` configuration key.  Defaults to ``False``."
msgstr ""

#: ../../docstring flask.Blueprint.view_functions:1
#: flask.Flask.view_functions:1 of
msgid "A dictionary mapping endpoint names to view functions."
msgstr ""

#: ../../docstring flask.Blueprint.view_functions:3
#: flask.Flask.view_functions:3 of
msgid "To register a view function, use the :meth:`route` decorator."
msgstr ""

# 82c3a2d4f2cd4733a2a7062c128aa628
#: flask.app.Flask.wsgi_app:1 of
msgid ""
"The actual WSGI application. This is not implemented in :meth:`__call__` "
"so that middlewares can be applied without losing a reference to the app "
"object. Instead of doing this::"
msgstr ""

# dd0cd5d140ba4b639420e4eea7d8e9de
#: flask.app.Flask.wsgi_app:7 of
msgid "It's a better idea to do this instead::"
msgstr ""

# 1c5e755ebfa44b7eacf09d009b4d3733
#: flask.app.Flask.wsgi_app:11 of
msgid ""
"Then you still have the original application object around and can "
"continue to call methods on it."
msgstr ""

# ac51986d22924649bc693e59506238f3
#: flask.app.Flask.wsgi_app:14 of
msgid ""
"Teardown events for the request and app contexts are called even if an "
"unhandled error occurs. Other events may not be called depending on when "
"an error occurs during dispatch. See :ref:`callbacks-and-errors`."
msgstr ""

# 0d729bce58e6479f85d52b57508e3694
#: flask.app.Flask.wsgi_app:20 of
msgid "A WSGI environment."
msgstr ""

# 346d604c0f9f490b843580e7f63121e1
#: flask.app.Flask.wsgi_app:21 of
msgid ""
"A callable accepting a status code, a list of headers, and an optional "
"exception context to start the response."
msgstr ""

# 9b07fe6979a843ed9ff93d02531a7575
#: ../../flask/docs/api.rst:20
msgid "Blueprint Objects"
msgstr ""

# 8c1ac4ffc21141f283da6d6271b6762e
#: flask.blueprints.Blueprint:1 of
msgid ""
"Represents a blueprint, a collection of routes and other app-related "
"functions that can be registered on a real application later."
msgstr ""

# aa4ab4d5622043649dea20bdc6fd9d62
#: flask.blueprints.Blueprint:5 of
msgid ""
"A blueprint is an object that allows defining application functions "
"without requiring an application object ahead of time. It uses the same "
"decorators as :class:`~flask.Flask`, but defers the need for an "
"application by recording them for later registration."
msgstr ""

# baccf9f67b754091b4649a4b069e564d
#: flask.blueprints.Blueprint:10 of
msgid ""
"Decorating a function with a blueprint creates a deferred function that "
"is called with :class:`~flask.blueprints.BlueprintSetupState` when the "
"blueprint is registered on an application."
msgstr ""

#: flask.blueprints.Blueprint:14 of
msgid "See :doc:`/blueprints` for more information."
msgstr ""

# 91fa44381dac4f3abe4283c9d5292aef
#: flask.blueprints.Blueprint:16 of
msgid "The name of the blueprint. Will be prepended to each endpoint name."
msgstr ""

# 46ad4bd52ece49049f15bf9fac8e70c3
#: flask.blueprints.Blueprint:18 of
msgid ""
"The name of the blueprint package, usually ``__name__``. This helps "
"locate the ``root_path`` for the blueprint."
msgstr ""

# 5cf47fa316f548d3b1c2836222cc66c2
#: flask.blueprints.Blueprint:21 of
msgid ""
"A folder with static files that should be served by the blueprint's "
"static route. The path is relative to the blueprint's root path. "
"Blueprint static files are disabled by default."
msgstr ""

# 4a84453ff96544e6beffa4b38c80b4f8
#: flask.blueprints.Blueprint:25 of
msgid ""
"The url to serve static files from. Defaults to ``static_folder``. If the"
" blueprint does not have a ``url_prefix``, the app's static route will "
"take precedence, and the blueprint's static files won't be accessible."
msgstr ""

# f471ce8563bf4ae3b8eb1397fbc53fb0
#: flask.blueprints.Blueprint:29 of
msgid ""
"A folder with templates that should be added to the app's template search"
" path. The path is relative to the blueprint's root path. Blueprint "
"templates are disabled by default. Blueprint templates have a lower "
"precedence than those in the app's templates folder."
msgstr ""

# fe8e95833af44db99c7021a12909bffc
#: flask.blueprints.Blueprint:34 of
msgid ""
"A path to prepend to all of the blueprint's URLs, to make them distinct "
"from the rest of the app's routes."
msgstr ""

# e25d89ff1f67478487edb9bd6229b2e0
#: flask.blueprints.Blueprint:36 of
msgid "A subdomain that blueprint routes will match on by default."
msgstr ""

# aed90999e8bb4eb09e60f99537e2c95c
#: flask.blueprints.Blueprint:38 of
msgid "A dict of default values that blueprint routes will receive by default."
msgstr ""

#: flask.blueprints.Blueprint:40 of
msgid ""
"By default, the blueprint will automatically set this based on "
"``import_name``. In certain situations this automatic detection can fail,"
" so the path can be specified manually instead."
msgstr ""

# fe28d4ab1d9848cb9b6fab71a55113b9
#: flask.blueprints.Blueprint:45 of
msgid ""
"Blueprints have a ``cli`` group to register nested CLI commands. The "
"``cli_group`` parameter controls the name of the group under the "
"``flask`` command."
msgstr ""

# a3ed206c58a84ce1a369d1cf4f3e87e0
#: flask.blueprints.Blueprint.add_app_template_filter:1 of
msgid ""
"Register a custom template filter, available application wide.  Like "
":meth:`Flask.add_template_filter` but for a blueprint.  Works exactly "
"like the :meth:`app_template_filter` decorator."
msgstr ""

# 111896577022444ea9b489b2ad7aa468
#: flask.blueprints.Blueprint.add_app_template_global:1 of
msgid ""
"Register a custom template global, available application wide.  Like "
":meth:`Flask.add_template_global` but for a blueprint.  Works exactly "
"like the :meth:`app_template_global` decorator."
msgstr ""

# ee9873f56e284f16b6c96f6c36964c8b
# e7cddb21c6124b6b99d9e4ae0d1408d5
#: flask.blueprints.Blueprint.add_app_template_global:7
#: flask.blueprints.Blueprint.app_template_global:6 of
msgid "the optional name of the global, otherwise the function name will be used."
msgstr ""

# ad97ba08841f4c668456d6d0f922bf41
#: flask.blueprints.Blueprint.add_app_template_test:1 of
msgid ""
"Register a custom template test, available application wide.  Like "
":meth:`Flask.add_template_test` but for a blueprint.  Works exactly like "
"the :meth:`app_template_test` decorator."
msgstr ""

# c513a11bcddc41f79ee08c239e942fc6
#: flask.blueprints.Blueprint.add_url_rule:1 of
msgid ""
"Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for "
"the :func:`url_for` function is prefixed with the name of the blueprint."
msgstr ""

# 58df4da6b2e84076bb6b5859fe8342ee
#: flask.blueprints.Blueprint.after_app_request:1 of
msgid ""
"Like :meth:`Flask.after_request` but for a blueprint.  Such a function is"
" executed after each request, even if outside of the blueprint."
msgstr ""

# bb76a8f1a87c4c00985c0158057ba0ec
#: flask.blueprints.Blueprint.app_context_processor:1 of
msgid ""
"Like :meth:`Flask.context_processor` but for a blueprint.  Such a "
"function is executed each request, even if outside of the blueprint."
msgstr ""

# a77cbe9a609f4e5ea53ca7f704209faa
#: flask.blueprints.Blueprint.app_errorhandler:1 of
msgid ""
"Like :meth:`Flask.errorhandler` but for a blueprint.  This handler is "
"used for all requests, even if outside of the blueprint."
msgstr ""

# b277aea51d79480fa96afedcb475215b
#: flask.blueprints.Blueprint.app_template_filter:1 of
msgid ""
"Register a custom template filter, available application wide.  Like "
":meth:`Flask.template_filter` but for a blueprint."
msgstr ""

# e3b9a3f9a331442999185c0021537065
#: flask.blueprints.Blueprint.app_template_global:1 of
msgid ""
"Register a custom template global, available application wide.  Like "
":meth:`Flask.template_global` but for a blueprint."
msgstr ""

# 90edd64592574fe793eda0b3fbbe70e5
#: flask.blueprints.Blueprint.app_template_test:1 of
msgid ""
"Register a custom template test, available application wide.  Like "
":meth:`Flask.template_test` but for a blueprint."
msgstr ""

# fac34bea576d451593d29733ae91bb84
#: flask.blueprints.Blueprint.app_url_defaults:1 of
msgid "Same as :meth:`url_defaults` but application wide."
msgstr ""

# 8b11c2e05101416b9f1cf09a9797785b
#: flask.blueprints.Blueprint.app_url_value_preprocessor:1 of
msgid "Same as :meth:`url_value_preprocessor` but application wide."
msgstr ""

# 616c1732634a486883949092e7741723
#: flask.blueprints.Blueprint.before_app_first_request:1 of
msgid ""
"Like :meth:`Flask.before_first_request`.  Such a function is executed "
"before the first request to the application."
msgstr ""

# 295f00621cbd4a858af6c93cfd732a72
#: flask.blueprints.Blueprint.before_app_request:1 of
msgid ""
"Like :meth:`Flask.before_request`.  Such a function is executed before "
"each request, even if outside of a blueprint."
msgstr ""

#: ../../docstring flask.Blueprint.json_decoder:1 of
msgid ""
"Blueprint local JSON decoder class to use. Set to ``None`` to use the "
"app's :class:`~flask.Flask.json_decoder`."
msgstr ""

#: ../../docstring flask.Blueprint.json_encoder:1 of
msgid ""
"Blueprint local JSON encoder class to use. Set to ``None`` to use the "
"app's :class:`~flask.Flask.json_encoder`."
msgstr ""

# dc7ff35d15934e37b7f9c97c846effd8
#: flask.blueprints.Blueprint.make_setup_state:1 of
msgid ""
"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState` "
"object that is later passed to the register callback functions. "
"Subclasses can override this to return a subclass of the setup state."
msgstr ""

# bc167e203a084ae8964158c96d0a5177
#: flask.blueprints.Blueprint.record:1 of
msgid ""
"Registers a function that is called when the blueprint is registered on "
"the application.  This function is called with the state as argument as "
"returned by the :meth:`make_setup_state` method."
msgstr ""

# d6c80b92804d401c805046961cd5832c
#: flask.blueprints.Blueprint.record_once:1 of
msgid ""
"Works like :meth:`record` but wraps the function in another function that"
" will ensure the function is only called once.  If the blueprint is "
"registered a second time on the application, the function passed is not "
"called."
msgstr ""

# c22f8998e7b64233a5af05f7ca798e4f
#: flask.blueprints.Blueprint.register:1 of
msgid ""
"Called by :meth:`Flask.register_blueprint` to register all views and "
"callbacks registered on the blueprint with the application. Creates a "
":class:`.BlueprintSetupState` and calls each :meth:`record` callback with"
" it."
msgstr ""

# df6f1c117c5a4dc2a8be229e4dcb6a56
#: flask.blueprints.Blueprint.register:6 of
msgid "The application this blueprint is being registered with."
msgstr ""

# 69db41e02299475fa42b40c100da77f3
#: flask.blueprints.Blueprint.register:8 of
msgid "Keyword arguments forwarded from :meth:`~Flask.register_blueprint`."
msgstr ""

#: flask.blueprints.Blueprint.register:11 of
msgid ""
"Nested blueprints are registered with their dotted name. This allows "
"different blueprints with the same name to be nested at different "
"locations."
msgstr ""

#: flask.blueprints.Blueprint.register:22 of
msgid ""
"Registering the same blueprint with the same name multiple times is "
"deprecated and will become an error in Flask 2.1."
msgstr ""

#: flask.blueprints.Blueprint.register_blueprint:1 of
msgid ""
"Register a :class:`~flask.Blueprint` on this blueprint. Keyword arguments"
" passed to this method will override the defaults set on the blueprint."
msgstr ""

# 21de2bb2751448e89697324cf7fc4688
#: flask.blueprints.Blueprint.teardown_app_request:1 of
msgid ""
"Like :meth:`Flask.teardown_request` but for a blueprint.  Such a function"
" is executed when tearing down each request, even if outside of the "
"blueprint."
msgstr ""

# 82ab6fec1c1d48988ae7f6d64c6e0205
#: ../../flask/docs/api.rst:27
msgid "Incoming Request Data"
msgstr ""

# c8e8eb9421dc4433b6e8cc02b4b85d8c
#: flask.wrappers.Request:1 of
msgid ""
"The request object used by default in Flask.  Remembers the matched "
"endpoint and view arguments."
msgstr ""

# e253bebc1ff6452dae6a437cb8286862
#: flask.wrappers.Request:4 of
msgid ""
"It is what ends up as :class:`~flask.request`.  If you want to replace "
"the request object used you can subclass this and set "
":attr:`~flask.Flask.request_class` to your subclass."
msgstr ""

# 82c56675cc5b4f06a6479d6c3d8d7457
#: flask.wrappers.Request:8 of
msgid ""
"The request object is a :class:`~werkzeug.wrappers.Request` subclass and "
"provides all of the attributes Werkzeug defines plus a few Flask specific"
" ones."
msgstr ""

# 59783f8b5a754c0bada2ab7292d6968d
#: flask.Request.accept_charsets:1 of
msgid ""
"List of charsets this client supports as "
":class:`~werkzeug.datastructures.CharsetAccept` object."
msgstr ""

# 90b2b17cf9334e3bb1ae08ad27bd7d98
#: flask.Request.accept_encodings:1 of
msgid ""
"List of encodings this client accepts.  Encodings in a HTTP term are "
"compression encodings such as gzip.  For charsets have a look at "
":attr:`accept_charset`."
msgstr ""

# f0512fbdfff8437086cf273fb14a2ff3
#: flask.Request.accept_languages:1 of
msgid ""
"List of languages this client accepts as "
":class:`~werkzeug.datastructures.LanguageAccept` object."
msgstr ""

# 12ce3433cb0b4ce3a781a5398e6f7b60
#: flask.Request.accept_mimetypes:1 of
msgid ""
"List of mimetypes this client supports as "
":class:`~werkzeug.datastructures.MIMEAccept` object."
msgstr ""

#: ../../docstring flask.Request.access_control_request_headers:1 of
msgid ""
"Sent with a preflight request to indicate which headers will be sent with"
" the cross origin request. Set "
":attr:`~CORSResponseMixin.access_control_allow_headers` on the response "
"to indicate which headers are allowed."
msgstr ""

#: ../../docstring flask.Request.access_control_request_method:1 of
msgid ""
"Sent with a preflight request to indicate which method will be used for "
"the cross origin request. Set "
":attr:`~CORSResponseMixin.access_control_allow_methods` on the response "
"to indicate which methods are allowed."
msgstr ""

# 64226706dd854961913759b576104ff4
#: flask.Request.access_route:1 of
msgid ""
"If a forwarded header exists this is a list of all ip addresses from the "
"client ip to the last proxy server."
msgstr ""

# 82cb62aab5e84e318bfb0df4ca5efd3f
#: of werkzeug.wrappers.request.Request.application:1
msgid ""
"Decorate a function as responder that accepts the request as the last "
"argument.  This works like the :func:`responder` decorator but the "
"function is passed the request object as the last argument and the "
"request object will be closed automatically::"
msgstr ""

# 9cc7e33639544fc8a895908cc2c8c7dd
#: of werkzeug.wrappers.request.Request.application:11
msgid ""
"As of Werkzeug 0.14 HTTP exceptions are automatically caught and "
"converted to responses instead of failing."
msgstr ""

# 2a822e2515184200b9d12d26f46715f6
#: of werkzeug.wrappers.request.Request.application:14
msgid "the WSGI callable to decorate"
msgstr ""

# 7d6ceea9aaad4337a48c44fa1bdb5af3
#: of werkzeug.wrappers.request.Request.application:15
msgid "a new WSGI callable"
msgstr ""

# 58f81108fef14b2494ea91ae91c7e0a3
#: flask.Request.args:1 of
msgid "The parsed URL parameters (the part in the URL after the question mark)."
msgstr ""

# 358c05c1165c441e81f03f40919ec2b1
#: flask.Request.args:4 of
msgid ""
"By default an :class:`~werkzeug.datastructures.ImmutableMultiDict` is "
"returned from this function.  This can be changed by setting "
":attr:`parameter_storage_class` to a different type.  This might be "
"necessary if the order of the form data is important."
msgstr ""

# 1cfc17c0ebbe4fc2a7a2bd96ca818abe
#: flask.Request.authorization:1 of
msgid "The `Authorization` object in parsed form."
msgstr ""

#: flask.Request.base_url:1 of
msgid "Like :attr:`url` but without the query string."
msgstr ""

#: flask.Request.blueprint:1 of
msgid "The registered name of the current blueprint."
msgstr ""

#: flask.Request.blueprint:3 of
msgid ""
"This will be ``None`` if the endpoint is not part of a blueprint, or if "
"URL matching failed or has not been performed yet."
msgstr ""

#: flask.Request.blueprint:7 of
msgid ""
"This does not necessarily match the name the blueprint was created with. "
"It may have been nested, or registered with a different name."
msgstr ""

#: flask.Request.blueprints:1 of
msgid ""
"The registered names of the current blueprint upwards through parent "
"blueprints."
msgstr ""

#: flask.Request.blueprints:4 of
msgid ""
"This will be an empty list if there is no current blueprint, or if URL "
"matching failed."
msgstr ""

# 3e962582c4a649d0ab77a85bb1f49caf
#: flask.Request.cache_control:1 of
msgid ""
"A :class:`~werkzeug.datastructures.RequestCacheControl` object for the "
"incoming cache control headers."
msgstr ""

# 58192f262b744177aa3acea0229dcc06
#: of werkzeug.wrappers.request.Request.close:1
msgid ""
"Closes associated resources of this request object.  This closes all file"
" handles explicitly.  You can also use the request object in a with "
"statement which will automatically close it."
msgstr ""

# adb9aac84a974337b0fd81bcfc34f533
#: ../../docstring flask.Request.content_encoding:1
#: flask.Response.content_encoding:1 of
msgid ""
"The Content-Encoding entity-header field is used as a modifier to the "
"media-type. When present, its value indicates what additional content "
"codings have been applied to the entity-body, and thus what decoding "
"mechanisms must be applied in order to obtain the media-type referenced "
"by the Content-Type header field."
msgstr ""

# 82790fa6ab1347b2bf2acd8d1c5c4661
#: flask.Request.content_length:1 of
msgid ""
"The Content-Length entity-header field indicates the size of the entity-"
"body in bytes or, in the case of the HEAD method, the size of the entity-"
"body that would have been sent had the request been a GET."
msgstr ""

# 25a7f7b120634ce2957d0fc927c4daed
#: ../../docstring flask.Request.content_md5:1 flask.Response.content_md5:1 of
msgid ""
"The Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 "
"digest of the entity-body for the purpose of providing an end-to-end "
"message integrity check (MIC) of the entity-body. (Note: a MIC is good "
"for detecting accidental modification of the entity-body in transit, but "
"is not proof against malicious attacks.)"
msgstr ""

# cb7bf625cbea42af9d52f2c08def5310
#: ../../docstring flask.Request.content_type:1 flask.Response.content_type:1
#: of
msgid ""
"The Content-Type entity-header field indicates the media type of the "
"entity-body sent to the recipient or, in the case of the HEAD method, the"
" media type that would have been sent had the request been a GET."
msgstr ""

# b924ac8491b145fc8fb69f2fcb29e3d7
#: flask.Request.cookies:1 of
msgid ""
"A :class:`dict` with the contents of all cookies transmitted with the "
"request."
msgstr ""

# 2b8b5029df5e496bbc81c5e63724c1b1
#: flask.Request.data:1 of
msgid ""
"Contains the incoming request data as string in case it came with a "
"mimetype Werkzeug does not handle."
msgstr ""

# 28888659997b4c098ba29f464de77d5f
#: ../../docstring flask.Request.date:1 flask.Response.date:1 of
msgid ""
"The Date general-header field represents the date and time at which the "
"message was originated, having the same semantics as orig-date in RFC "
"822."
msgstr ""

#: ../../docstring flask.Request.date:5 flask.Request.if_modified_since:3
#: flask.Request.if_unmodified_since:3 flask.Response.date:5
#: flask.Response.expires:5 flask.Response.last_modified:5
#: flask.Response.retry_after:7 of
msgid "The datetime object is timezone-aware."
msgstr ""

#: flask.Request.endpoint:1 of
msgid "The endpoint that matched the request URL."
msgstr ""

#: flask.Request.endpoint:3 of
msgid "This will be ``None`` if matching failed or has not been performed yet."
msgstr ""

#: flask.Request.endpoint:6 of
msgid ""
"This in combination with :attr:`view_args` can be used to reconstruct the"
" same URL or a modified URL."
msgstr ""

#: ../../docstring flask.Request.environ:1 of
msgid ""
"The WSGI environment containing HTTP headers and information from the "
"WSGI server."
msgstr ""

# 6d938f9e073742bbadfa068982c1ff1e
#: flask.Request.files:1 of
msgid ""
":class:`~werkzeug.datastructures.MultiDict` object containing all "
"uploaded files.  Each key in :attr:`files` is the name from the ``<input "
"type=\"file\" name=\"\">``.  Each value in :attr:`files` is a Werkzeug "
":class:`~werkzeug.datastructures.FileStorage` object."
msgstr ""

# 074004b8c6474fb08372218e0e473c80
#: flask.Request.files:6 of
msgid ""
"It basically behaves like a standard file object you know from Python, "
"with the difference that it also has a "
":meth:`~werkzeug.datastructures.FileStorage.save` function that can store"
" the file on the filesystem."
msgstr ""

# 0e744c16e0784dbd8da00918ef2bb6c4
#: flask.Request.files:11 of
msgid ""
"Note that :attr:`files` will only contain data if the request method was "
"POST, PUT or PATCH and the ``<form>`` that posted to the request had "
"``enctype=\"multipart/form-data\"``.  It will be empty otherwise."
msgstr ""

# 574ffe8685f7425c9f02aa4587a6fe5f
#: flask.Request.files:15 of
msgid ""
"See the :class:`~werkzeug.datastructures.MultiDict` / "
":class:`~werkzeug.datastructures.FileStorage` documentation for more "
"details about the used data structure."
msgstr ""

# d663d3e606ce4093a95dbc9220d94b5c
#: flask.Request.form:1 of
msgid ""
"The form parameters.  By default an "
":class:`~werkzeug.datastructures.ImmutableMultiDict` is returned from "
"this function.  This can be changed by setting "
":attr:`parameter_storage_class` to a different type.  This might be "
"necessary if the order of the form data is important."
msgstr ""

# 001c2d43caea4bcd8330bbb02f841c8f
#: flask.Request.form:7 of
msgid ""
"Please keep in mind that file uploads will not end up here, but instead "
"in the :attr:`files` attribute."
msgstr ""

# f7dd90684ec344eca5e4157a09562909
#: flask.Request.form:12 of
msgid ""
"Previous to Werkzeug 0.9 this would only contain form data for POST and "
"PUT requests."
msgstr ""

# 0f2441b528184c6cb6d0db7946464d7e
#: of werkzeug.wrappers.request.Request.from_values:1
msgid ""
"Create a new request object based on the values provided.  If environ is "
"given missing values are filled from there.  This method is useful for "
"small scripts when you need to simulate a request from an URL. Do not use"
" this method for unittesting, there is a full featured client object "
"(:class:`Client`) that allows to create multipart requests, support for "
"cookies etc."
msgstr ""

# 3ba5207a36d84dcea772303a8f37931c
#: of werkzeug.wrappers.request.Request.from_values:8
msgid ""
"This accepts the same options as the "
":class:`~werkzeug.test.EnvironBuilder`."
msgstr ""

# b95e2ff2d9a0496da966d9810d9a26db
#: of werkzeug.wrappers.request.Request.from_values:11
msgid ""
"This method now accepts the same arguments as "
":class:`~werkzeug.test.EnvironBuilder`.  Because of this the `environ` "
"parameter is now called `environ_overrides`."
msgstr ""

# 646f50cab1204808b3bf69731f4d4c68
#: of werkzeug.wrappers.request.Request.from_values:16
msgid "request object"
msgstr ""

#: flask.Request.full_path:1 of
msgid "Requested path, including the query string."
msgstr ""

#: of werkzeug.wrappers.request.Request.get_data:1
msgid ""
"This reads the buffered incoming data from the client into one bytes "
"object.  By default this is cached but that behavior can be changed by "
"setting `cache` to `False`."
msgstr ""

# f61fed7814a7462184b4ff33d399779e
#: of werkzeug.wrappers.request.Request.get_data:5
msgid ""
"Usually it's a bad idea to call this method without checking the content "
"length first as a client could send dozens of megabytes or more to cause "
"memory problems on the server."
msgstr ""

# bc627daf42cf43ccbe304b6395fb5748
#: of werkzeug.wrappers.request.Request.get_data:9
msgid ""
"Note that if the form data was already parsed this method will not return"
" anything as form data parsing does not cache the data like this method "
"does.  To implicitly invoke form data parsing function set "
"`parse_form_data` to `True`.  When this is done the return value of this "
"method will be an empty string if the form parser handles the data.  This"
" generally is not necessary as if the whole data is cached (which is the "
"default) the form parser will used the cached data to parse the form "
"data.  Please be generally aware of checking the content length first in "
"any case before calling this method to avoid exhausting server memory."
msgstr ""

#: of werkzeug.wrappers.request.Request.get_data:20
#: werkzeug.wrappers.response.Response.get_data:8
msgid "If `as_text` is set to `True` the return value will be a decoded string."
msgstr ""

# c5814cdc83d448d08f531b2caa89f9ac
# 9bc6e475badf499eacec93e2b89781a8
#: of werkzeug.wrappers.request.Request.get_json:1
msgid "Parse :attr:`data` as JSON."
msgstr ""

# 87c90f992a254b7abd409aaec240e740
# a6d334f767c24220a06e023f5de8e012
#: of werkzeug.wrappers.request.Request.get_json:3
#: werkzeug.wrappers.response.Response.get_json:3
msgid ""
"If the mimetype does not indicate JSON (:mimetype:`application/json`, see"
" :meth:`is_json`), this returns ``None``."
msgstr ""

# 9ece7b8d6082424394bd54ff4da85e62
# cbf00b5895324822bb3929bd2f1d4891
#: of werkzeug.wrappers.request.Request.get_json:7
msgid ""
"If parsing fails, :meth:`on_json_loading_failed` is called and its return"
" value is used as the return value."
msgstr ""

# 0ff6709deda94ce79f5af468b1bf107b
# 8f5fedeb80944d2c920660c67ab68094
#: of werkzeug.wrappers.request.Request.get_json:10
#: werkzeug.wrappers.response.Response.get_json:9
msgid "Ignore the mimetype and always try to parse JSON."
msgstr ""

# e590fc781ecd422d8edea0df65dd310f
# 6ce0df219d0b4485a2360aa6c0c38837
#: of werkzeug.wrappers.request.Request.get_json:11
#: werkzeug.wrappers.response.Response.get_json:10
msgid "Silence parsing errors and return ``None`` instead."
msgstr ""

# 3c713818526d489b8c39db7f6d71bbc7
# 81271b5174c646d4a03f520103e91181
#: of werkzeug.wrappers.request.Request.get_json:13
msgid "Store the parsed JSON to return for subsequent calls."
msgstr ""

#: ../../docstring flask.Request.headers:1 of
msgid "The headers received with the request."
msgstr ""

#: flask.Request.host:1 of
msgid ""
"The host name the request was made to, including the port if it's non-"
"standard. Validated with :attr:`trusted_hosts`."
msgstr ""

#: flask.Request.host_url:1 of
msgid "The request URL scheme and host only."
msgstr ""

# d9ef76e2a2164895945a1b581eb18f2c
#: flask.Request.if_match:1 of
msgid "An object containing all the etags in the `If-Match` header."
msgstr ""

# a00e2b0a86be4c31879f904981ee039c
# c5ae1033636e47988fb214b4ee85f888
#: flask.Request.if_match:3 flask.Request.if_none_match:3 of
msgid ":class:`~werkzeug.datastructures.ETags`"
msgstr ""

#: flask.Request.if_modified_since:1 of
msgid "The parsed `If-Modified-Since` header as a datetime object."
msgstr ""

# c48d45fb48714df18e751f01ef3b64d9
#: flask.Request.if_none_match:1 of
msgid "An object containing all the etags in the `If-None-Match` header."
msgstr ""

#: flask.Request.if_range:1 of
msgid "The parsed ``If-Range`` header."
msgstr ""

#: flask.Request.if_range:3 of
msgid "``IfRange.date`` is timezone-aware."
msgstr ""

#: flask.Request.if_unmodified_since:1 of
msgid "The parsed `If-Unmodified-Since` header as a datetime object."
msgstr ""

#: ../../docstring flask.Request.input_stream:1 of
msgid "The WSGI input stream."
msgstr ""

#: ../../docstring flask.Request.input_stream:3 of
msgid ""
"In general it's a bad idea to use this one because you can easily read "
"past the boundary.  Use the :attr:`stream` instead."
msgstr ""

# 2c42aa1beb9544fe93818da12467a229
# fcd4ec498ea04c4a9470764230ab798a
#: flask.Request.is_json:1 flask.Response.is_json:1 of
msgid ""
"Check if the mimetype indicates JSON data, either "
":mimetype:`application/json` or :mimetype:`application/*+json`."
msgstr ""

# ef6963666c5b461794d4dec1c29b7591
#: ../../docstring flask.Request.is_multiprocess:1 of
msgid ""
"boolean that is `True` if the application is served by a WSGI server that"
" spawns multiple processes."
msgstr ""

# fe5eb64dbf984afa8a100c7635475b74
#: ../../docstring flask.Request.is_multithread:1 of
msgid ""
"boolean that is `True` if the application is served by a multithreaded "
"WSGI server."
msgstr ""

# e66d942b21714a788912a7b70195577f
#: ../../docstring flask.Request.is_run_once:1 of
msgid ""
"boolean that is `True` if the application will be executed only once in a"
" process lifetime.  This is the case for CGI for example, but it's not "
"guaranteed that the execution only happens one time."
msgstr ""

#: flask.Request.is_secure:1 of
msgid "``True`` if the request was made with a secure protocol (HTTPS or WSS)."
msgstr ""

# c76d2743ea65428192733951b3bd6806
#: flask.Request.json:1 flask.Response.json:1 of
msgid ""
"The parsed JSON data if :attr:`mimetype` indicates JSON "
"(:mimetype:`application/json`, see :meth:`is_json`)."
msgstr ""

# ae7321cf272e416aad50a09a91e6c017
#: flask.Request.json:4 flask.Response.json:4 of
msgid "Calls :meth:`get_json` with default arguments."
msgstr ""

# 413bcd31f28f4d83bce8989923a70be6
#: of werkzeug.wrappers.request.Request.make_form_data_parser:1
msgid ""
"Creates the form data parser. Instantiates the "
":attr:`form_data_parser_class` with some parameters."
msgstr ""

# 596d0a8ecb7a479083e7c69b7dbc2dbc
#: flask.Request.max_content_length:1 of
msgid "Read-only view of the ``MAX_CONTENT_LENGTH`` config key."
msgstr ""

# a925b42b629f4920bce7d75aa53b58e2
#: ../../docstring flask.Request.max_forwards:1 of
msgid ""
"The Max-Forwards request-header field provides a mechanism with the TRACE"
" and OPTIONS methods to limit the number of proxies or gateways that can "
"forward the request to the next inbound server."
msgstr ""

#: ../../docstring flask.Request.method:1 of
msgid "The method the request was made with, such as ``GET``."
msgstr ""

# fb24c6c427554118bdde259f2bf080c1
#: flask.Request.mimetype:1 of
msgid ""
"Like :attr:`content_type`, but without parameters (eg, without charset, "
"type etc.) and always lowercase.  For example if the content type is "
"``text/HTML; charset=utf-8`` the mimetype would be ``'text/html'``."
msgstr ""

# 356dd155804a48dea14fb64a16f9ae62
#: flask.Request.mimetype_params:1 of
msgid ""
"The mimetype parameters as dict.  For example if the content type is "
"``text/html; charset=utf-8`` the params would be ``{'charset': "
"'utf-8'}``."
msgstr ""

# ab577a0b56564326b8fcfef66d1d0fb4
#: flask.wrappers.Request.on_json_loading_failed:1 of
msgid ""
"Called if :meth:`get_json` parsing fails and isn't silenced. If this "
"method returns a value, it is used as the return value for "
":meth:`get_json`. The default implementation raises "
":exc:`~werkzeug.exceptions.BadRequest`."
msgstr ""

#: ../../docstring flask.Request.origin:1 of
msgid ""
"The host that the request originated from. Set "
":attr:`~CORSResponseMixin.access_control_allow_origin` on the response to"
" indicate which origins are allowed."
msgstr ""

#: ../../docstring flask.Request.path:1 of
msgid ""
"The path part of the URL after :attr:`root_path`. This is the path used "
"for routing within the application."
msgstr ""

# 268db45fd38a4e94b7c8c5067eb61ca0
#: flask.Request.pragma:1 of
msgid ""
"The Pragma general-header field is used to include implementation-"
"specific directives that might apply to any recipient along the "
"request/response chain.  All pragma directives specify optional behavior "
"from the viewpoint of the protocol; however, some systems MAY require "
"that behavior be consistent with the directives."
msgstr ""

#: ../../docstring flask.Request.query_string:1 of
msgid ""
"The part of the URL after the \"?\". This is the raw value, use "
":attr:`args` for the parsed values."
msgstr ""

# 81b7f343940a4eb2bc7bfea67b229ec1
#: flask.Request.range:1 of
msgid "The parsed `Range` header."
msgstr ""

# 18c36f7d1ece4d9fb8449c976d36f493
#: flask.Request.range:5 of
msgid ":class:`~werkzeug.datastructures.Range`"
msgstr ""

# 4e557bbb01db4d0cb82016efcdcd3b90
#: ../../docstring flask.Request.referrer:1 of
msgid ""
"The Referer[sic] request-header field allows the client to specify, for "
"the server's benefit, the address (URI) of the resource from which the "
"Request-URI was obtained (the \"referrer\", although the header field is "
"misspelled)."
msgstr ""

#: ../../docstring flask.Request.remote_addr:1 of
msgid "The address of the client sending the request."
msgstr ""

# d177ff6751ec4550b3b858df134ca98b
#: ../../docstring flask.Request.remote_user:1 of
msgid ""
"If the server supports user authentication, and the script is protected, "
"this attribute contains the username the user has authenticated as."
msgstr ""

#: ../../docstring flask.Request.root_path:1 of
msgid ""
"The prefix that the application is mounted under, without a trailing "
"slash. :attr:`path` comes after this."
msgstr ""

#: flask.Request.root_url:1 of
msgid ""
"The request URL scheme, host, and root path. This is the root that the "
"application is accessed from."
msgstr ""

# ffa062d2e00c4766897580b69e3bbba6
#: ../../docstring flask.Request.routing_exception:1 of
msgid ""
"If matching the URL failed, this is the exception that will be raised / "
"was raised as part of the request handling.  This is usually a "
":exc:`~werkzeug.exceptions.NotFound` exception or something similar."
msgstr ""

#: ../../docstring flask.Request.scheme:1 of
msgid ""
"The URL scheme of the protocol the request used, such as ``https`` or "
"``wss``."
msgstr ""

#: flask.Request.script_root:1 of
msgid ""
"Alias for :attr:`self.root_path`. ``environ[\"SCRIPT_ROOT\"]`` without a "
"trailing slash."
msgstr ""

#: ../../docstring flask.Request.server:1 of
msgid ""
"The address of the server. ``(host, port)``, ``(path, None)`` for unix "
"sockets, or ``None`` if not known."
msgstr ""

#: ../../docstring flask.Request.shallow:1 of
msgid ""
"Set when creating the request object. If ``True``, reading from the "
"request body will cause a ``RuntimeException``. Useful to prevent "
"modifying the stream from middleware."
msgstr ""

# c93c16c7e0af4e27acad97a3db162c6f
#: flask.Request.stream:1 of
msgid ""
"If the incoming form data was not encoded with a known mimetype the data "
"is stored unmodified in this stream for consumption.  Most of the time it"
" is a better idea to use :attr:`data` which will give you that data as a "
"string.  The stream only returns the data once."
msgstr ""

# 8ef258c367a04dcb882fb1d113842d6d
#: flask.Request.stream:6 of
msgid ""
"Unlike :attr:`input_stream` this stream is properly guarded that you "
"can't accidentally read past the length of the input.  Werkzeug will "
"internally always refer to this stream to read data which makes it "
"possible to wrap this object with a stream that does filtering."
msgstr ""

# aa21cf9f059e4a91a269cffce232c4f6
#: flask.Request.stream:11 of
msgid ""
"This stream is now always available but might be consumed by the form "
"parser later on.  Previously the stream was only set if no parsing "
"happened."
msgstr ""

#: flask.Request.url:1 of
msgid ""
"The full request URL with the scheme, host, root path, path, and query "
"string."
msgstr ""

#: flask.Request.url_charset:1 of
msgid ""
"The charset that is assumed for URLs. Defaults to the value of "
":attr:`charset`."
msgstr ""

#: flask.Request.url_root:1 of
msgid ""
"Alias for :attr:`root_url`. The URL with scheme, host, and root path. For"
" example, ``https://example.com/app/``."
msgstr ""

# e3892f0e770047c8aa575b35c1a851cb
#: ../../docstring flask.Request.url_rule:1 of
msgid ""
"The internal URL rule that matched the request.  This can be useful to "
"inspect which methods are allowed for the URL from a before/after handler"
" (``request.url_rule.methods``) etc. Though if the request's method was "
"invalid for the URL rule, the valid list is available in "
"``routing_exception.valid_methods`` instead (an attribute of the Werkzeug"
" exception :exc:`~werkzeug.exceptions.MethodNotAllowed`) because the "
"request was never internally bound."
msgstr ""

#: flask.Request.user_agent:1 of
msgid ""
"The user agent. Use ``user_agent.string`` to get the header value. Set "
":attr:`user_agent_class` to a subclass of "
":class:`~werkzeug.user_agent.UserAgent` to provide parsing for the other "
"properties or other extended data."
msgstr ""

#: flask.Request.user_agent:6 of
msgid ""
"The built in parser is deprecated and will be removed in Werkzeug 2.1. A "
"``UserAgent`` subclass must be set to parse data from the string."
msgstr ""

# 2b16211378a143f7bcb8f393cfe80148
#: flask.Request.values:1 of
msgid ""
"A :class:`werkzeug.datastructures.CombinedMultiDict` that combines "
":attr:`args` and :attr:`form`."
msgstr ""

#: flask.Request.values:4 flask.Request.values:6 of
msgid "For GET requests, only ``args`` are present, not ``form``."
msgstr ""

# 8a908da73c57454cbe35eddcabcd594e
#: ../../docstring flask.Request.view_args:1 of
msgid ""
"A dict of view arguments that matched the request.  If an exception "
"happened when matching, this will be ``None``."
msgstr ""

#: flask.Request.want_form_data_parsed:1 of
msgid ""
"``True`` if the request method carries content. By default this is true "
"if a ``Content-Type`` is sent."
msgstr ""

# 3e68b6924f2a41938c0bcfd8de510441
#: ../../flask/docs/api.rst:36
msgid ""
"To access incoming request data, you can use the global `request` object."
"  Flask parses incoming request data for you and gives you access to it "
"through that global object.  Internally Flask makes sure that you always "
"get the correct data for the active thread if you are in a multithreaded "
"environment."
msgstr ""

# c676567fe09d4a57a92af46b58ee9d5e
# ca824b21305640a7baf3fe4afe570103
#: ../../flask/docs/api.rst:42 ../../flask/docs/api.rst:72
msgid "This is a proxy.  See :ref:`notes-on-proxies` for more information."
msgstr ""

#: ../../flask/docs/api.rst:44
msgid "The request object is an instance of a :class:`~flask.Request`."
msgstr ""

# 0d3b5b2521a34d6b81e398f038587cb8
#: ../../flask/docs/api.rst:48
msgid "Response Objects"
msgstr ""

# 557f3709d8ee4d56aca6edee14cf019a
#: flask.wrappers.Response:1 of
msgid ""
"The response object that is used by default in Flask.  Works like the "
"response object from Werkzeug but is set to have an HTML mimetype by "
"default.  Quite often you don't have to create this object yourself "
"because :meth:`~flask.Flask.make_response` will take care of that for "
"you."
msgstr ""

# 05a2308c8d394ebd84c4f6d23b325173
#: flask.wrappers.Response:6 of
msgid ""
"If you want to replace the response object used you can subclass this and"
" set :attr:`~flask.Flask.response_class` to your subclass."
msgstr ""

# 8383c691827d4f1589d3a934e10ea275
#: flask.wrappers.Response:9 of
msgid ""
"JSON support is added to the response, like the request. This is useful "
"when testing to get the test client response data as JSON."
msgstr ""

# 3e4dabb03b934c3aa8a3d71f1f5d208f
#: flask.wrappers.Response:15 of
msgid "Added :attr:`max_cookie_size`."
msgstr ""

#: ../../docstring flask.Response.accept_ranges:1 of
msgid ""
"The `Accept-Ranges` header. Even though the name would indicate that "
"multiple values are supported, it must be one string token only."
msgstr ""

#: ../../docstring flask.Response.accept_ranges:5 of
msgid "The values ``'bytes'`` and ``'none'`` are common."
msgstr ""

#: flask.Response.access_control_allow_credentials:1 of
msgid ""
"Whether credentials can be shared by the browser to JavaScript code. As "
"part of the preflight request it indicates whether credentials can be "
"used on the cross origin request."
msgstr ""

#: ../../docstring flask.Response.access_control_allow_headers:1 of
msgid "Which headers can be sent with the cross origin request."
msgstr ""

#: ../../docstring flask.Response.access_control_allow_methods:1 of
msgid "Which methods can be used for the cross origin request."
msgstr ""

#: ../../docstring flask.Response.access_control_allow_origin:1 of
msgid "The origin or '*' for any origin that may make cross origin requests."
msgstr ""

#: ../../docstring flask.Response.access_control_expose_headers:1 of
msgid "Which headers can be shared by the browser to JavaScript code."
msgstr ""

#: ../../docstring flask.Response.access_control_max_age:1 of
msgid "The maximum age in seconds the access control settings can be cached for."
msgstr ""

#: of werkzeug.wrappers.response.Response.add_etag:1
msgid "Add an etag for the current response if there is none yet."
msgstr ""

#: of werkzeug.wrappers.response.Response.add_etag:3
msgid ""
"SHA-1 is used to generate the value. MD5 may not be available in some "
"environments."
msgstr ""

#: ../../docstring flask.Response.age:1 of
msgid ""
"The Age response-header field conveys the sender's estimate of the amount"
" of time since the response (or its revalidation) was generated at the "
"origin server."
msgstr ""

#: ../../docstring flask.Response.age:5 of
msgid ""
"Age values are non-negative decimal integers, representing time in "
"seconds."
msgstr ""

#: flask.Response.allow:1 of
msgid ""
"The Allow entity-header field lists the set of methods supported by the "
"resource identified by the Request-URI. The purpose of this field is "
"strictly to inform the recipient of valid methods associated with the "
"resource. An Allow header field MUST be present in a 405 (Method Not "
"Allowed) response."
msgstr ""

#: flask.Response.cache_control:1 of
msgid ""
"The Cache-Control general-header field is used to specify directives that"
" MUST be obeyed by all caching mechanisms along the request/response "
"chain."
msgstr ""

#: of werkzeug.wrappers.response.Response.calculate_content_length:1
msgid "Returns the content length if available or `None` otherwise."
msgstr ""

#: of werkzeug.wrappers.response.Response.call_on_close:1
msgid ""
"Adds a function to the internal list of functions that should be called "
"as part of closing down the response.  Since 0.7 this function also "
"returns the function that was passed so that this can be used as a "
"decorator."
msgstr ""

#: of werkzeug.wrappers.response.Response.close:1
msgid ""
"Close the wrapped response if possible.  You can also use the object in a"
" with statement which will automatically close it."
msgstr ""

#: of werkzeug.wrappers.response.Response.close:4
msgid "Can now be used in a with statement."
msgstr ""

#: flask.Response.content_language:1 of
msgid ""
"The Content-Language entity-header field describes the natural "
"language(s) of the intended audience for the enclosed entity. Note that "
"this might not be equivalent to all the languages used within the entity-"
"body."
msgstr ""

#: ../../docstring flask.Response.content_length:1 of
msgid ""
"The Content-Length entity-header field indicates the size of the entity-"
"body, in decimal number of OCTETs, sent to the recipient or, in the case "
"of the HEAD method, the size of the entity-body that would have been sent"
" had the request been a GET."
msgstr ""

#: ../../docstring flask.Response.content_location:1 of
msgid ""
"The Content-Location entity-header field MAY be used to supply the "
"resource location for the entity enclosed in the message when that entity"
" is accessible from a location separate from the requested resource's "
"URI."
msgstr ""

#: flask.Response.content_range:1 of
msgid ""
"The ``Content-Range`` header as a "
":class:`~werkzeug.datastructures.ContentRange` object. Available even if "
"the header is not set."
msgstr ""

#: ../../docstring flask.Response.content_security_policy:1 of
msgid ""
"The Content-Security-Policy header adds an additional layer of security "
"to help detect and mitigate certain types of attacks."
msgstr ""

#: ../../docstring flask.Response.content_security_policy_report_only:1 of
msgid ""
"The Content-Security-Policy-Report-Only header adds a csp policy that is "
"not enforced but is reported thereby helping detect certain types of "
"attacks."
msgstr ""

#: ../../docstring flask.Response.cross_origin_embedder_policy:1 of
msgid ""
"Prevents a document from loading any cross-origin resources that do not "
"explicitly grant the document permission. Values must be a member of the "
":class:`werkzeug.http.COEP` enum."
msgstr ""

#: ../../docstring flask.Response.cross_origin_opener_policy:1 of
msgid ""
"Allows control over sharing of browsing context group with cross-origin "
"documents. Values must be a member of the :class:`werkzeug.http.COOP` "
"enum."
msgstr ""

# a732bd6af68248329e29c9eb7db9dd3d
#: flask.Response.data:1 of
msgid "A descriptor that calls :meth:`get_data` and :meth:`set_data`."
msgstr ""

#: of werkzeug.sansio.response.Response.delete_cookie:1
msgid "Delete a cookie.  Fails silently if key doesn't exist."
msgstr ""

#: of werkzeug.sansio.response.Response.delete_cookie:3
msgid "the key (name) of the cookie to be deleted."
msgstr ""

#: of werkzeug.sansio.response.Response.delete_cookie:4
msgid ""
"if the cookie that should be deleted was limited to a path, the path has "
"to be defined here."
msgstr ""

#: of werkzeug.sansio.response.Response.delete_cookie:6
msgid ""
"if the cookie that should be deleted was limited to a domain, that domain"
" has to be defined here."
msgstr ""

#: of werkzeug.sansio.response.Response.delete_cookie:8
#: werkzeug.sansio.response.Response.set_cookie:19
msgid "If ``True``, the cookie will only be available via HTTPS."
msgstr ""

#: of werkzeug.sansio.response.Response.delete_cookie:10
#: werkzeug.sansio.response.Response.set_cookie:21
msgid "Disallow JavaScript access to the cookie."
msgstr ""

#: of werkzeug.sansio.response.Response.delete_cookie:11
#: werkzeug.sansio.response.Response.set_cookie:22
msgid ""
"Limit the scope of the cookie to only be attached to requests that are "
"\"same-site\"."
msgstr ""

#: ../../docstring flask.Response.direct_passthrough:1 of
msgid ""
"Pass the response body directly through as the WSGI iterable. This can be"
" used when the body is a binary file or other iterator of bytes, to skip "
"some unnecessary checks. Use :func:`~werkzeug.utils.send_file` instead of"
" setting this manually."
msgstr ""

#: ../../docstring flask.Response.expires:1 of
msgid ""
"The Expires entity-header field gives the date/time after which the "
"response is considered stale. A stale cache entry may not normally be "
"returned by a cache."
msgstr ""

#: of werkzeug.wrappers.response.Response.force_type:1
msgid ""
"Enforce that the WSGI response is a response object of the current type."
"  Werkzeug will use the :class:`Response` internally in many situations "
"like the exceptions.  If you call :meth:`get_response` on an exception "
"you will get back a regular :class:`Response` object, even if you are "
"using a custom subclass."
msgstr ""

#: of werkzeug.wrappers.response.Response.force_type:7
msgid ""
"This method can enforce a given response type, and it will also convert "
"arbitrary WSGI callables into response objects if an environ is "
"provided::"
msgstr ""

#: of werkzeug.wrappers.response.Response.force_type:18
msgid ""
"This is especially useful if you want to post-process responses in the "
"main dispatcher and use functionality provided by your subclass."
msgstr ""

#: of werkzeug.wrappers.response.Response.force_type:21
msgid "Keep in mind that this will modify response objects in place if possible!"
msgstr ""

#: of werkzeug.wrappers.response.Response.force_type:24
msgid "a response object or wsgi application."
msgstr ""

#: of werkzeug.wrappers.response.Response.force_type:25
msgid "a WSGI environment object."
msgstr ""

#: of werkzeug.wrappers.response.Response.force_type:26
#: werkzeug.wrappers.response.Response.from_app:11
msgid "a response object."
msgstr ""

#: of werkzeug.wrappers.response.Response.freeze:1
msgid "Make the response object ready to be pickled. Does the following:"
msgstr ""

#: of werkzeug.wrappers.response.Response.freeze:4
msgid ""
"Buffer the response into a list, ignoring "
":attr:`implicity_sequence_conversion` and :attr:`direct_passthrough`."
msgstr ""

#: of werkzeug.wrappers.response.Response.freeze:7
msgid "Set the ``Content-Length`` header."
msgstr ""

#: of werkzeug.wrappers.response.Response.freeze:8
msgid "Generate an ``ETag`` header if one is not already set."
msgstr ""

#: of werkzeug.wrappers.response.Response.freeze:10
msgid ""
"An ``ETag`` header is added, the ``no_etag`` parameter is deprecated and "
"will be removed in Werkzeug 2.1."
msgstr ""

#: of werkzeug.wrappers.response.Response.freeze:14
msgid "The ``Content-Length`` header is set."
msgstr ""

#: of werkzeug.wrappers.response.Response.from_app:1
msgid ""
"Create a new response object from an application output.  This works best"
" if you pass it an application that returns a generator all the time.  "
"Sometimes applications may use the `write()` callable returned by the "
"`start_response` function.  This tries to resolve such edge cases "
"automatically.  But if you don't get the expected output you should set "
"`buffered` to `True` which enforces buffering."
msgstr ""

#: of werkzeug.wrappers.response.Response.from_app:8
msgid "the WSGI application to execute."
msgstr ""

#: of werkzeug.wrappers.response.Response.from_app:9
msgid "the WSGI environment to execute against."
msgstr ""

#: of werkzeug.wrappers.response.Response.from_app:10
msgid "set to `True` to enforce buffering."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_app_iter:1
msgid ""
"Returns the application iterator for the given environ.  Depending on the"
" request method and the current status code the return value might be an "
"empty response rather than the one from the response."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_app_iter:5
msgid ""
"If the request method is `HEAD` or the status code is in a range where "
"the HTTP specification requires an empty response, an empty iterable is "
"returned."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_app_iter:11
#: werkzeug.wrappers.response.Response.get_wsgi_headers:20
#: werkzeug.wrappers.response.Response.get_wsgi_response:10
msgid "the WSGI environment of the request."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_app_iter:12
msgid "a response iterable."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_data:1
msgid ""
"The string representation of the response body.  Whenever you call this "
"property the response iterable is encoded and flattened.  This can lead "
"to unwanted behavior if you stream big data."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_data:5
msgid ""
"This behavior can be disabled by setting "
":attr:`implicit_sequence_conversion` to `False`."
msgstr ""

#: of werkzeug.sansio.response.Response.get_etag:1
msgid ""
"Return a tuple in the form ``(etag, is_weak)``.  If there is no ETag the "
"return value is ``(None, None)``."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_json:1
msgid "Parse :attr:`data` as JSON. Useful during testing."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_json:7
msgid "Unlike :meth:`Request.get_json`, the result is not cached."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_wsgi_headers:1
msgid ""
"This is automatically called right before the response is started and "
"returns headers modified for the given environment.  It returns a copy of"
" the headers from the response with some modifications applied if "
"necessary."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_wsgi_headers:6
msgid ""
"For example the location header (if present) is joined with the root URL "
"of the environment.  Also the content length is automatically set to zero"
" here for certain status codes."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_wsgi_headers:10
msgid ""
"Previously that function was called `fix_headers` and modified the "
"response object in place.  Also since 0.6, IRIs in location and content-"
"location headers are handled properly."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_wsgi_headers:15
msgid ""
"Also starting with 0.6, Werkzeug will attempt to set the content length "
"if it is able to figure it out on its own.  This is the case if all the "
"strings in the response iterable are already encoded and the iterable is "
"buffered."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_wsgi_headers:21
msgid "returns a new :class:`~werkzeug.datastructures.Headers` object."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_wsgi_response:1
msgid ""
"Returns the final WSGI response as tuple.  The first item in the tuple is"
" the application iterator, the second the status and the third the list "
"of headers.  The response returned is created specially for the given "
"environment.  For example if the request method in the WSGI environment "
"is ``'HEAD'`` the response will be empty and only the headers and status "
"code will be present."
msgstr ""

#: of werkzeug.wrappers.response.Response.get_wsgi_response:11
msgid "an ``(app_iter, status, headers)`` tuple."
msgstr ""

#: flask.Response.is_sequence:1 of
msgid ""
"If the iterator is buffered, this property will be `True`.  A response "
"object will consider an iterator to be buffered if the response attribute"
" is a list or tuple."
msgstr ""

#: flask.Response.is_streamed:1 of
msgid ""
"If the response is streamed (the response is not an iterable with a "
"length information) this property is `True`.  In this case streamed means"
" that there is no information about the number of iterations. This is "
"usually `True` if a generator is passed to the response object."
msgstr ""

#: flask.Response.is_streamed:6 of
msgid ""
"This is useful for checking before applying some sort of post filtering "
"that should not take place for streamed responses."
msgstr ""

#: of werkzeug.wrappers.response.Response.iter_encoded:1
msgid ""
"Iter the response encoded with the encoding of the response. If the "
"response object is invoked as WSGI application the return value of this "
"method is used as application iterator unless :attr:`direct_passthrough` "
"was activated."
msgstr ""

#: ../../docstring flask.Response.last_modified:1 of
msgid ""
"The Last-Modified entity-header field indicates the date and time at "
"which the origin server believes the variant was last modified."
msgstr ""

#: ../../docstring flask.Response.location:1 of
msgid ""
"The Location response-header field is used to redirect the recipient to a"
" location other than the Request-URI for completion of the request or "
"identification of a new resource."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:1
msgid ""
"Make the response conditional to the request.  This method works best if "
"an etag was defined for the response already.  The `add_etag` method can "
"be used to do that.  If called without etag just the date header is set."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:6
msgid ""
"This does nothing if the request method in the request or environ is "
"anything but GET or HEAD."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:9
msgid ""
"For optimal performance when handling range requests, it's recommended "
"that your response data object implements `seekable`, `seek` and `tell` "
"methods as described by :py:class:`io.IOBase`.  Objects returned by "
":meth:`~werkzeug.wsgi.wrap_file` automatically implement those methods."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:14
msgid ""
"It does not remove the body of the response because that's something the "
":meth:`__call__` function does for us automatically."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:17
msgid ""
"Returns self so that you can do ``return resp.make_conditional(req)`` but"
" modifies the object in-place."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:20
msgid ""
"a request object or WSGI environment to be used to make the response "
"conditional against."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:23
msgid ""
"This parameter dictates the value of `Accept-Ranges` header. If ``False``"
" (default), the header is not set. If ``True``, it will be set to "
"``\"bytes\"``. If ``None``, it will be set to ``\"none\"``. If it's a "
"string, it will use this value."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:29
msgid ""
"Will be used only in valid Range Requests. It will set `Content-Range` "
"complete length value and compute `Content-Length` real value. This "
"parameter is mandatory for successful Range Requests completion."
msgstr ""

# a33728f49c7a46b9ada94543aa88b9d7
#: of werkzeug.wrappers.response.Response.make_conditional
msgid "raises"
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:34
msgid ""
":class:`~werkzeug.exceptions.RequestedRangeNotSatisfiable` if `Range` "
"header could not be parsed or satisfied."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_conditional:37
msgid ""
"Range processing is skipped if length is 0 instead of raising a 416 Range"
" Not Satisfiable error."
msgstr ""

#: of werkzeug.wrappers.response.Response.make_sequence:1
msgid ""
"Converts the response iterator in a list.  By default this happens "
"automatically if required.  If `implicit_sequence_conversion` is "
"disabled, this method is not automatically called and some properties "
"might raise exceptions.  This also encodes all the items."
msgstr ""

# 362d64397f1a4bd8bf0d206fa5da3d17
#: flask.Response.max_cookie_size:1 of
msgid "Read-only view of the :data:`MAX_COOKIE_SIZE` config key."
msgstr ""

#: flask.Response.max_cookie_size:3 of
msgid ""
"See :attr:`~werkzeug.wrappers.Response.max_cookie_size` in Werkzeug's "
"docs."
msgstr ""

# 6fa5f85e1b174cfea308817912ce5a24
#: flask.Response.mimetype:1 of
msgid "The mimetype (content type without charset etc.)"
msgstr ""

#: flask.Response.mimetype_params:1 of
msgid ""
"The mimetype parameters as dict. For example if the content type is "
"``text/html; charset=utf-8`` the params would be ``{'charset': "
"'utf-8'}``."
msgstr ""

#: flask.Response.retry_after:1 of
msgid ""
"The Retry-After response-header field can be used with a 503 (Service "
"Unavailable) response to indicate how long the service is expected to be "
"unavailable to the requesting client."
msgstr ""

#: flask.Response.retry_after:5 of
msgid "Time in seconds until expiration or date."
msgstr ""

#: of werkzeug.sansio.response.Response.set_cookie:1
msgid "Sets a cookie."
msgstr ""

# 961daea13443400b928c5a8ef95600e0
#: of werkzeug.sansio.response.Response.set_cookie:3
msgid ""
"A warning is raised if the size of the cookie header exceeds "
":attr:`max_cookie_size`, but the header will still be set."
msgstr ""

# 0ec258cacc124408b00588c70e25819c
#: of werkzeug.sansio.response.Response.set_cookie:6
msgid "the key (name) of the cookie to be set."
msgstr ""

# 233cb409febe46d09fe96ba8b1fd5a2c
#: of werkzeug.sansio.response.Response.set_cookie:7
msgid "the value of the cookie."
msgstr ""

# e2ec712bccf44f41a376e666195a8797
#: of werkzeug.sansio.response.Response.set_cookie:8
msgid ""
"should be a number of seconds, or `None` (default) if the cookie should "
"last only as long as the client's browser session."
msgstr ""

# 04d49317e5664c23a3bc8b7fc47b5a03
#: of werkzeug.sansio.response.Response.set_cookie:11
msgid "should be a `datetime` object or UNIX timestamp."
msgstr ""

# 2d73ef0e6715411f8e07cebddadf609c
#: of werkzeug.sansio.response.Response.set_cookie:12
msgid ""
"limits the cookie to a given path, per default it will span the whole "
"domain."
msgstr ""

# 39092e0237b44d30b68d51587c5082ee
#: of werkzeug.sansio.response.Response.set_cookie:14
msgid ""
"if you want to set a cross-domain cookie.  For example, "
"``domain=\".example.com\"`` will set a cookie that is readable by the "
"domain ``www.example.com``, ``foo.example.com`` etc.  Otherwise, a cookie"
" will only be readable by the domain that set it."
msgstr ""

#: of werkzeug.wrappers.response.Response.set_data:1
msgid ""
"Sets a new string as response.  The value must be a string or bytes. If a"
" string is set it's encoded to the charset of the response (utf-8 by "
"default)."
msgstr ""

#: of werkzeug.sansio.response.Response.set_etag:1
msgid "Set the etag, and override the old one if there was one."
msgstr ""

#: flask.Response.status:1 of
msgid "The HTTP status code as a string."
msgstr ""

#: flask.Response.status_code:1 of
msgid "The HTTP status code as a number."
msgstr ""

#: flask.Response.stream:1 of
msgid "The response iterable as write-only stream."
msgstr ""

#: flask.Response.vary:1 of
msgid ""
"The Vary field value indicates the set of request-header fields that "
"fully determines, while the response is fresh, whether a cache is "
"permitted to use the response to reply to a subsequent request without "
"revalidation."
msgstr ""

#: flask.Response.www_authenticate:1 of
msgid "The ``WWW-Authenticate`` header in a parsed form."
msgstr ""

# 90f1676169444ac2b5e09481f00b9267
#: ../../flask/docs/api.rst:56
msgid "Sessions"
msgstr ""

# a3669dd4c2a84b3a943203799b307ffa
#: ../../flask/docs/api.rst:58
msgid ""
"If you have set :attr:`Flask.secret_key` (or configured it from "
":data:`SECRET_KEY`) you can use sessions in Flask applications. A session"
" makes it possible to remember information from one request to another. "
"The way Flask does this is by using a signed cookie. The user can look at"
" the session contents, but can't modify it unless they know the secret "
"key, so make sure to set that to something complex and unguessable."
msgstr ""

# fd5f4377129b4530aa86bf7d6356e4fb
#: ../../flask/docs/api.rst:65
msgid "To access the current session you can use the :class:`session` object:"
msgstr ""

# 7237319292e948a3af0c611bd43d6de6
#: ../../flask/docs/api.rst:69
msgid ""
"The session object works pretty much like an ordinary dict, with the "
"difference that it keeps track of modifications."
msgstr ""

# 7087894359514b21a4ca2d135899d29a
#: ../../flask/docs/api.rst:74
msgid "The following attributes are interesting:"
msgstr ""

# 4853459c2cfe4948b3dbec626f104652
#: ../../flask/docs/api.rst:78
msgid "``True`` if the session is new, ``False`` otherwise."
msgstr ""

# 175259355dbc4b8a939dc0a6e901d423
#: ../../flask/docs/api.rst:82
msgid ""
"``True`` if the session object detected a modification.  Be advised that "
"modifications on mutable structures are not picked up automatically, in "
"that situation you have to explicitly set the attribute to ``True`` "
"yourself.  Here an example::"
msgstr ""

# 9b71172733a2467e90438ce87d4ae58c
#: ../../flask/docs/api.rst:95
msgid ""
"If set to ``True`` the session lives for "
":attr:`~flask.Flask.permanent_session_lifetime` seconds.  The default is "
"31 days.  If set to ``False`` (which is the default) the session will be "
"deleted when the user closes the browser."
msgstr ""

# f5c4902eb19f460484c180e3e6d6afa4
#: ../../flask/docs/api.rst:102
msgid "Session Interface"
msgstr ""

# a98d9c0ab65a44f78e7dfff5e4ef6c7a
#: ../../flask/docs/api.rst:106
msgid ""
"The session interface provides a simple way to replace the session "
"implementation that Flask is using."
msgstr ""

# 36e8b6e2da674e05a896f050a5311fd0
#: flask.sessions.SessionInterface:1 of
msgid ""
"The basic interface you have to implement in order to replace the default"
" session interface which uses werkzeug's securecookie implementation.  "
"The only methods you have to implement are :meth:`open_session` and "
":meth:`save_session`, the others have useful defaults which you don't "
"need to change."
msgstr ""

# b40b8af0c812414b97a98792918599a5
#: flask.sessions.SessionInterface:7 of
msgid ""
"The session object returned by the :meth:`open_session` method has to "
"provide a dictionary like interface plus the properties and methods from "
"the :class:`SessionMixin`.  We recommend just subclassing a dict and "
"adding that mixin::"
msgstr ""

# d765084e9ca148819fd8b37c08192a97
#: flask.sessions.SessionInterface:15 of
msgid ""
"If :meth:`open_session` returns ``None`` Flask will call into "
":meth:`make_null_session` to create a session that acts as replacement if"
" the session support cannot work because some requirement is not "
"fulfilled.  The default :class:`NullSession` class that is created will "
"complain that the secret key was not set."
msgstr ""

# fec5e9232e85437e9d757e14364f99da
#: flask.sessions.SessionInterface:21 of
msgid ""
"To replace the session interface on an application all you have to do is "
"to assign :attr:`flask.Flask.session_interface`::"
msgstr ""

# 82a9898aacfc49e7ac0cc726ad6272c5
#: flask.sessions.SessionInterface.get_cookie_domain:1 of
msgid "Returns the domain that should be set for the session cookie."
msgstr ""

# f2d2b47906bf4c87afa440c115f35091
#: flask.sessions.SessionInterface.get_cookie_domain:3 of
msgid ""
"Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise falls back "
"to detecting the domain based on ``SERVER_NAME``."
msgstr ""

# 374d7bc0df3d40f9b9159892c26fdf9d
#: flask.sessions.SessionInterface.get_cookie_domain:6 of
msgid ""
"Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is "
"updated to avoid re-running the logic."
msgstr ""

# db615508903f4d0abc48800f4dea72a3
#: flask.sessions.SessionInterface.get_cookie_httponly:1 of
msgid ""
"Returns True if the session cookie should be httponly.  This currently "
"just returns the value of the ``SESSION_COOKIE_HTTPONLY`` config var."
msgstr ""

#: flask.sessions.SessionInterface.get_cookie_name:1 of
msgid "Returns the name of the session cookie."
msgstr ""

#: flask.sessions.SessionInterface.get_cookie_name:3 of
msgid "Uses ``app.session_cookie_name`` which is set to ``SESSION_COOKIE_NAME``"
msgstr ""

# 51cbe97ec77044178a6c05d3f60846d4
#: flask.sessions.SessionInterface.get_cookie_path:1 of
msgid ""
"Returns the path for which the cookie should be valid.  The default "
"implementation uses the value from the ``SESSION_COOKIE_PATH`` config var"
" if it's set, and falls back to ``APPLICATION_ROOT`` or uses ``/`` if "
"it's ``None``."
msgstr ""

# 0b76619e346c4823a4f4c80455f9058d
#: flask.sessions.SessionInterface.get_cookie_samesite:1 of
msgid ""
"Return ``'Strict'`` or ``'Lax'`` if the cookie should use the "
"``SameSite`` attribute. This currently just returns the value of the "
":data:`SESSION_COOKIE_SAMESITE` setting."
msgstr ""

# 616924482fc245f480a3d1e8db20e41d
#: flask.sessions.SessionInterface.get_cookie_secure:1 of
msgid ""
"Returns True if the cookie should be secure.  This currently just returns"
" the value of the ``SESSION_COOKIE_SECURE`` setting."
msgstr ""

# 94e8a68f6e89483c9768c8d3b5e1f8f4
#: flask.sessions.SessionInterface.get_expiration_time:1 of
msgid ""
"A helper method that returns an expiration date for the session or "
"``None`` if the session is linked to the browser session.  The default "
"implementation returns now + the permanent session lifetime configured on"
" the application."
msgstr ""

# 88c439ee54834a228870659e18c1a595
#: flask.sessions.SessionInterface.is_null_session:1 of
msgid ""
"Checks if a given object is a null session.  Null sessions are not asked "
"to be saved."
msgstr ""

# b1784784294f449295c132ae4eaae239
#: flask.sessions.SessionInterface.is_null_session:4 of
msgid ""
"This checks if the object is an instance of :attr:`null_session_class` by"
" default."
msgstr ""

# f39fbdae8aa84177b7066ab0b8289748
#: flask.sessions.SessionInterface.make_null_session:1 of
msgid ""
"Creates a null session which acts as a replacement object if the real "
"session support could not be loaded due to a configuration error.  This "
"mainly aids the user experience because the job of the null session is to"
" still support lookup without complaining but modifications are answered "
"with a helpful error message of what failed."
msgstr ""

# 978c40b5ee294583a9c691bacce5d14b
#: flask.sessions.SessionInterface.make_null_session:8 of
msgid "This creates an instance of :attr:`null_session_class` by default."
msgstr ""

# a715194c087644e785ef71bd98a27b9a
#: flask.sessions.NullSession:1 of
msgid ""
":meth:`make_null_session` will look here for the class that should be "
"created when a null session is requested.  Likewise the "
":meth:`is_null_session` method will perform a typecheck against this "
"type."
msgstr ""

# 77000efc8e1241c3ac3e404636b96716
# d909eedd1ae843d2b042739a05383ca1
#: flask.sessions.SecureCookieSessionInterface.open_session:1
#: flask.sessions.SessionInterface.open_session:1 of
msgid ""
"This method has to be implemented and must either return ``None`` in case"
" the loading failed because of a configuration error or an instance of a "
"session object which implements a dictionary like interface + the methods"
" and attributes on :class:`SessionMixin`."
msgstr ""

# 0f89f21abca84c1396dd5b02148c2640
#: ../../docstring flask.sessions.SessionInterface.pickle_based:1 of
msgid ""
"A flag that indicates if the session interface is pickle based. This can "
"be used by Flask extensions to make a decision in regards to how to deal "
"with the session object."
msgstr ""

# ffe8d128be7b4d148ef100a7b56b530f
# 64126220192041cf8eacc485c9597765
#: flask.sessions.SecureCookieSessionInterface.save_session:1
#: flask.sessions.SessionInterface.save_session:1 of
msgid ""
"This is called for actual sessions returned by :meth:`open_session` at "
"the end of the request.  This is still called during a request context so"
" if you absolutely need access to the request you can do that."
msgstr ""

# a919010505e141f3adfe320f7f3a68d4
#: flask.sessions.SessionInterface.should_set_cookie:1 of
msgid ""
"Used by session backends to determine if a ``Set-Cookie`` header should "
"be set for this session cookie for this response. If the session has been"
" modified, the cookie is set. If the session is permanent and the "
"``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is always "
"set."
msgstr ""

# 82d7f141720e46a5bf6de7e77a05d2c2
#: flask.sessions.SessionInterface.should_set_cookie:7 of
msgid "This check is usually skipped if the session was deleted."
msgstr ""

# 3cf5fc5a5eac42d0a8262d8a9971b4d6
#: flask.sessions.SecureCookieSessionInterface:1 of
msgid ""
"The default session interface that stores sessions in signed cookies "
"through the :mod:`itsdangerous` module."
msgstr ""

# 91772cd529fa4c9c8c2ddad796a00bd3
#: _hashlib.openssl_sha1:1 of
msgid "the hash function to use for the signature.  The default is sha1"
msgstr ""

# 01b8efbfe5ae4c2fa3f168c5ddad9a2e
#: ../../docstring flask.sessions.SecureCookieSessionInterface.key_derivation:1
#: of
msgid ""
"the name of the itsdangerous supported key derivation.  The default is "
"hmac."
msgstr ""

# 9bdbabcb7fe4401fa2d960785fd2684e
#: ../../docstring flask.sessions.SecureCookieSessionInterface.salt:1 of
msgid ""
"the salt that should be applied on top of the secret key for the signing "
"of cookie based sessions."
msgstr ""

# 2eae7a4d608248619a6e562823421b79
#: ../../docstring flask.sessions.SecureCookieSessionInterface.serializer:1 of
msgid ""
"A python serializer for the payload.  The default is a compact JSON "
"derived serializer with support for some extra Python types such as "
"datetime objects or tuples."
msgstr ""

# 7d0e8d69efae400fa8cd1bdd66d51892
#: flask.sessions.SecureCookieSession:1 of
msgid "Base class for sessions based on signed cookies."
msgstr ""

# e6fb9032eb9843c0a330ca9cf8312ea7
#: flask.sessions.SecureCookieSession:3 of
msgid ""
"This session backend will set the :attr:`modified` and :attr:`accessed` "
"attributes. It cannot reliably track whether a session is new (vs. "
"empty), so :attr:`new` remains hard coded to ``False``."
msgstr ""

# c3cd749b7ddb490896a7f3e23a5bd5f4
#: ../../docstring flask.sessions.SecureCookieSession.accessed:1 of
msgid ""
"header, which allows caching proxies to cache different pages for "
"different users."
msgstr ""

#: flask.sessions.SecureCookieSession.get:1
#: flask.sessions.SecureCookieSession.setdefault:3 of
msgid "Return the value for key if key is in the dictionary, else default."
msgstr ""

# f706cb56e56c4ed38e4d831b964b9566
#: ../../docstring flask.sessions.SecureCookieSession.modified:1 of
msgid ""
"When data is changed, this is set to ``True``. Only the session "
"dictionary itself is tracked; if the session contains mutable data (for "
"example a nested dict) then this must be set to ``True`` manually when "
"modifying that data. The session cookie will only be written to the "
"response if this is ``True``."
msgstr ""

#: flask.sessions.SecureCookieSession.setdefault:1 of
msgid "Insert key with a value of default if key is not in the dictionary."
msgstr ""

# 8631ebf18af04be5a356fba47bea9081
#: flask.sessions.NullSession:1 of
msgid ""
"Class used to generate nicer error messages if sessions are not "
"available.  Will still allow read-only access to the empty session but "
"fail on setting."
msgstr ""

# 5d9ec42d8d8e4d7399957ef91319dccf
#: flask.sessions.SessionMixin:1 of
msgid "Expands a basic dictionary with session attributes."
msgstr ""

# 6afde8a42557460190706ad8ee41a069
#: ../../docstring flask.sessions.SessionMixin.accessed:1 of
msgid ""
"Some implementations can detect when session data is read or written and "
"set this when that happens. The mixin default is hard coded to ``True``."
msgstr ""

# 3846c8f2ddee474b9690349aab83a572
#: ../../docstring flask.sessions.SessionMixin.modified:1 of
msgid ""
"Some implementations can detect changes to the session and set this when "
"that happens. The mixin default is hard coded to ``True``."
msgstr ""

# 68d94e5b338b4f05ac7e33db227a0e45
#: flask.sessions.SessionMixin.permanent:1 of
msgid "This reflects the ``'_permanent'`` key in the dict."
msgstr ""

# 0f872d554aac40c9af3e72f265e5f3ee
#: ../../flask/docs/api.rst:126
msgid "Notice"
msgstr ""

# 318ac7d61df84996888ef80177a9361a
#: ../../flask/docs/api.rst:128
msgid ""
"The ``PERMANENT_SESSION_LIFETIME`` config key can also be an integer "
"starting with Flask 0.8.  Either catch this down yourself or use the "
":attr:`~flask.Flask.permanent_session_lifetime` attribute on the app "
"which converts the result to an integer automatically."
msgstr ""

# 41e73d229f594af4abb04a384b114a2d
#: ../../flask/docs/api.rst:135
msgid "Test Client"
msgstr ""

# d34086bf6f36441cb46a4994d28fb8ba
#: flask.testing.FlaskClient:1 of
msgid ""
"Works like a regular Werkzeug test client but has some knowledge about "
"how Flask works to defer the cleanup of the request context stack to the "
"end of a ``with`` body when used in a ``with`` statement.  For general "
"information about how to use this class refer to "
":class:`werkzeug.test.Client`."
msgstr ""

# f8250de25e5b46cb8fdef328a64f0617
#: flask.testing.FlaskClient:7 of
msgid ""
"`app.test_client()` includes preset default environment, which can be set"
" after instantiation of the `app.test_client()` object in "
"`client.environ_base`."
msgstr ""

#: flask.testing.FlaskClient:12 of
msgid "Basic usage is outlined in the :doc:`/testing` chapter."
msgstr ""

#: flask.testing.FlaskClient.open:1 of
msgid ""
"Generate an environ dict from the given arguments, make a request to the "
"application using it, and return the response."
msgstr ""

#: flask.testing.FlaskClient.open:4 of
msgid ""
"Passed to :class:`EnvironBuilder` to create the environ for the request. "
"If a single arg is passed, it can be an existing :class:`EnvironBuilder` "
"or an environ dict."
msgstr ""

#: flask.testing.FlaskClient.open:7 of
msgid ""
"Convert the iterator returned by the app into a list. If the iterator has"
" a ``close()`` method, it is called automatically."
msgstr ""

#: flask.testing.FlaskClient.open:10 of
msgid ""
"Make additional requests to follow HTTP redirects until a non-redirect "
"status is returned. :attr:`TestResponse.history` lists the intermediate "
"responses."
msgstr ""

#: flask.testing.FlaskClient.open:15 of
msgid ""
"``as_tuple`` is deprecated and will be removed in Werkzeug 2.1. Use "
":attr:`TestResponse.request` and ``request.environ`` instead."
msgstr ""

#: flask.testing.FlaskClient.open:20 of
msgid ""
"The request input stream is closed when calling ``response.close()``. "
"Input streams for redirects are automatically closed."
msgstr ""

#: flask.testing.FlaskClient.open:25 of
msgid ""
"If a dict is provided as file in the dict for the ``data`` parameter the "
"content type has to be called ``content_type`` instead of ``mimetype``. "
"This change was made for consistency with :class:`werkzeug.FileWrapper`."
msgstr ""

#: flask.testing.FlaskClient.open:31 of
msgid "Added the ``follow_redirects`` parameter."
msgstr ""

# 30c03f79553b440dbe6719b373cbf209
#: flask.testing.FlaskClient.session_transaction:1 of
msgid ""
"When used in combination with a ``with`` statement this opens a session "
"transaction.  This can be used to modify the session that the test client"
" uses.  Once the ``with`` block is left the session is stored back."
msgstr ""

# 5f2ad621c1ba4676b2f54c690baf5258
#: flask.testing.FlaskClient.session_transaction:11 of
msgid ""
"Internally this is implemented by going through a temporary test request "
"context and since session handling could depend on request variables this"
" function accepts the same arguments as "
":meth:`~flask.Flask.test_request_context` which are directly passed "
"through."
msgstr ""

# af3b28ea059d4f3a9a078aeab500e86b
#: ../../flask/docs/api.rst:144
msgid "Test CLI Runner"
msgstr ""

# 7d7405555e124289ad1f927981ac146b
#: flask.testing.FlaskCliRunner:1 of
msgid ""
"A :class:`~click.testing.CliRunner` for testing a Flask app's CLI "
"commands. Typically created using :meth:`~flask.Flask.test_cli_runner`. "
"See :ref:`testing-cli`."
msgstr ""

# c927e17747a14ea6b2211863cca42ae5
#: flask.testing.FlaskCliRunner.invoke:1 of
msgid ""
"Invokes a CLI command in an isolated environment. See "
":meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for full method"
" documentation. See :ref:`testing-cli` for examples."
msgstr ""

# eb1e587e7dfe4ada85d67b57953e6c21
#: flask.testing.FlaskCliRunner.invoke:5 of
msgid ""
"If the ``obj`` argument is not given, passes an instance of "
":class:`~flask.cli.ScriptInfo` that knows how to load the Flask app being"
" tested."
msgstr ""

# 5982082923ad43848660dcc4717c5731
#: flask.testing.FlaskCliRunner.invoke:9 of
msgid ""
"Command object to invoke. Default is the app's "
":attr:`~flask.app.Flask.cli` group."
msgstr ""

# d4ccfa99ac58401fa1d08009d8a08df5
#: flask.testing.FlaskCliRunner.invoke:11 of
msgid "List of strings to invoke the command with."
msgstr ""

# 322ce5dd19ce475b96b17a1f95337c66
#: flask.testing.FlaskCliRunner.invoke:13 of
msgid "a :class:`~click.testing.Result` object."
msgstr ""

# 43b51dd933f54c5ba09ade6a01cf570d
#: ../../flask/docs/api.rst:153
msgid "Application Globals"
msgstr ""

# 1aacf8ae4f024834b86e5daafc6445c7
#: ../../flask/docs/api.rst:157
msgid ""
"To share data that is valid for one request only from one function to "
"another, a global variable is not good enough because it would break in "
"threaded environments.  Flask provides you with a special object that "
"ensures it is only valid for the active request and that will return "
"different values for each request.  In a nutshell: it does the right "
"thing, like it does for :class:`request` and :class:`session`."
msgstr ""

# 847d08c17cf245c482c905fee804e060
#: ../../flask/docs/api.rst:166
msgid ""
"A namespace object that can store data during an :doc:`application "
"context </appcontext>`. This is an instance of "
":attr:`Flask.app_ctx_globals_class`, which defaults to "
":class:`ctx._AppCtxGlobals`."
msgstr ""

# 45e16394e4234976b655c13dd988d3e1
#: ../../flask/docs/api.rst:171
msgid ""
"This is a good place to store resources during a request. During testing,"
" you can use the :ref:`faking-resources` pattern to pre-configure such "
"resources."
msgstr ""

# 3f084b5425fd467e9b217d8879c7af8d
# 06c02d86eee14e4e926b886ce721f7df
#: ../../flask/docs/api.rst:175 ../../flask/docs/api.rst:199
msgid "This is a proxy. See :ref:`notes-on-proxies` for more information."
msgstr ""

# 62bac0aa20504914b15ffdaad1bb01a5
#: ../../flask/docs/api.rst:177
msgid "Bound to the application context instead of the request context."
msgstr ""

# 0025797d11474b4590996b8cac5286df
#: flask.ctx._AppCtxGlobals:1 of
msgid ""
"A plain object. Used as a namespace for storing data during an "
"application context."
msgstr ""

# 19f608ea2d1e499ca1ede84be7b1824c
#: flask.ctx._AppCtxGlobals:4 of
msgid ""
"Creating an app context automatically creates this object, which is made "
"available as the :data:`g` proxy."
msgstr ""

# 43c5f2df90d44918801ec25b08c6cd63
#: flask.ctx._AppCtxGlobals:9 of
msgid "Check whether an attribute is present."
msgstr ""

# 2e97b14e468a43769eea59f1095cfc52
#: flask.ctx._AppCtxGlobals:15 of
msgid "Return an iterator over the attribute names."
msgstr ""

# 04d005f8955640eca64d08dad950aebe
#: flask.ctx._AppCtxGlobals.get:1 of
msgid "Get an attribute by name, or a default value. Like :meth:`dict.get`."
msgstr ""

# f36f03ebeea6476da73362562bd974db
# 2a8fbe997d4e4fdc964906ad73a1db9a
#: flask.ctx._AppCtxGlobals.get:4 flask.ctx._AppCtxGlobals.setdefault:4 of
msgid "Name of attribute to get."
msgstr ""

# 24f5314655474654ada809d94b0f7840
#: flask.ctx._AppCtxGlobals.get:5 of
msgid "Value to return if the attribute is not present."
msgstr ""

# 8d8d25b4f092459fb4af2f27a8f0ec9d
#: flask.ctx._AppCtxGlobals.pop:1 of
msgid "Get and remove an attribute by name. Like :meth:`dict.pop`."
msgstr ""

# be6a9cb76cfb4f56a7fe2c395e0b2daf
#: flask.ctx._AppCtxGlobals.pop:3 of
msgid "Name of attribute to pop."
msgstr ""

#: flask.ctx._AppCtxGlobals.pop:4 of
msgid ""
"Value to return if the attribute is not present, instead of raising a "
"``KeyError``."
msgstr ""

# 30d87956cddf4129b1846671d5f5ace4
#: flask.ctx._AppCtxGlobals.setdefault:1 of
msgid ""
"Get the value of an attribute if it is present, otherwise set and return "
"a default value. Like :meth:`dict.setdefault`."
msgstr ""

#: flask.ctx._AppCtxGlobals.setdefault:5 of
msgid "Value to set and return if the attribute is not present."
msgstr ""

# ea3fa0135eea4887b3fbe5d1868499c9
#: ../../flask/docs/api.rst:185
msgid "Useful Functions and Classes"
msgstr ""

# 36f8303743984a2b809c53d0556d56c9
#: ../../flask/docs/api.rst:189
msgid ""
"A proxy to the application handling the current request. This is useful "
"to access the application without needing to import it, or if it can't be"
" imported, such as when using the application factory pattern or in "
"blueprints and extensions."
msgstr ""

# 0bd830058199445683e88a306c046bb0
#: ../../flask/docs/api.rst:194
msgid ""
"This is only available when an :doc:`application context </appcontext>` "
"is pushed. This happens automatically during requests and CLI commands. "
"It can be controlled manually with :meth:`~flask.Flask.app_context`."
msgstr ""

# 1b0b81650e6b4049a877c894aac4f7ab
#: flask.ctx.has_request_context:1 of
msgid ""
"If you have code that wants to test if a request context is there or not "
"this function can be used.  For instance, you may want to take advantage "
"of request information if the request object is available, but fail "
"silently if it is unavailable."
msgstr ""

# 77642d89710c45528bca78f52d8b4418
#: flask.ctx.has_request_context:16 of
msgid ""
"Alternatively you can also just test any of the context bound objects "
"(such as :class:`request` or :class:`g`) for truthness::"
msgstr ""

# 5de06b79194c4305bc1b02bbc81852ce
#: flask.ctx.copy_current_request_context:1 of
msgid ""
"A helper function that decorates a function to retain the current request"
" context.  This is useful when working with greenlets.  The moment the "
"function is decorated a copy of the request context is created and then "
"pushed when the function is called.  The current session is also included"
" in the copied request context."
msgstr ""

# 0eb60d12251b451b8958aafffce6fd44
#: flask.ctx.has_app_context:1 of
msgid ""
"Works like :func:`has_request_context` but for the application context.  "
"You can also just do a boolean check on the :data:`current_app` object "
"instead."
msgstr ""

# d7cf08a8b4a7423ab21b4838731494e3
#: flask.helpers.url_for:1 of
msgid "Generates a URL to the given endpoint with the method provided."
msgstr ""

# fdc559edf7c743589a16c7ad660424a7
#: flask.helpers.url_for:3 of
msgid ""
"Variable arguments that are unknown to the target endpoint are appended "
"to the generated URL as query arguments.  If the value of a query "
"argument is ``None``, the whole pair is skipped.  In case blueprints are "
"active you can shortcut references to the same blueprint by prefixing the"
" local endpoint with a dot (``.``)."
msgstr ""

# 2132f5898e24498cb2b760a86816c2d7
#: flask.helpers.url_for:9 of
msgid "This will reference the index function local to the current blueprint::"
msgstr ""

#: flask.helpers.url_for:13 of
msgid "See :ref:`url-building`."
msgstr ""

# 0b51bec194134c86ba232bce6beef264
#: flask.helpers.url_for:15 of
msgid ""
"Configuration values ``APPLICATION_ROOT`` and ``SERVER_NAME`` are only "
"used when generating URLs outside of a request context."
msgstr ""

# 72d5159062e14e03831fd0754020a61b
#: flask.helpers.url_for:18 of
msgid ""
"To integrate applications, :class:`Flask` has a hook to intercept URL "
"build errors through :attr:`Flask.url_build_error_handlers`.  The "
"`url_for` function results in a :exc:`~werkzeug.routing.BuildError` when "
"the current app does not have a URL for the given endpoint and values.  "
"When it does, the :data:`~flask.current_app` calls its "
":attr:`~Flask.url_build_error_handlers` if it is not ``None``, which can "
"return a string to use as the result of `url_for` (instead of `url_for`'s"
" default to raise the :exc:`~werkzeug.routing.BuildError` exception) or "
"re-raise the exception. An example::"
msgstr ""

# 82b0ed318a304a60af99644b580705f7
#: flask.helpers.url_for:47 of
msgid ""
"Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and"
" `endpoint` and `values` are the arguments passed into `url_for`.  Note "
"that this is for building URLs outside the current application, and not "
"for handling 404 NotFound errors."
msgstr ""

# 4d6ea0902de3491c97a48414c0fb7c12
#: flask.helpers.url_for:52 of
msgid "The `_scheme` parameter was added."
msgstr ""

# 644f967c492e403c921b391e0c6bf3f7
#: flask.helpers.url_for:55 of
msgid "The `_anchor` and `_method` parameters were added."
msgstr ""

# 593bd5fc25944c2ea1f915c96285ff53
#: flask.helpers.url_for:58 of
msgid ""
"Calls :meth:`Flask.handle_build_error` on "
":exc:`~werkzeug.routing.BuildError`."
msgstr ""

# ee4da0eacb57403cbc4acdfccae97c88
#: flask.helpers.url_for:62 of
msgid "the endpoint of the URL (name of the function)"
msgstr ""

# 33c848ee61e744b8821bca67d1255d34
#: flask.helpers.url_for:63 of
msgid "the variable arguments of the URL rule"
msgstr ""

# e69ab10b56004167b1e66c55b48fedc2
#: flask.helpers.url_for:64 of
msgid ""
"if set to ``True``, an absolute URL is generated. Server address can be "
"changed via ``SERVER_NAME`` configuration variable which falls back to "
"the `Host` header, then to the IP and port of the request."
msgstr ""

#: flask.helpers.url_for:67 of
msgid ""
"a string specifying the desired URL scheme. The `_external` parameter "
"must be set to ``True`` or a :exc:`ValueError` is raised. The default "
"behavior uses the same scheme as the current request, or "
":data:`PREFERRED_URL_SCHEME` if no request context is available. This "
"also can be set to an empty string to build protocol-relative URLs."
msgstr ""

# 679ca0f844ad4261a3710ac2ec899fa9
#: flask.helpers.url_for:73 of
msgid "if provided this is added as anchor to the URL."
msgstr ""

# 590561fbfd624e6d9e5c5661c3fbc876
#: flask.helpers.url_for:74 of
msgid "if provided this explicitly specifies an HTTP method."
msgstr ""

#: of werkzeug.exceptions.abort:1
msgid ""
"Raises an :py:exc:`HTTPException` for the given status code or WSGI "
"application."
msgstr ""

#: of werkzeug.exceptions.abort:4
msgid ""
"If a status code is given, it will be looked up in the list of exceptions"
" and will raise that exception.  If passed a WSGI application, it will "
"wrap it in a proxy WSGI exception and raise that::"
msgstr ""

# 274c1379ac1644f891089204d8630e73
#: of werkzeug.utils.redirect:1
msgid ""
"Returns a response object (a WSGI application) that, if called, redirects"
" the client to the target location. Supported codes are 301, 302, 303, "
"305, 307, and 308. 300 is not supported because it's not a real redirect "
"and 304 because it's the answer for a request with a request with defined"
" If-Modified-Since headers."
msgstr ""

# 377bddfddd474af090ff2692e6178455
#: of werkzeug.utils.redirect:11
msgid "The class used for the Response object can now be passed in."
msgstr ""

# 178ebabe024140df9c91f127c919bd41
#: of werkzeug.utils.redirect:7
msgid ""
"The location can now be a unicode string that is encoded using the "
":func:`iri_to_uri` function."
msgstr ""

# 3259c61732f44fdea66733b5b9846f59
#: of werkzeug.utils.redirect:14
msgid "the location the response should redirect to."
msgstr ""

# 35e7514e41ba42939bda56440b7618ee
#: of werkzeug.utils.redirect:15
msgid "the redirect status code. defaults to 302."
msgstr ""

# 54104d68ca134d478e196eb1a05c883f
#: of werkzeug.utils.redirect:16
msgid ""
"a Response class to use when instantiating a response. The default is "
":class:`werkzeug.wrappers.Response` if unspecified."
msgstr ""

# 8e132b7d9abb46e6b9485808594abdd6
#: flask.helpers.make_response:1 of
msgid ""
"Sometimes it is necessary to set additional headers in a view.  Because "
"views do not have to return response objects but can return a value that "
"is converted into a response object by Flask itself, it becomes tricky to"
" add headers to it.  This function can be called instead of using a "
"return and you will get a response object which you can use to attach "
"headers."
msgstr ""

# 544055badf6f4d378b842fed0c7fd5ce
#: flask.helpers.make_response:7 of
msgid "If view looked like this and you want to add a new header::"
msgstr ""

# a1802b609df84015a6bb25127196709e
#: flask.helpers.make_response:12 of
msgid "You can now do something like this::"
msgstr ""

# 1279247b2a2f4c3c9078a316830463f6
#: flask.helpers.make_response:19 of
msgid ""
"This function accepts the very same arguments you can return from a view "
"function.  This for example creates a response with a 404 error code::"
msgstr ""

# 8ab139ff17de45acadd18632e707536c
#: flask.helpers.make_response:25 of
msgid ""
"The other use case of this function is to force the return value of a "
"view function into a response which is helpful with view decorators::"
msgstr ""

# 5e369e5f6c6d40fbbc9b9b0e76669e5e
#: flask.helpers.make_response:32 of
msgid "Internally this function does the following things:"
msgstr ""

# b1e13242a3be44aa963476f59c01baa3
#: flask.helpers.make_response:34 of
msgid "if no arguments are passed, it creates a new response argument"
msgstr ""

# 015af8d86c114f6ba3a97223f2a46898
#: flask.helpers.make_response:35 of
msgid ""
"if one argument is passed, :meth:`flask.Flask.make_response` is invoked "
"with it."
msgstr ""

# 488d39a9d59240398ebe665cc57817fd
#: flask.helpers.make_response:37 of
msgid ""
"if more than one argument is passed, the arguments are passed to the "
":meth:`flask.Flask.make_response` function as tuple."
msgstr ""

# 5504500107044c688106631307042855
#: flask.ctx.after_this_request:1 of
msgid ""
"Executes a function after this request.  This is useful to modify "
"response objects.  The function is passed the response object and has to "
"return the same or a new one."
msgstr ""

# dc5d9c31613b458cbdcc8693f71464ad
#: flask.ctx.after_this_request:15 of
msgid ""
"This is more useful if a function other than the view function wants to "
"modify a response.  For instance think of a decorator that wants to add "
"some headers without converting the return value into a response object."
msgstr ""

#: flask.helpers.send_file:1 of
msgid "Send the contents of a file to the client."
msgstr ""

#: flask.helpers.send_file:3 of
msgid ""
"The first argument can be a file path or a file-like object. Paths are "
"preferred in most cases because Werkzeug can manage the file and get "
"extra information from the path. Passing a file-like object requires that"
" the file is opened in binary mode, and is mostly useful when building a "
"file in memory with :class:`io.BytesIO`."
msgstr ""

#: flask.helpers.send_file:9 of
msgid ""
"Never pass file paths provided by a user. The path is assumed to be "
"trusted, so a user could craft a path to access a file you didn't intend."
" Use :func:`send_from_directory` to safely serve user-requested paths "
"from within a directory."
msgstr ""

#: flask.helpers.send_file:14 of
msgid ""
"If the WSGI server sets a ``file_wrapper`` in ``environ``, it is used, "
"otherwise Werkzeug's built-in wrapper is used. Alternatively, if the HTTP"
" server supports ``X-Sendfile``, configuring Flask with ``USE_X_SENDFILE "
"= True`` will tell the server to send the given path, which is much more "
"efficient than reading it in Python."
msgstr ""

#: flask.helpers.send_file:20 of
msgid ""
"The path to the file to send, relative to the current working directory "
"if a relative path is given. Alternatively, a file-like object opened in "
"binary mode. Make sure the file pointer is seeked to the start of the "
"data."
msgstr ""

#: flask.helpers.send_file:24 of
msgid ""
"The MIME type to send for the file. If not provided, it will try to "
"detect it from the file name."
msgstr ""

#: flask.helpers.send_file:26 of
msgid ""
"Indicate to a browser that it should offer to save the file instead of "
"displaying it."
msgstr ""

#: flask.helpers.send_file:28 of
msgid ""
"The default name browsers will use when saving the file. Defaults to the "
"passed file name."
msgstr ""

#: flask.helpers.send_file:30 of
msgid ""
"Enable conditional and range responses based on request headers. Requires"
" passing a file path and ``environ``."
msgstr ""

#: flask.helpers.send_file:32 of
msgid ""
"Calculate an ETag for the file, which requires passing a file path. Can "
"also be a string to use instead."
msgstr ""

#: flask.helpers.send_file:34 of
msgid ""
"The last modified time to send for the file, in seconds. If not provided,"
" it will try to detect it from the file path."
msgstr ""

#: flask.helpers.send_file:37 of
msgid ""
"How long the client should cache the file, in seconds. If set, ``Cache-"
"Control`` will be ``public``, otherwise it will be ``no-cache`` to prefer"
" conditional caching."
msgstr ""

#: flask.helpers.send_file:41 of
msgid ""
"``download_name`` replaces the ``attachment_filename`` parameter. If "
"``as_attachment=False``, it is passed with ``Content-Disposition: "
"inline`` instead."
msgstr ""

#: flask.helpers.send_file:46 of
msgid ""
"``max_age`` replaces the ``cache_timeout`` parameter. ``conditional`` is "
"enabled and ``max_age`` is not set by default."
msgstr ""

#: flask.helpers.send_file:51 of
msgid ""
"``etag`` replaces the ``add_etags`` parameter. It can be a string to use "
"instead of generating one."
msgstr ""

#: flask.helpers.send_file:55 of
msgid ""
"Passing a file-like object that inherits from :class:`~io.TextIOBase` "
"will raise a :exc:`ValueError` rather than sending an empty file."
msgstr ""

#: flask.helpers.send_file:60 flask.helpers.send_from_directory:27 of
msgid ""
"Moved the implementation to Werkzeug. This is now a wrapper to pass some "
"Flask-specific arguments."
msgstr ""

#: flask.helpers.send_file:64 of
msgid "``filename`` may be a :class:`~os.PathLike` object."
msgstr ""

#: flask.helpers.send_file:67 of
msgid "Passing a :class:`~io.BytesIO` object supports range requests."
msgstr ""

# 967ecf9e613c45a5883466c47bca24de
#: flask.helpers.send_file:70 of
msgid ""
"Filenames are encoded with ASCII instead of Latin-1 for broader "
"compatibility with WSGI servers."
msgstr ""

#: flask.helpers.send_file:74 of
msgid "UTF-8 filenames as specified in :rfc:`2231` are supported."
msgstr ""

#: flask.helpers.send_file:77 of
msgid ""
"The filename is no longer automatically inferred from file objects. If "
"you want to use automatic MIME and etag support, pass a filename via "
"``filename_or_fp`` or ``attachment_filename``."
msgstr ""

#: flask.helpers.send_file:83 of
msgid "``attachment_filename`` is preferred over ``filename`` for MIME detection."
msgstr ""

#: flask.helpers.send_file:87 of
msgid "``cache_timeout`` defaults to :meth:`Flask.get_send_file_max_age`."
msgstr ""

#: flask.helpers.send_file:91 of
msgid ""
"MIME guessing and etag support for file-like objects was deprecated "
"because it was unreliable. Pass a filename if you are able to, otherwise "
"attach an etag yourself."
msgstr ""

#: flask.helpers.send_file:96 of
msgid ""
"The ``add_etags``, ``cache_timeout`` and ``conditional`` parameters were "
"added. The default behavior is to add etags."
msgstr ""

#: flask.helpers.send_from_directory:1 of
msgid "Send a file from within a directory using :func:`send_file`."
msgstr ""

#: flask.helpers.send_from_directory:11 of
msgid ""
"This is a secure way to serve files from a folder, such as static files "
"or uploads. Uses :func:`~werkzeug.security.safe_join` to ensure the path "
"coming from the client is not maliciously crafted to point outside the "
"specified directory."
msgstr ""

#: flask.helpers.send_from_directory:16 of
msgid ""
"If the final path does not point to an existing regular file, raises a "
"404 :exc:`~werkzeug.exceptions.NotFound` error."
msgstr ""

#: flask.helpers.send_from_directory:19 of
msgid "The directory that ``path`` must be located under."
msgstr ""

#: flask.helpers.send_from_directory:20 of
msgid "The path to the file to send, relative to ``directory``."
msgstr ""

#: flask.helpers.send_from_directory:22 of
msgid "Arguments to pass to :func:`send_file`."
msgstr ""

#: flask.helpers.send_from_directory:24 of
msgid "``path`` replaces the ``filename`` parameter."
msgstr ""

#: flask.helpers.safe_join:1 of
msgid ""
"Safely join zero or more untrusted path components to a base directory to"
" avoid escaping the base directory."
msgstr ""

#: flask.helpers.safe_join:4 of
msgid "The trusted base directory."
msgstr ""

#: flask.helpers.safe_join:5 of
msgid "The untrusted path components relative to the base directory."
msgstr ""

#: flask.helpers.safe_join:7 of
msgid "A safe path, otherwise ``None``."
msgstr ""

#: ../../docstring markupsafe._speedups.escape:1 of
msgid ""
"Replace the characters ``&``, ``<``, ``>``, ``'``, and ``\"`` in the "
"string with HTML-safe sequences. Use this if you need to display text "
"that might contain such characters in HTML."
msgstr ""

#: ../../docstring markupsafe._speedups.escape:3 of
msgid ""
"If the object has an ``__html__`` method, it is called and the return "
"value is assumed to already be safe for HTML."
msgstr ""

#: ../../docstring markupsafe._speedups.escape:5 of
msgid "An object to be converted to a string and escaped."
msgstr ""

#: ../../docstring markupsafe._speedups.escape:6 of
msgid "A :class:`Markup` string with the escaped text."
msgstr ""

# 5fad945659ad4e6cb081584be4191275
#: markupsafe.Markup:1 of
msgid ""
"A string that is ready to be safely inserted into an HTML or XML "
"document, either because it was escaped or because it was marked safe."
msgstr ""

# d897948314b04c7ea596f40da941f3ae
#: markupsafe.Markup:5 of
msgid ""
"Passing an object to the constructor converts it to text and wraps it to "
"mark it safe without escaping. To escape the text, use the :meth:`escape`"
" class method instead."
msgstr ""

# cc28f62eba2c41688422178c56b7669d
#: markupsafe.Markup:16 of
msgid ""
"This implements the ``__html__()`` interface that some frameworks use. "
"Passing an object that implements ``__html__()`` will wrap the output of "
"that method, marking it safe."
msgstr ""

#: markupsafe.Markup:27 of
msgid ""
"This is a subclass of :class:`str`. It has the same methods, but escapes "
"their arguments and returns a ``Markup`` instance."
msgstr ""

# bc39165bc5704063b6fc6849fb52725e
#: markupsafe.Markup.escape:1 of
msgid ""
"Escape a string. Calls :func:`escape` and ensures that for subclasses the"
" correct type is returned."
msgstr ""

# 56f50b2fa6a64e75bd33a5653bae3248
#: markupsafe.Markup.striptags:1 of
msgid ""
":meth:`unescape` the markup, remove tags, and normalize whitespace to "
"single spaces."
msgstr ""

# 8124a10233c44da891af3d5d2e46dcef
#: markupsafe.Markup.unescape:1 of
msgid ""
"Convert escaped markup back into a text string. This replaces HTML "
"entities with the characters they represent."
msgstr ""

# 9a9cb35e4ca64740a2be53f4c4535a35
#: ../../flask/docs/api.rst:229
msgid "Message Flashing"
msgstr ""

# 6f35431df9b4457a8bf9ee434640b87f
#: flask.helpers.flash:1 of
msgid ""
"Flashes a message to the next request.  In order to remove the flashed "
"message from the session and to display it to the user, the template has "
"to call :func:`get_flashed_messages`."
msgstr ""

# c5d9f95fc6ae46c884636adb573e08ed
#: flask.helpers.flash:5 of
msgid "`category` parameter added."
msgstr ""

# 48ada24201794aac95de02f1c0bf6160
#: flask.helpers.flash:8 of
msgid "the message to be flashed."
msgstr ""

# 5f18f3d6b5b24420afe316ddf0121a25
#: flask.helpers.flash:9 of
msgid ""
"the category for the message.  The following values are recommended: "
"``'message'`` for any kind of message, ``'error'`` for errors, ``'info'``"
" for information messages and ``'warning'`` for warnings.  However any "
"kind of string can be used as category."
msgstr ""

# a5d633651fba46fc9e5572a8395fc418
#: flask.helpers.get_flashed_messages:1 of
msgid ""
"Pulls all flashed messages from the session and returns them. Further "
"calls in the same request to the function will return the same messages."
"  By default just the messages are returned, but when `with_categories` "
"is set to ``True``, the return value will be a list of tuples in the form"
" ``(category, message)`` instead."
msgstr ""

# 74e298d194aa49588999f09307b1cb3b
#: flask.helpers.get_flashed_messages:7 of
msgid ""
"Filter the flashed messages to one or more categories by providing those "
"categories in `category_filter`.  This allows rendering categories in "
"separate html blocks.  The `with_categories` and `category_filter` "
"arguments are distinct:"
msgstr ""

# 20839b197a83423ab8b522104f5f8f09
#: flask.helpers.get_flashed_messages:12 of
msgid ""
"`with_categories` controls whether categories are returned with message "
"text (``True`` gives a tuple, where ``False`` gives just the message "
"text)."
msgstr ""

# 7bf857c6e5444b3fa5363ed3d3e18018
#: flask.helpers.get_flashed_messages:14 of
msgid ""
"`category_filter` filters the messages down to only those matching the "
"provided categories."
msgstr ""

#: flask.helpers.get_flashed_messages:17 of
msgid "See :doc:`/patterns/flashing` for examples."
msgstr ""

# bf896813875642bc87728ebccd3c220f
#: flask.helpers.get_flashed_messages:22 of
msgid "`category_filter` parameter added."
msgstr ""

# 0a9f19430d7940c6a5e37b9677388aa2
#: flask.helpers.get_flashed_messages:19 of
msgid "`with_categories` parameter added."
msgstr ""

# 478f67aa7a9942e3956b4202c2169550
#: flask.helpers.get_flashed_messages:25 of
msgid "set to ``True`` to also receive categories."
msgstr ""

#: flask.helpers.get_flashed_messages:26 of
msgid ""
"filter of categories to limit return values.  Only categories in the list"
" will be returned."
msgstr ""

# 5aa12dec607a4225a278364e5c3ae5b6
#: ../../flask/docs/api.rst:237
msgid "JSON Support"
msgstr ""

#: ../../flask/docs/api.rst:241
msgid ""
"Flask uses the built-in :mod:`json` module for handling JSON. It will use"
" the current blueprint's or application's JSON encoder and decoder for "
"easier customization. By default it handles some extra data types:"
msgstr ""

#: ../../flask/docs/api.rst:245 flask.json.JSONEncoder:4 of
msgid ""
":class:`datetime.datetime` and :class:`datetime.date` are serialized to "
":rfc:`822` strings. This is the same as the HTTP date format."
msgstr ""

#: ../../flask/docs/api.rst:247 flask.json.JSONEncoder:7 of
msgid ":class:`uuid.UUID` is serialized to a string."
msgstr ""

#: ../../flask/docs/api.rst:248 flask.json.JSONEncoder:8 of
msgid ":class:`dataclasses.dataclass` is passed to :func:`dataclasses.asdict`."
msgstr ""

#: ../../flask/docs/api.rst:250 flask.json.JSONEncoder:10 of
msgid ""
":class:`~markupsafe.Markup` (or any object with a ``__html__`` method) "
"will call the ``__html__`` method to get a string."
msgstr ""

#: ../../flask/docs/api.rst:253
msgid ""
"Jinja's ``|tojson`` filter is configured to use Flask's :func:`dumps` "
"function. The filter marks the output with ``|safe`` automatically. Use "
"the filter to render data inside ``<script>`` tags."
msgstr ""

#: flask.json.jsonify:1 of
msgid ""
"Serialize data to JSON and wrap it in a :class:`~flask.Response` with the"
" :mimetype:`application/json` mimetype."
msgstr ""

#: flask.json.jsonify:4 of
msgid ""
"Uses :func:`dumps` to serialize the data, but ``args`` and ``kwargs`` are"
" treated as data rather than arguments to :func:`json.dumps`."
msgstr ""

#: flask.json.jsonify:8 of
msgid "Single argument: Treated as a single value."
msgstr ""

#: flask.json.jsonify:9 of
msgid ""
"Multiple arguments: Treated as a list of values. ``jsonify(1, 2, 3)`` is "
"the same as ``jsonify([1, 2, 3])``."
msgstr ""

#: flask.json.jsonify:11 of
msgid ""
"Keyword arguments: Treated as a dict of values. ``jsonify(data=data, "
"errors=errors)`` is the same as ``jsonify({\"data\": data, \"errors\": "
"errors})``."
msgstr ""

#: flask.json.jsonify:14 of
msgid ""
"Passing both arguments and keyword arguments is not allowed as it's not "
"clear what should happen."
msgstr ""

#: flask.json.jsonify:29 of
msgid "Will return a JSON response like this:"
msgstr ""

#: flask.json.jsonify:39 of
msgid ""
"The default output omits indents and spaces after separators. In debug "
"mode or if :data:`JSONIFY_PRETTYPRINT_REGULAR` is ``True``, the output "
"will be formatted to be easier to read."
msgstr ""

#: flask.json.jsonify:43 of
msgid ""
"Added support for serializing top-level arrays. This introduces a "
"security risk in ancient browsers. See :ref:`security-json`."
msgstr ""

#: flask.json.dumps:1 of
msgid "Serialize an object to a string of JSON."
msgstr ""

#: flask.json.dumps:3 of
msgid ""
"Takes the same arguments as the built-in :func:`json.dumps`, with some "
"defaults from application configuration."
msgstr ""

# 4dd67485b7094907b9482452ac59c299
#: flask.json.dump:6 flask.json.dumps:6 of
msgid "Object to serialize to JSON."
msgstr ""

#: flask.json.dump:8 flask.json.dumps:7 flask.json.load:7 flask.json.loads:7 of
msgid "Use this app's config instead of the active app context or defaults."
msgstr ""

# f461866812624818b54757cf8275d3b7
# ba7a8056f89843ea82a439119394e903
#: flask.json.dumps:9 of
msgid "Extra arguments passed to :func:`json.dumps`."
msgstr ""

#: flask.json.dumps:11 of
msgid "``encoding`` is deprecated and will be removed in Flask 2.1."
msgstr ""

# 03c9fddd9b634503bd05bc421c56163a
# 3f5e7d6b621f417f86fe67dce40d1322
#: flask.json.dumps:14 flask.json.loads:15 of
msgid ""
"``app`` can be passed directly, rather than requiring an app context for "
"configuration."
msgstr ""

#: flask.json.dump:1 of
msgid "Serialize an object to JSON written to a file object."
msgstr ""

#: flask.json.dump:3 of
msgid ""
"Takes the same arguments as the built-in :func:`json.dump`, with some "
"defaults from application configuration."
msgstr ""

#: flask.json.dump:7 of
msgid "File object to write JSON to."
msgstr ""

#: flask.json.dump:10 of
msgid "Extra arguments passed to :func:`json.dump`."
msgstr ""

#: flask.json.dump:12 of
msgid ""
"Writing to a binary file, and the ``encoding`` argument, is deprecated "
"and will be removed in Flask 2.1."
msgstr ""

#: flask.json.loads:1 of
msgid "Deserialize an object from a string of JSON."
msgstr ""

#: flask.json.loads:3 of
msgid ""
"Takes the same arguments as the built-in :func:`json.loads`, with some "
"defaults from application configuration."
msgstr ""

# 26f136adc0d646648db30437926c2523
#: flask.json.loads:6 of
msgid "JSON string to deserialize."
msgstr ""

#: flask.json.loads:9 of
msgid "Extra arguments passed to :func:`json.loads`."
msgstr ""

#: flask.json.loads:11 of
msgid ""
"``encoding`` is deprecated and will be removed in Flask 2.1. The data "
"must be a string or UTF-8 bytes."
msgstr ""

#: flask.json.load:1 of
msgid "Deserialize an object from JSON read from a file object."
msgstr ""

#: flask.json.load:3 of
msgid ""
"Takes the same arguments as the built-in :func:`json.load`, with some "
"defaults from application configuration."
msgstr ""

#: flask.json.load:6 of
msgid "File object to read JSON from."
msgstr ""

#: flask.json.load:9 of
msgid "Extra arguments passed to :func:`json.load`."
msgstr ""

#: flask.json.load:11 of
msgid ""
"``encoding`` is deprecated and will be removed in Flask 2.1. The file "
"must be text mode, or binary mode with UTF-8 bytes."
msgstr ""

#: flask.json.JSONEncoder:1 of
msgid ""
"The default JSON encoder. Handles extra types compared to the built-in "
":class:`json.JSONEncoder`."
msgstr ""

#: flask.json.JSONEncoder:13 of
msgid ""
"Assign a subclass of this to :attr:`flask.Flask.json_encoder` or "
":attr:`flask.Blueprint.json_encoder` to override the default."
msgstr ""

#: flask.json.JSONEncoder.default:1 of
msgid ""
"Convert ``o`` to a JSON serializable type. See "
":meth:`json.JSONEncoder.default`. Python does not support overriding how "
"basic types like ``str`` or ``list`` are serialized, they are handled "
"before this method."
msgstr ""

#: flask.json.JSONDecoder:1 of
msgid "The default JSON decoder."
msgstr ""

#: flask.json.JSONDecoder:3 of
msgid ""
"This does not change any behavior from the built-in "
":class:`json.JSONDecoder`."
msgstr ""

#: flask.json.JSONDecoder:6 of
msgid ""
"Assign a subclass of this to :attr:`flask.Flask.json_decoder` or "
":attr:`flask.Blueprint.json_decoder` to override the default."
msgstr ""

# 454d99ff38584d8486d3c7e0ad5ebb5a
#: flask.json.tag:2 of
msgid "Tagged JSON"
msgstr ""

# fb626da2d0d24e0ba27583c1c1780839
#: flask.json.tag:4 of
msgid ""
"A compact representation for lossless serialization of non-standard JSON "
"types. :class:`~flask.sessions.SecureCookieSessionInterface` uses this to"
" serialize the session data, but it may be useful in other places. It can"
" be extended to support other types."
msgstr ""

# 2ac07571812a4239a0e397477727510b
#: flask.json.tag.TaggedJSONSerializer:1 of
msgid ""
"Serializer that uses a tag system to compactly represent objects that are"
" not JSON types. Passed as the intermediate serializer to "
":class:`itsdangerous.Serializer`."
msgstr ""

# c560b5b49e34445a8d249132ef2885ea
#: flask.json.tag.TaggedJSONSerializer:5 of
msgid "The following extra types are supported:"
msgstr ""

# 9ab5467d076f4814b6d00a63e9ab1c16
#: flask.json.tag.TaggedJSONSerializer:7 of
msgid ":class:`dict`"
msgstr ""

# d14e3ee7e41b48599cc96621617b1ddb
#: flask.json.tag.TaggedJSONSerializer:8 of
msgid ":class:`tuple`"
msgstr ""

# 638a2fa1c7ce414193cafa4816616298
#: flask.json.tag.TaggedJSONSerializer:9 of
msgid ":class:`bytes`"
msgstr ""

#: flask.json.tag.TaggedJSONSerializer:10 of
msgid ":class:`~markupsafe.Markup`"
msgstr ""

# 147d6e351d094cbfaa0ac40c5f26c11f
#: flask.json.tag.TaggedJSONSerializer:11 of
msgid ":class:`~uuid.UUID`"
msgstr ""

# a9609f285d8240d082de7608fb85b16e
#: flask.json.tag.TaggedJSONSerializer:12 of
msgid ":class:`~datetime.datetime`"
msgstr ""

# 13015d9c2e7e46959a3957cd94cc2b76
#: ../../docstring flask.json.tag.TaggedJSONSerializer.default_tags:1 of
msgid ""
"Tag classes to bind when creating the serializer. Other tags can be added"
" later using :meth:`~register`."
msgstr ""

# 2ab1dbb3dec54f11907752104d850e35
#: flask.json.tag.TaggedJSONSerializer.dumps:1 of
msgid "Tag the value and dump it to a compact JSON string."
msgstr ""

# 616dcbec7a6f4b3ea79bd8a1b4ecc460
#: flask.json.tag.TaggedJSONSerializer.loads:1 of
msgid "Load data from a JSON string and deserialized any tagged objects."
msgstr ""

# 02f39fef2d334957b2d3fb55ea6dd479
#: flask.json.tag.TaggedJSONSerializer.register:1 of
msgid "Register a new tag with this serializer."
msgstr ""

# cf71c6bad51e4e7ca5d3f324e150215f
#: flask.json.tag.TaggedJSONSerializer.register:3 of
msgid "tag class to register. Will be instantiated with this serializer instance."
msgstr ""

# d01a42c72da64e28abe19d5e5871dd7c
#: flask.json.tag.TaggedJSONSerializer.register:5 of
msgid ""
"overwrite an existing tag. If false (default), a :exc:`KeyError` is "
"raised."
msgstr ""

# af52715b5564488fb50a91ddae4e39b0
#: flask.json.tag.TaggedJSONSerializer.register:7 of
msgid ""
"index to insert the new tag in the tag order. Useful when the new tag is "
"a special case of an existing tag. If ``None`` (default), the tag is "
"appended to the end of the order."
msgstr ""

# 405755bac92743bab2cf77d9d6212513
#: flask.json.tag.TaggedJSONSerializer.register of
msgid "Raises"
msgstr ""

# 60571875cac741e8b82a28a3e2c53f2e
#: flask.json.tag.TaggedJSONSerializer.register:11 of
msgid "if the tag key is already registered and ``force`` is not true."
msgstr ""

# 55d8b443dbfc4a478433cd18a26711eb
#: flask.json.tag.TaggedJSONSerializer.tag:1 of
msgid "Convert a value to a tagged representation if necessary."
msgstr ""

# 4e025e278a0649f8bb32136beaf6c103
#: flask.json.tag.TaggedJSONSerializer.untag:1 of
msgid "Convert a tagged representation back to the original type."
msgstr ""

# 3d6ea273c93a4ab48cf59ae25aff7c2e
#: flask.json.tag.JSONTag:1 of
msgid "Base class for defining type tags for :class:`TaggedJSONSerializer`."
msgstr ""

# 550e29da946e4b6785f90cdbb6d3bec7
#: flask.json.tag.JSONTag.check:1 of
msgid "Check if the given value should be tagged by this tag."
msgstr ""

# 7f419614ae4f438faf76b8b6e9905c26
#: ../../docstring flask.json.tag.JSONTag.key:1 of
msgid ""
"The tag to mark the serialized object with. If ``None``, this tag is only"
" used as an intermediate step during tagging."
msgstr ""

# 0111d4c6967d4b2fbfc8e8760bb3a71c
#: flask.json.tag.JSONTag.tag:1 of
msgid ""
"Convert the value to a valid JSON type and add the tag structure around "
"it."
msgstr ""

# 2cd86988ab5b4f768b367c916099e40e
#: flask.json.tag.JSONTag.to_json:1 of
msgid ""
"Convert the Python object to an object that is a valid JSON type. The tag"
" will be added later."
msgstr ""

# afaca323065f4f68ab3e6c3e6504adb4
#: flask.json.tag.JSONTag.to_python:1 of
msgid ""
"Convert the JSON representation back to the correct type. The tag will "
"already be removed."
msgstr ""

#: flask.json.tag:15 of
msgid ""
"Let's see an example that adds support for "
":class:`~collections.OrderedDict`. Dicts don't have an order in JSON, so "
"to handle this we will dump the items as a list of ``[key, value]`` "
"pairs. Subclass :class:`JSONTag` and give it the new key ``' od'`` to "
"identify the type. The session serializer processes dicts first, so "
"insert the new tag at the front of the order since ``OrderedDict`` must "
"be processed before ``dict``."
msgstr ""

# a1c7770e05d54978bc66329f0a50d478
#: ../../flask/docs/api.rst:284
msgid "Template Rendering"
msgstr ""

# 4a8cad628bda4101bd929a494d97fdca
#: flask.templating.render_template:1 of
msgid "Renders a template from the template folder with the given context."
msgstr ""

# 0c79012654584f479a16753445e08fdb
#: flask.templating.render_template:4 of
msgid ""
"the name of the template to be rendered, or an iterable with template "
"names the first one existing will be rendered"
msgstr ""

# be438851a2c34d59ac44472980ccd4df
# dec5f0d8d17d46468ef0b3ae582a6dbe
#: flask.templating.render_template:7 flask.templating.render_template_string:6
#: of
msgid "the variables that should be available in the context of the template."
msgstr ""

# 32f08191062b41e187914f7b66b4623e
#: flask.templating.render_template_string:1 of
msgid ""
"Renders a template from the given template source string with the given "
"context. Template variables will be autoescaped."
msgstr ""

# c5a44a8e1b204738a57b6403b3e25325
#: flask.templating.render_template_string:4 of
msgid "the source code of the template to be rendered"
msgstr ""

# b8898bb030b54e70ae6de8e5968ad402
#: flask.helpers.get_template_attribute:1 of
msgid ""
"Loads a macro (or variable) a template exports.  This can be used to "
"invoke a macro from within Python code.  If you for example have a "
"template named :file:`_cider.html` with the following contents:"
msgstr ""

# 7af6f6fb83a5427492b4b6ce73d1ed39
#: flask.helpers.get_template_attribute:9 of
msgid "You can access this from Python code like this::"
msgstr ""

# 8781d76812b84422b3c009ff81db70c1
#: flask.helpers.get_template_attribute:16 of
msgid "the name of the template"
msgstr ""

# b6d2ca6cbdd54ef5ad715b4e97a98f23
#: flask.helpers.get_template_attribute:17 of
msgid "the name of the variable of macro to access"
msgstr ""

# 2f72505f8f114d19b8260b15e792beeb
#: ../../flask/docs/api.rst:295
msgid "Configuration"
msgstr ""

# f3ceb7000ac0481495a087071811043c
#: flask.config.Config:1 of
msgid ""
"Works exactly like a dict but provides ways to fill it from files or "
"special dictionaries.  There are two common patterns to populate the "
"config."
msgstr ""

# 7a8f094a723b4d88bdcdcb2b24ee3584
#: flask.config.Config:5 of
msgid "Either you can fill the config from a config file::"
msgstr ""

# 2c80e09fefbb415bb4d99e3eb2f354ad
#: flask.config.Config:9 of
msgid ""
"Or alternatively you can define the configuration options in the module "
"that calls :meth:`from_object` or provide an import path to a module that"
" should be loaded.  It is also possible to tell it to use the same module"
" and with that provide the configuration values just before the call::"
msgstr ""

# 1200a6a503ef4666881415f9351e71bd
#: flask.config.Config:19 of
msgid ""
"In both cases (loading from any Python file or loading from modules), "
"only uppercase keys are added to the config.  This makes it possible to "
"use lowercase values in the config file for temporary values that are not"
" added to the config or to define the config keys in the same file that "
"implements the application."
msgstr ""

# 6d799632191c4dfe94df034bb95db2f0
#: flask.config.Config:25 of
msgid ""
"Probably the most interesting way to load configurations is from an "
"environment variable pointing to a file::"
msgstr ""

# 26a6a066144c45488c4810a2bc70eb48
#: flask.config.Config:30 of
msgid ""
"In this case before launching the application you have to set this "
"environment variable to the file you want to use.  On Linux and OS X use "
"the export statement::"
msgstr ""

# 69a1bf12d4204c99bddc175ff69c0e37
#: flask.config.Config:36 of
msgid "On windows use `set` instead."
msgstr ""

# 51142598f99c4cfe8f900040856b1d88
#: flask.config.Config:38 of
msgid ""
"path to which files are read relative from.  When the config object is "
"created by the application, this is the application's "
":attr:`~flask.Flask.root_path`."
msgstr ""

# b9a02eb1b0e64dbdb8a16db7cc656b39
#: flask.config.Config:41 of
msgid "an optional dictionary of default values"
msgstr ""

# 4e5b0b5ced4d429f99cda20a3ebcba8d
#: flask.config.Config.from_envvar:1 of
msgid ""
"Loads a configuration from an environment variable pointing to a "
"configuration file.  This is basically just a shortcut with nicer error "
"messages for this line of code::"
msgstr ""

# 14eb5258fed4475389482f6a99ff059c
#: flask.config.Config.from_envvar:7 of
msgid "name of the environment variable"
msgstr ""

# 5543afa2b8e04981939d22c120cf5f6c
# 3277d75976334ca5a90bb3c25c99bd19
# 05fa58e096c448ddaedfc2a66b687eab
#: flask.config.Config.from_envvar:8 flask.config.Config.from_pyfile:8 of
msgid "set to ``True`` if you want silent failure for missing files."
msgstr ""

# c73e6c78926b48e0acd2c92d9e06a524
#: flask.config.Config.from_envvar:10 of
msgid "bool. ``True`` if able to load config, ``False`` otherwise."
msgstr ""

#: flask.config.Config.from_file:1 of
msgid ""
"Update the values in the config from a file that is loaded using the "
"``load`` parameter. The loaded data is passed to the :meth:`from_mapping`"
" method."
msgstr ""

#: flask.config.Config.from_file:10 of
msgid ""
"The path to the data file. This can be an absolute path or relative to "
"the config root path."
msgstr ""

#: flask.config.Config.from_file:12 of
msgid ""
"A callable that takes a file handle and returns a mapping of loaded data "
"from the file."
msgstr ""

#: flask.config.Config.from_file:16 flask.config.Config.from_json:6 of
msgid "Ignore the file if it doesn't exist."
msgstr ""

#: flask.config.Config.from_json:1 of
msgid ""
"Update the values in the config from a JSON file. The loaded data is "
"passed to the :meth:`from_mapping` method."
msgstr ""

#: flask.config.Config.from_json:4 of
msgid ""
"The path to the JSON file. This can be an absolute path or relative to "
"the config root path."
msgstr ""

#: flask.config.Config.from_json:8 of
msgid ""
"Will be removed in Flask 2.1. Use :meth:`from_file` instead. This was "
"removed early in 2.0.0, was added back in 2.0.1."
msgstr ""

# 612711592fcd4aabb15b52148b019075
#: flask.config.Config.from_mapping:1 of
msgid "Updates the config like :meth:`update` ignoring items with non-upper keys."
msgstr ""

# e0847a2f8fe44725a673fe8cc3a23f04
#: flask.config.Config.from_object:1 of
msgid ""
"Updates the values from the given object.  An object can be of one of the"
" following two types:"
msgstr ""

# 3fe3b0fa4b6e4e45a6b0340bc3ffb3cc
#: flask.config.Config.from_object:4 of
msgid "a string: in this case the object with that name will be imported"
msgstr ""

# 3dc7cfab5ad248e48d8bb92d96218a7f
#: flask.config.Config.from_object:5 of
msgid "an actual object reference: that object is used directly"
msgstr ""

# f8485e4090d0438ba84c1a3626731250
#: flask.config.Config.from_object:7 of
msgid ""
"Objects are usually either modules or classes. :meth:`from_object` loads "
"only the uppercase attributes of the module/class. A ``dict`` object will"
" not work with :meth:`from_object` because the keys of a ``dict`` are not"
" attributes of the ``dict`` class."
msgstr ""

# 2b359acb4e1c44ba84071200a4390ba7
#: flask.config.Config.from_object:12 of
msgid "Example of module-based configuration::"
msgstr ""

# 800759b028bc4c7f9cc4f4f3167715aa
#: flask.config.Config.from_object:18 of
msgid ""
"Nothing is done to the object before loading. If the object is a class "
"and has ``@property`` attributes, it needs to be instantiated before "
"being passed to this method."
msgstr ""

# 46546faaafa046049e44ee8754a7628e
#: flask.config.Config.from_object:22 of
msgid ""
"You should not use this function to load the actual configuration but "
"rather configuration defaults.  The actual config should be loaded with "
":meth:`from_pyfile` and ideally from a location not within the package "
"because the package might be installed system wide."
msgstr ""

# 97021cdb137e462cbce6f8105db6c8e4
#: flask.config.Config.from_object:27 of
msgid ""
"See :ref:`config-dev-prod` for an example of class-based configuration "
"using :meth:`from_object`."
msgstr ""

# abc6169508f2415bbb4e1d5c787916ae
#: flask.config.Config.from_object:30 of
msgid "an import name or object"
msgstr ""

# fc08463a30dc43cb9d44958a1efeb2ed
#: flask.config.Config.from_pyfile:1 of
msgid ""
"Updates the values in the config from a Python file.  This function "
"behaves as if the file was imported as module with the "
":meth:`from_object` function."
msgstr ""

# 47799ff02fe44cffa79bd179dba2161c
#: flask.config.Config.from_pyfile:5 of
msgid ""
"the filename of the config.  This can either be an absolute filename or a"
" filename relative to the root path."
msgstr ""

# 9049cfcc28654f05abc5963f97e3d42e
#: flask.config.Config.from_pyfile:11 of
msgid "`silent` parameter."
msgstr ""

# ce3e4fe3ed5947e98ad7132352ca70b4
#: flask.config.Config.get_namespace:1 of
msgid ""
"Returns a dictionary containing a subset of configuration options that "
"match the specified namespace/prefix. Example usage::"
msgstr ""

# 462a846027524d62bc8d9f45b7cb9131
#: flask.config.Config.get_namespace:9 of
msgid "The resulting dictionary `image_store_config` would look like::"
msgstr ""

# 4901edc45a234fc79808e57d1130572e
#: flask.config.Config.get_namespace:17 of
msgid ""
"This is often useful when configuration options map directly to keyword "
"arguments in functions or class constructors."
msgstr ""

# b1ce675d99b64b1690cc5c668026d6d6
#: flask.config.Config.get_namespace:20 of
msgid "a configuration namespace"
msgstr ""

# 6a4b1f40ed5d4831b2ff77824aa9fdeb
#: flask.config.Config.get_namespace:21 of
msgid ""
"a flag indicating if the keys of the resulting dictionary should be "
"lowercase"
msgstr ""

# 7921bbe8a5ee4d6d8271f1536440c06a
#: flask.config.Config.get_namespace:23 of
msgid ""
"a flag indicating if the keys of the resulting dictionary should not "
"include the namespace"
msgstr ""

# 2a241cea59ae4404ae76e7697a175c7a
#: ../../flask/docs/api.rst:302
msgid "Stream Helpers"
msgstr ""

# b4f452a1bcf04fb182b0da68c600617f
#: flask.helpers.stream_with_context:1 of
msgid ""
"Request contexts disappear when the response is started on the server. "
"This is done for efficiency reasons and to make it less likely to "
"encounter memory leaks with badly written WSGI middlewares.  The downside"
" is that if you are using streamed responses, the generator cannot access"
" request bound information any more."
msgstr ""

# 654424d07f6143748b2d1e6627800e7c
#: flask.helpers.stream_with_context:7 of
msgid "This function however can help you keep the context around for longer::"
msgstr ""

# 2dc8661a0db2488292586157c5003833
#: flask.helpers.stream_with_context:20 of
msgid "Alternatively it can also be used around a specific generator::"
msgstr ""

# 67e7eaa9018b4a3c91237cfe2ee2b4ef
#: ../../flask/docs/api.rst:307
msgid "Useful Internals"
msgstr ""

# a514529fad814a89a725556bbbaa9dc3
#: flask.ctx.RequestContext:1 of
msgid ""
"The request context contains all request relevant information.  It is "
"created at the beginning of the request and pushed to the "
"`_request_ctx_stack` and removed at the end of it.  It will create the "
"URL adapter and request object for the WSGI environment provided."
msgstr ""

# 5bca2ed286df464fa28c66208e511113
#: flask.ctx.RequestContext:6 of
msgid ""
"Do not attempt to use this class directly, instead use "
":meth:`~flask.Flask.test_request_context` and "
":meth:`~flask.Flask.request_context` to create this object."
msgstr ""

# b71a317e8442422a8d510010be65aeb5
#: flask.ctx.RequestContext:10 of
msgid ""
"When the request context is popped, it will evaluate all the functions "
"registered on the application for teardown execution "
"(:meth:`~flask.Flask.teardown_request`)."
msgstr ""

# 4eaf619ccb23413e914875360b1a9cd1
#: flask.ctx.RequestContext:14 of
msgid ""
"The request context is automatically popped at the end of the request for"
" you.  In debug mode the request context is kept around if exceptions "
"happen so that interactive debuggers have a chance to introspect the "
"data.  With 0.4 this can also be forced for requests that did not fail "
"and outside of ``DEBUG`` mode.  By setting ``'flask._preserve_context'`` "
"to ``True`` on the WSGI environment the context will not pop itself at "
"the end of the request.  This is used by the "
":meth:`~flask.Flask.test_client` for example to implement the deferred "
"cleanup functionality."
msgstr ""

# 9b46beae90cf4e9b876d8240bfc8201a
#: flask.ctx.RequestContext:24 of
msgid ""
"You might find this helpful for unittests where you need the information "
"from the context local around for a little longer.  Make sure to properly"
" :meth:`~werkzeug.LocalStack.pop` the stack yourself in that situation, "
"otherwise your unittests will leak memory."
msgstr ""

# b273cabe59dd4aacb63ad6b2c005628c
#: flask.ctx.RequestContext.copy:1 of
msgid ""
"Creates a copy of this request context with the same request object. This"
" can be used to move a request context to a different greenlet. Because "
"the actual request object is the same this cannot be used to move a "
"request context to a different thread unless access to the request object"
" is locked."
msgstr ""

# b8137572ff1c46629a98f8857e78a3ea
#: flask.ctx.RequestContext.copy:9 of
msgid ""
"The current session object is used instead of reloading the original "
"data. This prevents `flask.session` pointing to an out-of-date object."
msgstr ""

# 9d6dec9fbfa74841980218db64af6eb3
#: flask.ctx.RequestContext.match_request:1 of
msgid "Can be overridden by a subclass to hook into the matching of the request."
msgstr ""

# 05d81939f1864dba8f9e7c39a5925ef0
#: flask.ctx.RequestContext.pop:1 of
msgid ""
"Pops the request context and unbinds it by doing that.  This will also "
"trigger the execution of functions registered by the "
":meth:`~flask.Flask.teardown_request` decorator."
msgstr ""

# 24795f79784148e49cc4a411eb18adfc
#: flask.ctx.RequestContext.pop:5 of
msgid "Added the `exc` argument."
msgstr ""

# 7a4ec60ec0ca43a0818550023ab39845
#: flask.ctx.RequestContext.push:1 of
msgid "Binds the request context to the current context."
msgstr ""

# 7fd43072251443c78ea1c0ce26ae27c5
#: ../../flask/docs/api.rst:314
msgid ""
"The internal :class:`~werkzeug.local.LocalStack` that holds "
":class:`~flask.ctx.RequestContext` instances. Typically, the "
":data:`request` and :data:`session` proxies should be accessed instead of"
" the stack. It may be useful to access the stack in extension code."
msgstr ""

# 4cb64b7036b24d19b2b82f100ba5edac
#: ../../flask/docs/api.rst:320
msgid "The following attributes are always present on each layer of the stack:"
msgstr ""

# 7f181b151063489892253a4b97932f2d
#: ../../flask/docs/api.rst:324
msgid "`app`"
msgstr ""

# efe1b945d4d9434fa33f584907a22a6f
#: ../../flask/docs/api.rst:324
msgid "the active Flask application."
msgstr ""

# 97b50ce0e3b14264873438eb15ea16b1
#: ../../flask/docs/api.rst:327
msgid "`url_adapter`"
msgstr ""

# 202c79e676124ea4b77cc7442d9bdf98
#: ../../flask/docs/api.rst:327
msgid "the URL adapter that was used to match the request."
msgstr ""

# 634bbe8d8cba40debe09169f11ed8ba8
#: ../../flask/docs/api.rst:330
msgid "`request`"
msgstr ""

# 89c2632514984b53a757e2a15bfed73a
#: ../../flask/docs/api.rst:330
msgid "the current request object."
msgstr ""

# 9354c395a6974fa9b4427195297d4d61
#: ../../flask/docs/api.rst:333
msgid "`session`"
msgstr ""

# 1051184ebbde4d9299772ff7db712d2e
#: ../../flask/docs/api.rst:333
msgid "the active session object."
msgstr ""

# 21c53ccb0eba4d6aa76201d186489bb5
#: ../../flask/docs/api.rst:336
msgid "`g`"
msgstr ""

# a05d8492b3d64ccd982a716453f5d94a
#: ../../flask/docs/api.rst:336
msgid "an object with all the attributes of the :data:`flask.g` object."
msgstr ""

# 51492d495408409a89ef26a3a6775ac3
#: ../../flask/docs/api.rst:339
msgid "`flashes`"
msgstr ""

# 904916e08eb74e5ba4a6bea72ce41fcb
#: ../../flask/docs/api.rst:339
msgid "an internal cache for the flashed messages."
msgstr ""

# 32b7301725bd4e1690c40e63e26043cd
# 098125a0674b42bc97c8e8a2b943445d
# d378259a35df4c2faec6f734c71aa05e
# 8acc2ec2e47141c8bf1f2bc600dd7fc6
# f5770f327b2241c5b73f5873f77890c2
#: ../../flask/docs/api.rst:341 ../../flask/docs/api.rst:515
msgid "Example usage::"
msgstr ""

# baf668568d1a4f2ab952396709e9acec
#: flask.ctx.AppContext:1 of
msgid ""
"The application context binds an application object implicitly to the "
"current thread or greenlet, similar to how the :class:`RequestContext` "
"binds request information.  The application context is also implicitly "
"created if a request context is created but the application is not on top"
" of the individual application context."
msgstr ""

# 3a9a7a2ebdfe47f495a450ea00272bac
#: flask.ctx.AppContext.pop:1 of
msgid "Pops the app context."
msgstr ""

# cfc8faed8cef4f318589e51ad2f10b41
#: flask.ctx.AppContext.push:1 of
msgid "Binds the app context to the current context."
msgstr ""

# b4fbd1697a9645158c4c93857246e32d
#: ../../flask/docs/api.rst:355
msgid ""
"The internal :class:`~werkzeug.local.LocalStack` that holds "
":class:`~flask.ctx.AppContext` instances. Typically, the "
":data:`current_app` and :data:`g` proxies should be accessed instead of "
"the stack. Extensions can access the contexts on the stack as a namespace"
" to store data."
msgstr ""

# 819dbb53b8f5426fa26e03b580a47395
#: flask.blueprints.BlueprintSetupState:1 of
msgid ""
"Temporary holder object for registering a blueprint with the application."
"  An instance of this class is created by the "
":meth:`~flask.Blueprint.make_setup_state` method and later passed to all "
"register callback functions."
msgstr ""

# b49041cdf01849e4b0e7129651175f73
#: flask.blueprints.BlueprintSetupState.add_url_rule:1 of
msgid ""
"A helper method to register a rule (and optionally a view function) to "
"the application.  The endpoint is automatically prefixed with the "
"blueprint's name."
msgstr ""

# 29502d1fb88d47f5844f67948008c675
#: ../../docstring flask.blueprints.BlueprintSetupState.app:1 of
msgid "a reference to the current application"
msgstr ""

# 700ed4a339304d3294cd7020fce22e14
#: ../../docstring flask.blueprints.BlueprintSetupState.blueprint:1 of
msgid "a reference to the blueprint that created this setup state."
msgstr ""

# 80d026f0304a454cb956988fdaaf4604
#: ../../docstring flask.blueprints.BlueprintSetupState.first_registration:1 of
msgid ""
"as blueprints can be registered multiple times with the application and "
"not everything wants to be registered multiple times on it, this "
"attribute can be used to figure out if the blueprint was registered in "
"the past already."
msgstr ""

# 8326ffc5886c46dbb1c2bc72e120dfdd
#: ../../docstring flask.blueprints.BlueprintSetupState.options:1 of
msgid ""
"a dictionary with all options that were passed to the "
":meth:`~flask.Flask.register_blueprint` method."
msgstr ""

# 7f2bf1aaa75f467da91b98e0c2d5e672
#: ../../docstring flask.blueprints.BlueprintSetupState.subdomain:1 of
msgid "The subdomain that the blueprint should be active for, ``None`` otherwise."
msgstr ""

# adbdd853ebc345c18937a55394adb5ca
#: ../../docstring flask.blueprints.BlueprintSetupState.url_defaults:1 of
msgid ""
"A dictionary with URL defaults that is added to each and every URL that "
"was defined with the blueprint."
msgstr ""

# 33649c264e53427e93fcc86b931db200
#: ../../docstring flask.blueprints.BlueprintSetupState.url_prefix:1 of
msgid "The prefix that should be used for all URLs defined on the blueprint."
msgstr ""

# 652f4ddb726942129df93987b5b9486e
#: ../../flask/docs/api.rst:369
msgid "Signals"
msgstr ""

# 612465bc23d1482bbe84237d50a8b5b2
#: ../../flask/docs/api.rst:375
msgid ""
"``True`` if the signaling system is available.  This is the case when "
"`blinker`_ is installed."
msgstr ""

# 0d923e444952416ead415a521e01641d
#: ../../flask/docs/api.rst:378
msgid "The following signals exist in Flask:"
msgstr ""

# 01fe4320682b4d19b9d565e219a9aa94
#: ../../flask/docs/api.rst:382
msgid ""
"This signal is sent when a template was successfully rendered.  The "
"signal is invoked with the instance of the template as `template` and the"
" context as dictionary (named `context`)."
msgstr ""

# eaea714b10a54d259d723f28155a32b3
# 5bc83cc6cc674374bf13308ee413902a
# 702a2ce0b53c4d12bc60b8dd1038a6d2
# e66e2a0b71b04ae0afa182b7141b797c
# 546d2d218f3c4cd0a4f63ef5df0f3ef0
# 1838c88525854f16b6097ed42882a261
# c85bdf253c564e20bb8bf63b56ec1853
# 4da17592370f472f9e71b636f276ca42
#: ../../flask/docs/api.rst:386 ../../flask/docs/api.rst:403
#: ../../flask/docs/api.rst:420 ../../flask/docs/api.rst:433
#: ../../flask/docs/api.rst:478 ../../flask/docs/api.rst:497
#: ../../flask/docs/api.rst:552
msgid "Example subscriber::"
msgstr ""

# f9265ef820dc4105b5196f43b6889912
#: ../../flask/docs/api.rst:399
msgid ""
"This signal is sent before template rendering process. The signal is "
"invoked with the instance of the template as `template` and the context "
"as dictionary (named `context`)."
msgstr ""

# 7b04df996f7c4457ba7fceb100fda6ff
#: ../../flask/docs/api.rst:415
msgid ""
"This signal is sent when the request context is set up, before any "
"request processing happens.  Because the request context is already "
"bound, the subscriber can access the request with the standard global "
"proxies such as :class:`~flask.request`."
msgstr ""

# 3cce4890598447ba9e6670f9125b1a99
#: ../../flask/docs/api.rst:430
msgid ""
"This signal is sent right before the response is sent to the client. It "
"is passed the response to be sent named `response`."
msgstr ""

#: ../../flask/docs/api.rst:444
msgid ""
"This signal is sent when an unhandled exception happens during request "
"processing, including when debugging. The exception is passed to the "
"subscriber as ``exception``."
msgstr ""

#: ../../flask/docs/api.rst:448
msgid ""
"This signal is not sent for :exc:`~werkzeug.exceptions.HTTPException`, or"
" other exceptions that have error handlers registered, unless the "
"exception was raised from an error handler."
msgstr ""

#: ../../flask/docs/api.rst:453
msgid ""
"This example shows how to do some extra logging if a theoretical "
"``SecurityException`` was raised:"
msgstr ""

# c86ef583b9694eafa047129ac4610ab8
#: ../../flask/docs/api.rst:473
msgid ""
"This signal is sent when the request is tearing down.  This is always "
"called, even if an exception is caused.  Currently functions listening to"
" this signal are called after the regular teardown handlers, but this is "
"not something you can rely on."
msgstr ""

# 50db4649dacc45189f9e4c1af1ecf5a8
#: ../../flask/docs/api.rst:486
msgid ""
"As of Flask 0.9, this will also be passed an `exc` keyword argument that "
"has a reference to the exception that caused the teardown if there was "
"one."
msgstr ""

# a6b7c723166240788588d8fb3b65c9cb
#: ../../flask/docs/api.rst:492
msgid ""
"This signal is sent when the app context is tearing down.  This is always"
" called, even if an exception is caused.  Currently functions listening "
"to this signal are called after the regular teardown handlers, but this "
"is not something you can rely on."
msgstr ""

# b570a4e7a0b449c5be6f94fa1f41eb31
#: ../../flask/docs/api.rst:505
msgid ""
"This will also be passed an `exc` keyword argument that has a reference "
"to the exception that caused the teardown if there was one."
msgstr ""

# ce1ed71953f64c73ab015c6b2ed9e236
#: ../../flask/docs/api.rst:510
msgid ""
"This signal is sent when an application context is pushed.  The sender is"
" the application.  This is usually useful for unittests in order to "
"temporarily hook in information.  For instance it can be used to set a "
"resource early onto the `g` object."
msgstr ""

# c93fa8b9321d4745b0da70b8d36003b2
#: ../../flask/docs/api.rst:527
msgid "And in the testcode::"
msgstr ""

# 4b636fd2050f4b0199206f2183e6ab53
#: ../../flask/docs/api.rst:539
msgid ""
"This signal is sent when an application context is popped.  The sender is"
" the application.  This usually falls in line with the "
":data:`appcontext_tearing_down` signal."
msgstr ""

# 1acda3fcf0034d61aaad23178e025a1c
#: ../../flask/docs/api.rst:548
msgid ""
"This signal is sent when the application is flashing a message.  The "
"messages is sent as `message` keyword argument and the category as "
"`category`."
msgstr ""

# 3d78ca25944a4b64a601a7901e24b68d
#: ../../flask/docs/api.rst:565
msgid ""
"An alias for :class:`blinker.base.Namespace` if blinker is available, "
"otherwise a dummy class that creates fake signals.  This class is "
"available for Flask extensions that want to provide the same fallback "
"system as Flask itself."
msgstr ""

# 2890e83fdf434334a9b08c846b445aee
#: ../../flask/docs/api.rst:572
msgid ""
"Creates a new signal for this namespace if blinker is available, "
"otherwise returns a fake signal that has a send method that will do "
"nothing but will fail with a :exc:`RuntimeError` for all other "
"operations, including connecting."
msgstr ""

# dd2186ad313848469b6df231de8e389a
#: ../../flask/docs/api.rst:582
msgid "Class-Based Views"
msgstr ""

# 6350d05c5c2646d09a7b6ef2d8919e8d
#: flask.views.View:1 of
msgid ""
"Alternative way to use view functions.  A subclass has to implement "
":meth:`dispatch_request` which is called with the view arguments from the"
" URL routing system.  If :attr:`methods` is provided the methods do not "
"have to be passed to the :meth:`~flask.Flask.add_url_rule` method "
"explicitly::"
msgstr ""

# db1e99e4816c4d1bbea874b494ba7a00
#: flask.views.View:15 of
msgid ""
"When you want to decorate a pluggable view you will have to either do "
"that when the view function is created (by wrapping the return value of "
":meth:`as_view`) or you can use the :attr:`decorators` attribute::"
msgstr ""

# b6e3e963893b4723b27993799fb05186
#: flask.views.View:26 of
msgid ""
"The decorators stored in the decorators list are applied one after "
"another when the view function is created.  Note that you can *not* use "
"the class based decorators since those would decorate the view class and "
"not the generated view function!"
msgstr ""

# c3f820d6028c4e62a8ae68aef6e287e7
#: flask.views.View.as_view:1 of
msgid ""
"Converts the class into an actual view function that can be used with the"
" routing system.  Internally this generates a function on the fly which "
"will instantiate the :class:`View` on each request and call the "
":meth:`dispatch_request` method on it."
msgstr ""

# 63372a4c32224a46857e5d492aa76bbb
#: flask.views.View.as_view:6 of
msgid ""
"The arguments passed to :meth:`as_view` are forwarded to the constructor "
"of the class."
msgstr ""

# 925fd4492ed4473783682289d98750bf
#: ../../docstring flask.views.View.decorators:1 of
msgid ""
"The canonical way to decorate class-based views is to decorate the return"
" value of as_view().  However since this moves parts of the logic from "
"the class declaration to the place where it's hooked into the routing "
"system."
msgstr ""

# 5e737cd535174c2dabf0c269d28e063d
#: ../../docstring flask.views.View.decorators:6 of
msgid ""
"You can place one or more decorators in this list and whenever the view "
"function is created the result is automatically decorated."
msgstr ""

# dc9e49b7738c464aa379b2310f3a6cc9
# 1ccc9ba4b5434a61b5e19670b7e03d65
#: flask.views.MethodView.dispatch_request:1
#: flask.views.View.dispatch_request:1 of
msgid ""
"Subclasses have to override this method to implement the actual view "
"function code.  This method is called with all the arguments from the URL"
" rule."
msgstr ""

# 3f6f768146e44270bae13502ee94e299
#: ../../docstring flask.views.View.methods:1 of
msgid "A list of methods this view can handle."
msgstr ""

# a36526263c8044ba8486ec7146b33e97
#: ../../docstring flask.views.View.provide_automatic_options:1 of
msgid "Setting this disables or force-enables the automatic options handling."
msgstr ""

# 6ab9ede3d8cc43e38fb845b345ceb158
#: flask.views.MethodView:1 of
msgid ""
"A class-based view that dispatches request methods to the corresponding "
"class methods. For example, if you implement a ``get`` method, it will be"
" used to handle ``GET`` requests. ::"
msgstr ""

# 18f1d7d10d964306a9eabdd9a6392dd1
#: ../../flask/docs/api.rst:597
msgid "URL Route Registrations"
msgstr ""

# 343c891f77de40209a53d2279f8f6e6c
#: ../../flask/docs/api.rst:599
msgid "Generally there are three ways to define rules for the routing system:"
msgstr ""

# b1150b9d9c9d40f08e239c8e4873221c
#: ../../flask/docs/api.rst:601
msgid "You can use the :meth:`flask.Flask.route` decorator."
msgstr ""

# 8c19ed806c4f461587e02b2b4778dc18
#: ../../flask/docs/api.rst:602
msgid "You can use the :meth:`flask.Flask.add_url_rule` function."
msgstr ""

# 829400d5ab264736b9c2e40bd57ae71b
#: ../../flask/docs/api.rst:603
msgid ""
"You can directly access the underlying Werkzeug routing system which is "
"exposed as :attr:`flask.Flask.url_map`."
msgstr ""

# 91b0ad78d49d418f91fed58f245b7c01
#: ../../flask/docs/api.rst:606
msgid ""
"Variable parts in the route can be specified with angular brackets "
"(``/user/<username>``).  By default a variable part in the URL accepts "
"any string without a slash however a different converter can be specified"
" as well by using ``<converter:name>``."
msgstr ""

# f047b1724aed412b999e31254aee525e
#: ../../flask/docs/api.rst:611
msgid "Variable parts are passed to the view function as keyword arguments."
msgstr ""

# 3c6192dd68a948308dd375a326f99259
#: ../../flask/docs/api.rst:613
msgid "The following converters are available:"
msgstr ""

# 9b15b4db939844fc93e3fe8149eabf5f
#: ../../flask/docs/api.rst:616
msgid "`string`"
msgstr ""

# c36b6ac4e93f41359d176cde20dd3e71
#: ../../flask/docs/api.rst:616
msgid "accepts any text without a slash (the default)"
msgstr ""

# 1d94e5cb82f54c68ad5384b9c448428e
#: ../../flask/docs/api.rst:617
msgid "`int`"
msgstr ""

# a3c098b3573e48aab697f3950ee67db6
#: ../../flask/docs/api.rst:617
msgid "accepts integers"
msgstr ""

# c32d05d41d9644c694020646054cda2d
#: ../../flask/docs/api.rst:618
msgid "`float`"
msgstr ""

# 1cdd430e37d74524a24a7faac5a2fcbf
#: ../../flask/docs/api.rst:618
msgid "like `int` but for floating point values"
msgstr ""

# b4a0e896c53045c2a97c2138b71868e8
# 02578a19b4454e7dba23f820836ed4db
#: ../../flask/docs/api.rst:619
msgid "`path`"
msgstr ""

# dafb0714e5004d0ea57d577cc29f5e6e
#: ../../flask/docs/api.rst:619
msgid "like the default but also accepts slashes"
msgstr ""

# e26dc8dfdcc44d4b888295e2d96f925c
#: ../../flask/docs/api.rst:620
msgid "`any`"
msgstr ""

# 2c2e90c6c97344a0988092bf5237a2c7
#: ../../flask/docs/api.rst:620
msgid "matches one of the items provided"
msgstr ""

# db21ff1f525a4a9984c4a772d12e6ef3
#: ../../flask/docs/api.rst:621
msgid "`uuid`"
msgstr ""

# 7bfb5cbfcdb2458bbc375d9d0cdf270a
#: ../../flask/docs/api.rst:621
msgid "accepts UUID strings"
msgstr ""

# 9d88aaa6bf4242209f57634979801724
#: ../../flask/docs/api.rst:624
msgid "Custom converters can be defined using :attr:`flask.Flask.url_map`."
msgstr ""

# a93aa0d705324cff9a04e234bab0633a
#: ../../flask/docs/api.rst:626
msgid "Here are some examples::"
msgstr ""

# f39617b7953849dbbd37888ad45a8c71
#: ../../flask/docs/api.rst:640
msgid ""
"An important detail to keep in mind is how Flask deals with trailing "
"slashes.  The idea is to keep each URL unique so the following rules "
"apply:"
msgstr ""

# 79996cf001a642dea9379fa3788a45b3
#: ../../flask/docs/api.rst:644
msgid ""
"If a rule ends with a slash and is requested without a slash by the user,"
" the user is automatically redirected to the same page with a trailing "
"slash attached."
msgstr ""

# 0c107d0f475d4bdea525798fdfb7962e
#: ../../flask/docs/api.rst:647
msgid ""
"If a rule does not end with a trailing slash and the user requests the "
"page with a trailing slash, a 404 not found is raised."
msgstr ""

# 78aa1ccbc4d442f6ae04ccd70e4d2161
#: ../../flask/docs/api.rst:650
msgid ""
"This is consistent with how web servers deal with static files.  This "
"also makes it possible to use relative link targets safely."
msgstr ""

# f18a7760e9a147079bad37152d6c1fed
#: ../../flask/docs/api.rst:653
msgid ""
"You can also define multiple rules for the same function.  They have to "
"be unique however.  Defaults can also be specified.  Here for example is "
"a definition for a URL that accepts an optional page::"
msgstr ""

# f023bbb6f5014de5a5e6cc5466fc7a48
#: ../../flask/docs/api.rst:662
msgid ""
"This specifies that ``/users/`` will be the URL for page one and "
"``/users/page/N`` will be the URL for page ``N``."
msgstr ""

# 10956cf7c3a94e93a679e6302d51412a
#: ../../flask/docs/api.rst:665
msgid ""
"If a URL contains a default value, it will be redirected to its simpler "
"form with a 301 redirect. In the above example, ``/users/page/1`` will be"
" redirected to ``/users/``. If your route handles ``GET`` and ``POST`` "
"requests, make sure the default route only handles ``GET``, as redirects "
"can't preserve form data. ::"
msgstr ""

# 38ec03b943d64f4c9c5ac3ebc28996bb
#: ../../flask/docs/api.rst:676
msgid ""
"Here are the parameters that :meth:`~flask.Flask.route` and "
":meth:`~flask.Flask.add_url_rule` accept.  The only difference is that "
"with the route parameter the view function is defined with the decorator "
"instead of the `view_func` parameter."
msgstr ""

# 48e106bb280b4bdda0a85f6554747cb4
#: ../../flask/docs/api.rst:682
msgid "`rule`"
msgstr ""

# d77428a7ee52425d9740e4b2c5552a66
# 61d0c203112945d9be0c51e0ed784223
# e302c3f1700f40dea6bcce45ff9c1dc9
#: ../../flask/docs/api.rst:682
msgid "the URL rule as string"
msgstr ""

# 60d55fd087b54436a9572af4bc506217
#: ../../flask/docs/api.rst:683
msgid "`endpoint`"
msgstr ""

# be4e77a78ed84bcb8d011b7580beda38
#: ../../flask/docs/api.rst:683
msgid ""
"the endpoint for the registered URL rule.  Flask itself assumes that the "
"name of the view function is the name of the endpoint if not explicitly "
"stated."
msgstr ""

# 1b9daffc09254075af85c850ae5cd2bf
#: ../../flask/docs/api.rst:686
msgid "`view_func`"
msgstr ""

# da80f358936a458d82810b5ce558d70f
#: ../../flask/docs/api.rst:686
msgid ""
"the function to call when serving a request to the provided endpoint.  If"
" this is not provided one can specify the function later by storing it in"
" the :attr:`~flask.Flask.view_functions` dictionary with the endpoint as "
"key."
msgstr ""

# 6f0742e881ae4a87868a93edd57f5204
#: ../../flask/docs/api.rst:691
msgid "`defaults`"
msgstr ""

# c2ec46c6d23b4cc38e111beec1988f31
#: ../../flask/docs/api.rst:691
msgid ""
"A dictionary with defaults for this rule.  See the example above for how "
"defaults work."
msgstr ""

# 0616e9b905b9495e9def3a221cf7efa0
#: ../../flask/docs/api.rst:693
msgid "`subdomain`"
msgstr ""

# 4894afac789e427dac934f47767e1308
#: ../../flask/docs/api.rst:693
msgid ""
"specifies the rule for the subdomain in case subdomain matching is in "
"use.  If not specified the default subdomain is assumed."
msgstr ""

# d86baee678b74c549f3e9e8e937fc2f6
#: ../../flask/docs/api.rst:696
msgid "`**options`"
msgstr ""

# 86145695b1d44c00a141eccbb8629683
#: ../../flask/docs/api.rst:696
msgid ""
"the options to be forwarded to the underlying "
":class:`~werkzeug.routing.Rule` object.  A change to Werkzeug is handling"
" of method options.  methods is a list of methods this rule should be "
"limited to (``GET``, ``POST`` etc.).  By default a rule just listens for "
"``GET`` (and implicitly ``HEAD``).  Starting with Flask 0.6, ``OPTIONS`` "
"is implicitly added and handled by the standard request handling.  They "
"have to be specified as keyword arguments."
msgstr ""

# 3680a37904754168ae48fec5c5d6806f
#: ../../flask/docs/api.rst:708
msgid "View Function Options"
msgstr ""

# 3ab36fc0c4084ed89f295b41ae85cace
#: ../../flask/docs/api.rst:710
msgid ""
"For internal usage the view functions can have some attributes attached "
"to customize behavior the view function would normally not have control "
"over. The following attributes can be provided optionally to either "
"override some defaults to :meth:`~flask.Flask.add_url_rule` or general "
"behavior:"
msgstr ""

# 17fa8f970c754a769a98f14fc427693f
#: ../../flask/docs/api.rst:715
msgid ""
"`__name__`: The name of a function is by default used as endpoint.  If "
"endpoint is provided explicitly this value is used.  Additionally this "
"will be prefixed with the name of the blueprint by default which cannot "
"be customized from the function itself."
msgstr ""

# a0e451ddec0444148f0b9e41f383fbe2
#: ../../flask/docs/api.rst:720
msgid ""
"`methods`: If methods are not provided when the URL rule is added, Flask "
"will look on the view function object itself if a `methods` attribute "
"exists.  If it does, it will pull the information for the methods from "
"there."
msgstr ""

# 030ac347e5eb4b9aaa9ed10844c28bc2
#: ../../flask/docs/api.rst:725
msgid ""
"`provide_automatic_options`: if this attribute is set Flask will either "
"force enable or disable the automatic implementation of the HTTP "
"``OPTIONS`` response.  This can be useful when working with decorators "
"that want to customize the ``OPTIONS`` response on a per-view basis."
msgstr ""

# b6ed5d71777740c1b9f080e8ff994d0a
#: ../../flask/docs/api.rst:731
msgid ""
"`required_methods`: if this attribute is set, Flask will always add these"
" methods when registering a URL rule even if the methods were explicitly "
"overridden in the ``route()`` call."
msgstr ""

# f28c1c63b60449d484eba621ffd8c9be
#: ../../flask/docs/api.rst:735
msgid "Full example::"
msgstr ""

# 06bc8fe084284b49a33f3a3d34ea96f4
#: ../../flask/docs/api.rst:747
msgid "The `provide_automatic_options` functionality was added."
msgstr ""

# 9623239c309147e9bd42d76d8adba934
#: ../../flask/docs/api.rst:751
msgid "Command Line Interface"
msgstr ""

#: flask.cli.FlaskGroup:1 of
msgid ""
"Special subclass of the :class:`AppGroup` group that supports loading "
"more commands from the configured Flask app.  Normally a developer does "
"not have to interface with this class but there are some very advanced "
"use cases for which it makes sense to create an instance of this. see "
":ref:`custom-scripts`."
msgstr ""

# de7aeede1f064609acda725d35ad9186
#: flask.cli.FlaskGroup:7 of
msgid "if this is True then the default run and shell commands will be added."
msgstr ""

# fbc9416ae0a24da7bd1d8da43865af36
#: flask.cli.FlaskGroup:9 of
msgid "adds the ``--version`` option."
msgstr ""

# 35947d80205a46a6a84d461a217e6971
#: flask.cli.FlaskGroup:10 of
msgid ""
"an optional callback that is passed the script info and returns the "
"loaded app."
msgstr ""

# c61585b3d66e48afbd96304d2fd0c6fa
#: flask.cli.FlaskGroup:15 of
msgid "Set the app's debug flag based on the active environment"
msgstr ""

# f5a20c60c16b4db89aed8fb2c0acb24f
#: flask.cli.FlaskGroup.get_command:1 of
msgid ""
"Given a context and a command name, this returns a :class:`Command` "
"object if it exists or returns `None`."
msgstr ""

# 9e162a0794954b4bbbead5c4e8a8a982
#: flask.cli.FlaskGroup.list_commands:1 of
msgid "Returns a list of subcommand names in the order they should appear."
msgstr ""

# 8f6f69b35861489b8fd466a06c838b28
#: flask.cli.FlaskGroup.main:1 of
msgid ""
"This is the way to invoke a script with all the bells and whistles as a "
"command line application.  This will always terminate the application "
"after a call.  If this is not wanted, ``SystemExit`` needs to be caught."
msgstr ""

# 27e47cb1a9574a969af77552904f37b6
#: flask.cli.FlaskGroup.main:6 of
msgid ""
"This method is also available by directly calling the instance of a "
":class:`Command`."
msgstr ""

# 4fb00647af6548429a247081bccfb1c8
#: flask.cli.FlaskGroup.main:9 of
msgid ""
"the arguments that should be used for parsing.  If not provided, "
"``sys.argv[1:]`` is used."
msgstr ""

# 1b8bb7519d4e42889497e63b951ccdf1
#: flask.cli.FlaskGroup.main:11 of
msgid ""
"the program name that should be used.  By default the program name is "
"constructed by taking the file name from ``sys.argv[0]``."
msgstr ""

# d356ed3cff1e46d9990c8ebd6b58666f
#: flask.cli.FlaskGroup.main:14 of
msgid ""
"the environment variable that controls the bash completion support.  The "
"default is ``\"_<prog_name>_COMPLETE\"`` with prog_name in uppercase."
msgstr ""

# 8808c958134a4e7c929e83ccf8002e45
#: flask.cli.FlaskGroup.main:18 of
msgid ""
"the default behavior is to invoke the script in standalone mode.  Click "
"will then handle exceptions and convert them into error messages and the "
"function will never return but shut down the interpreter.  If this is set"
" to `False` they will be propagated to the caller and the return value of"
" this function is the return value of :meth:`invoke`."
msgstr ""

#: flask.cli.FlaskGroup.main:27 of
msgid ""
"Expand glob patterns, user dir, and env vars in command line args on "
"Windows."
msgstr ""

# 260189a8f687455387f5a36508eed7c2
#: flask.cli.FlaskGroup.main:29 of
msgid ""
"extra keyword arguments are forwarded to the context constructor.  See "
":class:`Context` for more information."
msgstr ""

#: flask.cli.FlaskGroup.main:32 of
msgid ""
"Added the ``windows_expand_args`` parameter to allow disabling command "
"line arg expansion on Windows."
msgstr ""

#: flask.cli.FlaskGroup.main:36 of
msgid ""
"When taking arguments from ``sys.argv`` on Windows, glob patterns, user "
"dir, and env vars are expanded."
msgstr ""

#: flask.cli.FlaskGroup.main:40 of
msgid "Added the ``standalone_mode`` parameter."
msgstr ""

# c7174bfb3e574039ab96ab942bd8ae54
#: flask.cli.AppGroup:1 of
msgid ""
"This works similar to a regular click :class:`~click.Group` but it "
"changes the behavior of the :meth:`command` decorator so that it "
"automatically wraps the functions in :func:`with_appcontext`."
msgstr ""

# e7536cd06ca349038358588516b69b10
#: flask.cli.AppGroup:5 of
msgid "Not to be confused with :class:`FlaskGroup`."
msgstr ""

# 79657e57472a4672b1a08b68c74311d5
#: flask.cli.AppGroup.command:1 of
msgid ""
"This works exactly like the method of the same name on a regular "
":class:`click.Group` but it wraps callbacks in :func:`with_appcontext` "
"unless it's disabled by passing ``with_appcontext=False``."
msgstr ""

# 55ab2a7f36aa4443b38cf4b4030058a9
#: flask.cli.AppGroup.group:1 of
msgid ""
"This works exactly like the method of the same name on a regular "
":class:`click.Group` but it defaults the group class to "
":class:`AppGroup`."
msgstr ""

# 92647c3fdb3e4c0f996f86bf03b9ad31
#: flask.cli.ScriptInfo:1 of
msgid ""
"Helper object to deal with Flask applications.  This is usually not "
"necessary to interface with as it's used internally in the dispatching to"
" click.  In future versions of Flask this object will most likely play a "
"bigger role.  Typically it's created automatically by the "
":class:`FlaskGroup` but you can also manually create it and pass it "
"onwards as click object."
msgstr ""

# 92f184b7d7be41faaea95fbbbd4adba9
#: ../../docstring flask.cli.ScriptInfo.app_import_path:1 of
msgid "Optionally the import path for the Flask application."
msgstr ""

# 379a44a0f3ec4eeeb303d0f8a824cd6a
#: ../../docstring flask.cli.ScriptInfo.create_app:1 of
msgid ""
"Optionally a function that is passed the script info to create the "
"instance of the application."
msgstr ""

# 44c838df9833482db21ac6ae185c6735
#: ../../docstring flask.cli.ScriptInfo.data:1 of
msgid ""
"A dictionary with arbitrary data that can be associated with this script "
"info."
msgstr ""

# 3238f93781d042b8a557a4fcd054e65d
#: flask.cli.ScriptInfo.load_app:1 of
msgid ""
"Loads the Flask app (if not yet loaded) and returns it.  Calling this "
"multiple times will just result in the already loaded app to be returned."
msgstr ""

# 15c6505cd749479ca3434970bdfd6fd6
#: flask.cli.load_dotenv:1 of
msgid "Load \"dotenv\" files in order of precedence to set environment variables."
msgstr ""

# 5cee5718522c4fbb96e4f35035771876
#: flask.cli.load_dotenv:3 of
msgid ""
"If an env var is already set it is not overwritten, so earlier files in "
"the list are preferred over later files."
msgstr ""

# bcc8801eecdc46e7a778eb138ee754c2
#: flask.cli.load_dotenv:6 of
msgid "This is a no-op if `python-dotenv`_ is not installed."
msgstr ""

# 50e6ce2da32b4000946887bd815230ab
#: flask.cli.load_dotenv:10 of
msgid "Load the file at this location instead of searching."
msgstr ""

# 93c24211822042f0a129fa45f14500cc
#: flask.cli.load_dotenv:11 of
msgid "``True`` if a file was loaded."
msgstr ""

#: flask.cli.load_dotenv:17 of
msgid "When loading the env files, set the default encoding to UTF-8."
msgstr ""

# 31ee37fa368f46609fe6bc9dbd9a29e8
#: flask.cli.load_dotenv:13 of
msgid ""
"Returns ``False`` when python-dotenv is not installed, or when the given "
"path isn't a file."
msgstr ""

# 90e056a5d6d14fea91b82a092d91f360
#: flask.cli.with_appcontext:1 of
msgid ""
"Wraps a callback so that it's guaranteed to be executed with the script's"
" application context.  If callbacks are registered directly to the "
"``app.cli`` object then they are wrapped with this function by default "
"unless it's disabled."
msgstr ""

# a1906d448fc6465089169caa2c3919bc
#: ../../flask/docs/api.rst:770
msgid ""
"Marks a function so that an instance of :class:`ScriptInfo` is passed as "
"first argument to the click callback."
msgstr ""

# 66315324537c44d1a36bd0a8064ebc76
#: ../../docstring flask.cli.run_command:1 of
msgid "Run a local development server."
msgstr ""

# ae29cf219f854f41a9a5dba55858742e
#: ../../docstring flask.cli.run_command:3 of
msgid ""
"This server is for development purposes only. It does not provide the "
"stability, security, or performance of production WSGI servers."
msgstr ""

# 0c8ebcc5e3204d2c9f2d7c9bec5e6112
#: ../../docstring flask.cli.run_command:6 of
msgid ""
"The reloader and debugger are enabled by default if FLASK_ENV=development"
" or FLASK_DEBUG=1."
msgstr ""

#: ../../docstring flask.cli.shell_command:1 of
msgid ""
"Run an interactive Python shell in the context of a given Flask "
"application.  The application will populate the default namespace of this"
" shell according to its configuration."
msgstr ""

# 86200e9e669e40f08e0c831b5c270c83
#: ../../docstring flask.cli.shell_command:5 of
msgid ""
"This is useful for executing small snippets of management code without "
"having to manually configure the application."
msgstr ""

# 1e0094027de34599a98c0eb1bbb0ee0f
#~ msgid ""
#~ "True if the request was triggered "
#~ "via a JavaScript XMLHttpRequest. This "
#~ "only works with libraries that support"
#~ " the ``X-Requested-With`` header and "
#~ "set it to \"XMLHttpRequest\".  Libraries "
#~ "that do that are prototype, jQuery "
#~ "and Mochikit and probably some more."
#~ msgstr ""

# 44bf94b8873f4ebf8c346df653a6414e
#~ msgid ""
#~ "``X-Requested-With`` is not standard and"
#~ " is unreliable. You may be able "
#~ "to use :attr:`AcceptMixin.accept_mimetypes` instead."
#~ msgstr ""

# 5ea5ca93a8a04eebb77823aed2bf7899
#~ msgid ""
#~ "Raises an :py:exc:`HTTPException` for the "
#~ "given status code or WSGI application::"
#~ msgstr ""

# cd0229296d2c4d6eac4bbdaa692e5844
#~ msgid ""
#~ "Can be passed a WSGI application "
#~ "or a status code.  If a status "
#~ "code is given it's looked up in"
#~ " the list of exceptions and will "
#~ "raise that exception, if passed a "
#~ "WSGI application it will wrap it "
#~ "in a proxy WSGI exception and "
#~ "raise that::"
#~ msgstr ""

# 8d3776d6a25f4ba0bbadf3e35eba2219
#~ msgid ""
#~ "the folder with static files that "
#~ "should be served at `static_url_path`.  "
#~ "Defaults to the ``'static'`` folder in"
#~ " the root path of the application."
#~ msgstr ""

# a5628fb46ba249d3925155f25b285410
#~ msgid ""
#~ "Flask by default will automatically "
#~ "calculate the path to the root of"
#~ " the application.  In certain situations"
#~ " this cannot be achieved (for "
#~ "instance if the package is a "
#~ "Python 3 namespace package) and needs"
#~ " to be manually defined."
#~ msgstr ""

# 882e9d7d163a41d1a813d580d5e63ed6
#~ msgid ""
#~ "Connects a URL rule.  Works exactly "
#~ "like the :meth:`route` decorator.  If a"
#~ " view_func is provided it will be "
#~ "registered with the endpoint."
#~ msgstr ""

# bb26ab3a6ca149db9b4b3cf126181c0d
#~ msgid "Basically this example::"
#~ msgstr ""

# 16fae30d6dd342fd9bcdbd5e7c1d08c4
#~ msgid "Is equivalent to the following::"
#~ msgstr ""

# 2183b7bc84d345c8b10a2cf57fd9040b
#~ msgid ""
#~ "If the view_func is not provided "
#~ "you will need to connect the "
#~ "endpoint to a view function like "
#~ "so::"
#~ msgstr ""

# 313873dbbc0e42cb91d32b35aa69ea16
#~ msgid ""
#~ "Internally :meth:`route` invokes "
#~ ":meth:`add_url_rule` so if you want to"
#~ " customize the behavior via subclassing "
#~ "you only need to change this "
#~ "method."
#~ msgstr ""

# 8df7b40dd876431b9399158ce89a657c
# 859c35f502b24be59b1ab3872dbb18e5
#~ msgid "For more information refer to :ref:`url-route-registrations`."
#~ msgstr ""

# 9e7e119db34f4d9287f86c04b166b774
#~ msgid "``OPTIONS`` is added automatically as method."
#~ msgstr ""

# 415c0d51c93d4332b8b80d65d72f5827
#~ msgid "`view_func` parameter added."
#~ msgstr ""

# 60ee1417511f476a910c263c1a1a59e2
# e3cef10ae6f9492e91f18f7c6cdd1e89
#~ msgid ""
#~ "the endpoint for the registered URL "
#~ "rule.  Flask itself assumes the name "
#~ "of the view function as endpoint"
#~ msgstr ""

# b8faf8848e154e7cac6ec8247d008b54
#~ msgid "the function to call when serving a request to the provided endpoint"
#~ msgstr ""

# b905e94980e646d987b764ac1fb97825
#~ msgid ""
#~ "controls whether the ``OPTIONS`` method "
#~ "should be added automatically. This can"
#~ " also be controlled by setting the"
#~ " ``view_func.provide_automatic_options = False`` "
#~ "before adding the rule."
#~ msgstr ""

# 7efaa57fb3a14f638d0e5678363a2f8f
# c3ef3f031e704f33989a272cf3490053
#~ msgid ""
#~ "the options to be forwarded to the"
#~ " underlying :class:`~werkzeug.routing.Rule` object."
#~ "  A change to Werkzeug is handling"
#~ " of method options.  methods is a "
#~ "list of methods this rule should "
#~ "be limited to (``GET``, ``POST`` etc.)."
#~ "  By default a rule just listens "
#~ "for ``GET`` (and implicitly ``HEAD``). "
#~ "Starting with Flask 0.6, ``OPTIONS`` is"
#~ " implicitly added and handled by the"
#~ " standard request handling."
#~ msgstr ""

# 7032046d1a074f199108b1b253d1d802
#~ msgid "Register a function to be run after each request."
#~ msgstr ""

# 9b2a29c9e0694813ba512746d614fa36
#~ msgid ""
#~ "Your function must take one parameter,"
#~ " an instance of :attr:`response_class` and"
#~ " return a new response object or "
#~ "the same (see :meth:`process_response`)."
#~ msgstr ""

# ca4201b72fb847a3a447416b2d7a135c
#~ msgid ""
#~ "As of Flask 0.7 this function "
#~ "might not be executed at the end"
#~ " of the request in case an "
#~ "unhandled exception occurred."
#~ msgstr ""

# e82a0029654144cbbd9fd6b30267c14b
#~ msgid ""
#~ "A dictionary with lists of functions "
#~ "that should be called after each "
#~ "request.  The key of the dictionary "
#~ "is the name of the blueprint this"
#~ " function is active for, ``None`` for"
#~ " all requests.  This can for example"
#~ " be used to close database "
#~ "connections. To register a function "
#~ "here, use the :meth:`after_request` decorator."
#~ msgstr ""

# 5d799fb1c4dc4759b25cf5012ce7fd84
#~ msgid "Registers a function to run before each request."
#~ msgstr ""

# 46ac56660a7e4d299060825ca09fde87
#~ msgid ""
#~ "The function will be called without "
#~ "any arguments. If it returns a "
#~ "non-None value, the value is handled"
#~ " as if it was the return value"
#~ " from the view, and further request"
#~ " handling is stopped."
#~ msgstr ""

# 70ef653d13f54b07bc9d3f7903cd7806
#~ msgid ""
#~ "A dictionary with lists of functions "
#~ "that will be called at the "
#~ "beginning of each request. The key "
#~ "of the dictionary is the name of"
#~ " the blueprint this function is "
#~ "active for, or ``None`` for all "
#~ "requests. To register a function, use"
#~ " the :meth:`before_request` decorator."
#~ msgstr ""

# 31e92da0bbdc4e69966946837e41de81
#~ msgid ""
#~ "all the attached blueprints in a "
#~ "dictionary by name.  Blueprints can be"
#~ " attached multiple times so this "
#~ "dictionary does not tell you how "
#~ "often they got attached."
#~ msgstr ""

# b17f2ecd0d5b4028bc2725b6597221e8
#~ msgid "A decorator to register a function as an endpoint. Example::"
#~ msgstr ""

# e0e189d3e83c487ca457b920cef5e885
#~ msgid "the name of the endpoint"
#~ msgstr ""

# cd54e9ec3fd846e7889295717a1a7aea
#~ msgid ""
#~ "A dictionary of all registered error "
#~ "handlers.  The key is ``None`` for "
#~ "error handlers active on the "
#~ "application, otherwise the key is the"
#~ " name of the blueprint.  Each key "
#~ "points to another dictionary where the"
#~ " key is the status code of the"
#~ " http exception.  The special key "
#~ "``None`` points to a list of "
#~ "tuples where the first item is the"
#~ " class for the instance check and "
#~ "the second the error handler function."
#~ msgstr ""

# 5d4e906b00b446f3804754384abcce5e
#~ msgid ""
#~ "a place where extensions can store "
#~ "application specific state.  For example "
#~ "this is where an extension could "
#~ "store database engines and similar "
#~ "things.  For backwards compatibility "
#~ "extensions should register themselves like "
#~ "this::"
#~ msgstr ""

# db39797cf2f441c6a412b318246454d8
# c166840a418e475db5250802bbd54c26
#~ msgid "Provides default cache_timeout for the :func:`send_file` functions."
#~ msgstr ""

# 6c45017828b44ab6b3c8ca836e40a2db
# d859c7afe789470ead143cc4e65272a0
#~ msgid ""
#~ "By default, this function returns "
#~ "``SEND_FILE_MAX_AGE_DEFAULT`` from the configuration"
#~ " of :data:`~flask.current_app`."
#~ msgstr ""

# b8e1e738cfcc4885962727b9fcb3d559
# 756d08a716264268bdff6c15643b5b8c
#~ msgid ""
#~ "Static file functions such as "
#~ ":func:`send_from_directory` use this function, "
#~ "and :func:`send_file` calls this function "
#~ "on :data:`~flask.current_app` when the given"
#~ " cache_timeout is ``None``. If a "
#~ "cache_timeout is given in :func:`send_file`,"
#~ " that timeout is used; otherwise, "
#~ "this method is called."
#~ msgstr ""

# 6716b4683c8141068bf1d2a9b4685925
# c7323de71ff44c03be2a372a0de3cb01
#~ msgid ""
#~ "This allows subclasses to change the "
#~ "behavior when sending files based on "
#~ "the filename.  For example, to set "
#~ "the cache timeout for .js files to"
#~ " 60 seconds::"
#~ msgstr ""

# 9192a28d969246d0ab18845acc45e0fa
#~ msgid ""
#~ "Prior to Werkzeug 1.0.0, "
#~ "``InternalServerError`` will not always have"
#~ " an ``original_exception`` attribute. Use "
#~ "``getattr(e, \"original_exception\", None)`` to "
#~ "simulate the behavior for compatibility."
#~ msgstr ""

# 248911b89b0246a380e11b6aee22a32f
# 8cd9a2c93b8d47da8283c073830a5707
#~ msgid ""
#~ "This is ``True`` if the package "
#~ "bound object's container has a folder"
#~ " for static files."
#~ msgstr ""

# 581a18e172c2470aa0c780a14ae90236
# 8441ec02697444de950611b3a6bab1ed
#~ msgid ""
#~ "The name of the package or module"
#~ " that this app belongs to. Do "
#~ "not change this once it is set "
#~ "by the constructor."
#~ msgstr ""

# 3c3da0a82b7c49f5b108c1d11bf19c28
# f4ec10387f40493e9344689b7b6d4434
#~ msgid "The Jinja loader for this package bound object."
#~ msgstr ""

# d60d78d33bba4e7fbecd9b5bcbf71b23
#~ msgid ""
#~ "Creates a new instance of a "
#~ "missing session.  Instead of overriding "
#~ "this method we recommend replacing the"
#~ " :class:`session_interface`."
#~ msgstr ""

# e6cb8fdb4e7f4c84ad2ffcf98047934c
#~ msgid ""
#~ "the return value from the view "
#~ "function. The view function must return"
#~ " a response. Returning ``None``, or "
#~ "the view ending without returning, is"
#~ " not allowed. The following types are"
#~ " allowed for ``view_rv``:  ``str`` "
#~ "(``unicode`` in Python 2)     A response"
#~ " object is created with the string"
#~ " encoded to UTF-8     as the body."
#~ "  ``bytes`` (``str`` in Python 2)     "
#~ "A response object is created with "
#~ "the bytes as the body.  ``dict``     "
#~ "A dictionary that will be jsonify'd "
#~ "before being returned.  ``tuple``     Either"
#~ " ``(body, status, headers)``, ``(body, "
#~ "status)``, or     ``(body, headers)``, where"
#~ " ``body`` is any of the other "
#~ "types     allowed here, ``status`` is a"
#~ " string or an integer, and     "
#~ "``headers`` is a dictionary or a "
#~ "list of ``(key, value)``     tuples. If"
#~ " ``body`` is a :attr:`response_class` "
#~ "instance,     ``status`` overwrites the "
#~ "exiting value and ``headers`` are     "
#~ "extended.  :attr:`response_class`     The object "
#~ "is returned unchanged.  other "
#~ ":class:`~werkzeug.wrappers.Response` class     The "
#~ "object is coerced to :attr:`response_class`."
#~ "  :func:`callable`     The function is "
#~ "called as a WSGI application. The "
#~ "result is     used to create a "
#~ "response object."
#~ msgstr ""

# 3563843aee404e0a8a026049e831e29d
#~ msgid "``str`` (``unicode`` in Python 2)"
#~ msgstr ""

# ea85ab25821044a899ea0b42551d3103
#~ msgid "``bytes`` (``str`` in Python 2)"
#~ msgstr ""

# 52bfb11f5659444ea73ebbd809a37b64
# 3a5dd0dacc8043a088fd6bb5d0330372
#~ msgid ""
#~ "Opens a resource from the application's"
#~ " resource folder.  To see how this"
#~ " works, consider the following folder "
#~ "structure::"
#~ msgstr ""

# 71670141f4084c49a4cc5fc28328e457
# 31cadf7e6ec549829f61b98d5b9da976
#~ msgid ""
#~ "If you want to open the "
#~ ":file:`schema.sql` file you would do the"
#~ " following::"
#~ msgstr ""

# 6e462c5e2a4543c698f8387847817f6a
# 61474484e63d49e0b07910976b691c36
#~ msgid ""
#~ "Open file in this mode. Only "
#~ "reading is supported, valid values are"
#~ " \"r\" (or \"rt\") and \"rb\"."
#~ msgstr ""

# c4c2308a649a4ddc86d285023fc9d7f0
#~ msgid ""
#~ "Creates or opens a new session.  "
#~ "Default implementation stores all session "
#~ "data in a signed cookie.  This "
#~ "requires that the :attr:`secret_key` is "
#~ "set.  Instead of overriding this method"
#~ " we recommend replacing the "
#~ ":class:`session_interface`."
#~ msgstr ""

# 3ea150398ab242bd9bc0ceb1497768c2
#~ msgid "an instance of :attr:`request_class`."
#~ msgstr ""

# 44e6d014a28c44cb86cc1e5149b4212b
#~ msgid ""
#~ "A decorator that is used to "
#~ "register a view function for a "
#~ "given URL rule.  This does the "
#~ "same thing as :meth:`add_url_rule` but "
#~ "is intended for decorator usage::"
#~ msgstr ""

# 89ae8d2bf4fb43478556b795210395ec
#~ msgid ""
#~ "Do not use ``run()`` in a "
#~ "production setting. It is not intended"
#~ " to meet security and performance "
#~ "requirements for a production server. "
#~ "Instead, see :ref:`deployment` for WSGI "
#~ "server recommendations."
#~ msgstr ""

# 0b9a5456f5d14f32844b5108858c27e3
#~ msgid ""
#~ "Saves the session if it needs "
#~ "updates.  For the default implementation, "
#~ "check :meth:`open_session`.  Instead of "
#~ "overriding this method we recommend "
#~ "replacing the :class:`session_interface`."
#~ msgstr ""

# be046b81d9834897895a5db6fd1cdb11
#~ msgid ""
#~ "the session to be saved (a "
#~ ":class:`~werkzeug.contrib.securecookie.SecureCookie` object)"
#~ msgstr ""

# 245f12b5545a45b08181bbe2aab6a8d0
#~ msgid "an instance of :attr:`response_class`"
#~ msgstr ""

# 1a751bbd009b43e4bf25ce921f8f97b3
#~ msgid ""
#~ "A :class:`~datetime.timedelta` which is used"
#~ " as default cache_timeout for the "
#~ ":func:`send_file` functions. The default is"
#~ " 12 hours."
#~ msgstr ""

# 2cc2401e0cbd4b128fc749c0460803b5
#~ msgid ""
#~ "This attribute can also be configured"
#~ " from the config with the "
#~ "``SEND_FILE_MAX_AGE_DEFAULT`` configuration key. "
#~ "This configuration variable can also be"
#~ " set with an integer value used "
#~ "as seconds. Defaults to "
#~ "``timedelta(hours=12)``"
#~ msgstr ""

# 33d958c7f0254ed1a1ae897ad6bb9da2
# cd4487865caa4875bb75ad0ac4e025fe
#~ msgid ""
#~ "Function used internally to send static"
#~ " files from the static folder to "
#~ "the browser."
#~ msgstr ""

# 18c0163cb1f54460b4ee02ec4115a5e4
# 789534b568564ef79433304498c8aafe
#~ msgid "The absolute path to the configured static folder."
#~ msgstr ""

# 3ff37043bf71446f8237716583191c30
#~ msgid ""
#~ "Generally teardown functions must take "
#~ "every necessary step to avoid that "
#~ "they will fail.  If they do "
#~ "execute code that might fail they "
#~ "will have to surround the execution "
#~ "of these code by try/except statements"
#~ " and log occurring errors."
#~ msgstr ""

# 11a1e91f31c7416789e4ce41d92d244f
#~ msgid ""
#~ "A dictionary with lists of functions "
#~ "that are called after each request, "
#~ "even if an exception has occurred. "
#~ "The key of the dictionary is the"
#~ " name of the blueprint this function"
#~ " is active for, ``None`` for all "
#~ "requests. These functions are not "
#~ "allowed to modify the request, and "
#~ "their return values are ignored. If "
#~ "an exception occurred while processing "
#~ "the request, it gets passed to "
#~ "each teardown_request function. To register"
#~ " a function here, use the "
#~ ":meth:`teardown_request` decorator."
#~ msgstr ""

# cb9c8799f4774634a73982ca0f57e33e
#~ msgid ""
#~ "A dictionary with list of functions "
#~ "that are called without argument to "
#~ "populate the template context.  The key"
#~ " of the dictionary is the name "
#~ "of the blueprint this function is "
#~ "active for, ``None`` for all requests."
#~ "  Each returns a dictionary that the"
#~ " template context is updated with.  "
#~ "To register a function here, use "
#~ "the :meth:`context_processor` decorator."
#~ msgstr ""

# 873159caa05b40a4af146ae87149a025
# 2390b0aad62843b5a776fad9fbe4563d
#~ msgid ""
#~ "Location of the template files to "
#~ "be added to the template lookup. "
#~ "``None`` if templates should not be "
#~ "added."
#~ msgstr ""

# 57112ba71c9c4b6e9131a02ebdc67fad
#~ msgid ""
#~ "Creates a test client for this "
#~ "application.  For information about unit "
#~ "testing head over to :ref:`testing`."
#~ msgstr ""

# 2195f4d6dcd04d0d81209236f88caa65
#~ msgid ""
#~ "A dictionary with lists of functions "
#~ "that can be used as URL value "
#~ "preprocessors.  The key ``None`` here is"
#~ " used for application wide callbacks, "
#~ "otherwise the key is the name of"
#~ " the blueprint. Each of these "
#~ "functions has the chance to modify "
#~ "the dictionary of URL values before "
#~ "they are used as the keyword "
#~ "arguments of the view function.  For "
#~ "each function registered this one should"
#~ " also provide a :meth:`url_defaults` "
#~ "function that adds the parameters "
#~ "automatically again that were removed "
#~ "that way."
#~ msgstr ""

# dff8855930984a629d2a037e2845209d
#~ msgid ""
#~ "A dictionary with lists of functions "
#~ "that are called before the "
#~ ":attr:`before_request_funcs` functions. The key "
#~ "of the dictionary is the name of"
#~ " the blueprint this function is "
#~ "active for, or ``None`` for all "
#~ "requests. To register a function, use"
#~ " :meth:`url_value_preprocessor`."
#~ msgstr ""

# 4a6d5698a7814d3f9594d55581dc679d
#~ msgid ""
#~ "A dictionary of all view functions "
#~ "registered.  The keys will be function"
#~ " names which are also used to "
#~ "generate URLs and the values are "
#~ "the function objects themselves. To "
#~ "register a view function, use the "
#~ ":meth:`route` decorator."
#~ msgstr ""

# 2efee0e17fca4f2ea899524d4e24a57b
#~ msgid "See :ref:`blueprints` for more information."
#~ msgstr ""

# a7a7a02859214a2ab066ad941c4fd0fe
#~ msgid ""
#~ "By default, the blueprint will "
#~ "automatically this based on ``import_name``."
#~ " In certain situations this automatic "
#~ "detection can fail, so the path "
#~ "can be specified manually instead."
#~ msgstr ""

# e781f4bd8ba34b639c02e5c8e70d8a00
#~ msgid ""
#~ "Like :meth:`Flask.after_request` but for a "
#~ "blueprint.  This function is only "
#~ "executed after each request that is "
#~ "handled by a function of that "
#~ "blueprint."
#~ msgstr ""

# 7c65edc409ba4e909d629a553ab49c24
#~ msgid ""
#~ "Like :meth:`Flask.before_request` but for a"
#~ " blueprint.  This function is only "
#~ "executed before each request that is "
#~ "handled by a function of that "
#~ "blueprint."
#~ msgstr ""

# f74d31638de4467d87d52f712070f9ea
#~ msgid ""
#~ "Like :meth:`Flask.context_processor` but for a"
#~ " blueprint.  This function is only "
#~ "executed for requests handled by a "
#~ "blueprint."
#~ msgstr ""

# dd61f342a75e4e57ba35b1aa8a3e46c4
#~ msgid ""
#~ "Like :meth:`Flask.endpoint` but for a "
#~ "blueprint.  This does not prefix the "
#~ "endpoint with the blueprint name, this"
#~ " has to be done explicitly by "
#~ "the user of this method.  If the"
#~ " endpoint is prefixed with a `.` "
#~ "it will be registered to the "
#~ "current blueprint, otherwise it's an "
#~ "application independent endpoint."
#~ msgstr ""

# c63eb7870a2942ecae85f5a3f22bd66e
#~ msgid ""
#~ "Registers an error handler that becomes"
#~ " active for this blueprint only.  "
#~ "Please be aware that routing does "
#~ "not happen local to a blueprint so"
#~ " an error handler for 404 usually "
#~ "is not handled by a blueprint "
#~ "unless it is caused inside a view"
#~ " function.  Another special case is "
#~ "the 500 internal server error which "
#~ "is always looked up from the "
#~ "application."
#~ msgstr ""

# 6d64961464bb4983ac807976685ecd3f
#~ msgid ""
#~ "Otherwise works as the "
#~ ":meth:`~flask.Flask.errorhandler` decorator of the"
#~ " :class:`~flask.Flask` object."
#~ msgstr ""

# e80ec725e9bb429287be8153db47493d
#~ msgid ""
#~ "Blueprint local JSON decoder class to"
#~ " use. Set to ``None`` to use "
#~ "the app's :class:`~flask.app.Flask.json_decoder`."
#~ msgstr ""

# 648632fea2454ff0a9c1d6d1f18b9fe6
#~ msgid ""
#~ "Blueprint local JSON decoder class to"
#~ " use. Set to ``None`` to use "
#~ "the app's :class:`~flask.app.Flask.json_encoder`."
#~ msgstr ""

# 19d45517d04940a6bb36578d65755ac9
#~ msgid ""
#~ "Whether this is the first time "
#~ "this blueprint has been registered on"
#~ " the application."
#~ msgstr ""

# 38b8d6319941489e8a848fe1519c051e
#~ msgid ""
#~ "Non-decorator version of the "
#~ ":meth:`errorhandler` error attach function, "
#~ "akin to the "
#~ ":meth:`~flask.Flask.register_error_handler` application-"
#~ "wide function of the :class:`~flask.Flask` "
#~ "object but for error handlers limited"
#~ " to this blueprint."
#~ msgstr ""

# dfa623b87bbc47ebb9fd350d6193390a
#~ msgid ""
#~ "Like :meth:`Flask.route` but for a "
#~ "blueprint.  The endpoint for the "
#~ ":func:`url_for` function is prefixed with "
#~ "the name of the blueprint."
#~ msgstr ""

# db456dadd2c84a96a3c9ad17ecc00871
#~ msgid ""
#~ "Like :meth:`Flask.teardown_request` but for a"
#~ " blueprint.  This function is only "
#~ "executed when tearing down requests "
#~ "handled by a function of that "
#~ "blueprint.  Teardown request functions are "
#~ "executed when the request context is "
#~ "popped, even when no actual request "
#~ "was performed."
#~ msgstr ""

# c9edf4556ef54606b1e89ddf99f7817e
#~ msgid ""
#~ "Callback function for URL defaults for"
#~ " this blueprint.  It's called with "
#~ "the endpoint and values and should "
#~ "update the values passed in place."
#~ msgstr ""

# 22050b64b58948a297a414cee41ffecf
#~ msgid ""
#~ "Registers a function as URL value "
#~ "preprocessor for this blueprint.  It's "
#~ "called before the view functions are "
#~ "called and can modify the url "
#~ "values provided."
#~ msgstr ""

# 760836574fff46618707e0a47fa5a460
#~ msgid "The underlying WSGI environment."
#~ msgstr ""

# cd6d7de6e5a9474a8d891ddf00b94aab
#~ msgid ""
#~ "Provides different ways to look at "
#~ "the current :rfc:`3987`. Imagine your "
#~ "application is listening on the "
#~ "following application root::"
#~ msgstr ""

# e1cfd987f95f418486738846b9ebd91b
#~ msgid "And a user requests the following URI::"
#~ msgstr ""

# 329e3d11bab64cf2ae14a23dab99c888
#~ msgid ""
#~ "In this case the values of the "
#~ "above mentioned attributes would be the"
#~ " following:"
#~ msgstr ""

# 294d505b19ac4707b0a323fa34721374
#~ msgid "``u'/π/page.html'``"
#~ msgstr ""

# e592dcede0f347e0ad8fe4c6808e140f
#~ msgid "`full_path`"
#~ msgstr ""

# 3edb92546d35491c961248566afcb797
#~ msgid "``u'/π/page.html?x=y'``"
#~ msgstr ""

# 10c0e353c7dc4606807e787c35a544cd
#~ msgid "`script_root`"
#~ msgstr ""

# 51b9726e84014fe0b1cbdba2e52c77bd
#~ msgid "``u'/myapplication'``"
#~ msgstr ""

# 131f9d5add3f406c80856755305d8086
#~ msgid "`base_url`"
#~ msgstr ""

# 4fc5c9d5dc314de39db08fc5a21569c9
#~ msgid "``u'http://www.example.com/myapplication/π/page.html'``"
#~ msgstr ""

# 271a7dc850304ed78b9743eb45132ab8
#~ msgid "`url`"
#~ msgstr ""

# 40c15dab5515435684a71df7829b9b6d
#~ msgid "``u'http://www.example.com/myapplication/π/page.html?x=y'``"
#~ msgstr ""

# 1f46fc3723c8442b99b3736016f94912
#~ msgid "`url_root`"
#~ msgstr ""

# c36ad3c313c942c3afe5b8d60134a711
#~ msgid "``u'http://www.example.com/myapplication/'``"
#~ msgstr ""

# 10c99752d2b04a2da33deae4d08736de
#~ msgid ""
#~ "Like :attr:`url` but without the "
#~ "querystring See also: :attr:`trusted_hosts`."
#~ msgstr ""

# 4fa06cad9a9341768d9c10bc91cfb1fc
#~ msgid "The name of the current blueprint"
#~ msgstr ""

# 62349e9f615143f69787bf795eb0e299
#~ msgid ""
#~ "The endpoint that matched the request."
#~ "  This in combination with "
#~ ":attr:`view_args` can be used to "
#~ "reconstruct the same or a modified "
#~ "URL.  If an exception happened when "
#~ "matching, this will be ``None``."
#~ msgstr ""

# cd364ca39a7c438cb933cd51ec7c872e
#~ msgid "Requested path as unicode, including the query string."
#~ msgstr ""

# 4ccc50907e6a465788b1ec902705953c
#~ msgid ""
#~ "This reads the buffered incoming data"
#~ " from the client into one bytestring."
#~ "  By default this is cached but "
#~ "that behavior can be changed by "
#~ "setting `cache` to `False`."
#~ msgstr ""

# 3ee7b29ce15b46c3a49e6aa1e9f0e2f8
#~ msgid ""
#~ "If `as_text` is set to `True` the"
#~ " return value will be a decoded "
#~ "unicode string."
#~ msgstr ""

# 06070a403f7d4c40bea37eadd381e4fd
#~ msgid ""
#~ "The headers from the WSGI environ "
#~ "as immutable "
#~ ":class:`~werkzeug.datastructures.EnvironHeaders`."
#~ msgstr ""

# 739d2ce33323400bae8a509b03f3abd8
#~ msgid ""
#~ "Just the host including the port "
#~ "if available. See also: :attr:`trusted_hosts`."
#~ msgstr ""

# c3c9b528c7804bc8a29fefe097786a94
#~ msgid "Just the host with scheme as IRI. See also: :attr:`trusted_hosts`."
#~ msgstr ""

# 1d544884fe55412a969e5971bbce11c0
#~ msgid "The parsed `If-Modified-Since` header as datetime object."
#~ msgstr ""

# cc22ef7149cd44d4a3803506cdab9e5b
#~ msgid "The parsed `If-Range` header."
#~ msgstr ""

# c4e4efbdeaa54452a82d75e81d879ba8
#~ msgid ":class:`~werkzeug.datastructures.IfRange`"
#~ msgstr ""

# 7f831dc403fa44b5891609c4cd080550
#~ msgid "The parsed `If-Unmodified-Since` header as datetime object."
#~ msgstr ""

# ba06e561fe25411a8fa04ae8225f0f99
#~ msgid "`True` if the request is secure."
#~ msgstr ""

# b4060af228b245e7bd758bc448626037
#~ msgid "The request method. (For example ``'GET'`` or ``'POST'``)."
#~ msgstr ""

# 0a6cd479843448eaae0daa96e61378a9
#~ msgid ""
#~ "Requested path as unicode.  This works"
#~ " a bit like the regular path "
#~ "info in the WSGI environment but "
#~ "will always include a leading slash, "
#~ "even if the URL root is accessed."
#~ msgstr ""

# 5523afff0e7342dc90384c55eab2d848
#~ msgid "The URL parameters as raw bytestring."
#~ msgstr ""

# 6a0f9f6857ff4c09a16cf2cb585a63c7
#~ msgid "The remote address of the client."
#~ msgstr ""

# 75f9d67cb1f5434489d441e4d0d0800c
#~ msgid "URL scheme (http or https)."
#~ msgstr ""

# f6d13c0955894696886248ac8e57e3b7
#~ msgid "The root path of the script without the trailing slash."
#~ msgstr ""

# 490e053e75df4d398a0c2fb6d9eedb6b
#~ msgid "The reconstructed current URL as IRI. See also: :attr:`trusted_hosts`."
#~ msgstr ""

# a8dc6d82f93844bf8e386485779643c6
#~ msgid ""
#~ "The charset that is assumed for "
#~ "URLs.  Defaults to the value of "
#~ ":attr:`charset`."
#~ msgstr ""

# 6e4010aed26a4f578da1de56fbfc5c78
#~ msgid ""
#~ "The full URL root (with hostname), "
#~ "this is the application root as "
#~ "IRI. See also: :attr:`trusted_hosts`."
#~ msgstr ""

# 80790d7642304eb5afc2d758d059d2d6
#~ msgid "The current user agent."
#~ msgstr ""

# 31b6517c62a0445a8fa6a521a1c95a11
#~ msgid ""
#~ "Returns True if the request method "
#~ "carries content.  As of Werkzeug 0.9 "
#~ "this will be the case if a "
#~ "content type is transmitted."
#~ msgstr ""

# fd20f04d89c7446b9bdde75564294882
#~ msgid ""
#~ "The request object is an instance "
#~ "of a :class:`~werkzeug.wrappers.Request` subclass"
#~ " and provides all of the attributes"
#~ " Werkzeug defines.  This just shows a"
#~ " quick overview of the most important"
#~ " ones."
#~ msgstr ""

# adcd93014aad4785a59fee4fdd6ad295
#~ msgid ""
#~ "A :class:`~werkzeug.datastructures.Headers` object "
#~ "representing the response headers."
#~ msgstr ""

# a86c307af3734494bfe0756989fd62b2
#~ msgid "A string with a response status."
#~ msgstr ""

# 10a9e82f753d423daaaab5610d5cc165
#~ msgid "The response status as integer."
#~ msgstr ""

# 1d962e3e38de4d7bb3759ba6318141b6
#~ msgid ""
#~ "See :attr:`~werkzeug.wrappers.BaseResponse.max_cookie_size` "
#~ "in Werkzeug's docs."
#~ msgstr ""

# 6f76d372a2bc46489a5f3c57a15301df
#~ msgid ""
#~ "Sets a cookie. The parameters are "
#~ "the same as in the cookie `Morsel`"
#~ " object in the Python standard "
#~ "library but it accepts unicode data, "
#~ "too."
#~ msgstr ""

# b41079320db74b9090a7670494b13358
#~ msgid "If `True`, the cookie will only be available via HTTPS"
#~ msgstr ""

# 59e2c518796d4e269238fbcf5915dfff
#~ msgid ""
#~ "disallow JavaScript to access the "
#~ "cookie.  This is an extension to "
#~ "the cookie standard and probably not "
#~ "supported by all browsers."
#~ msgstr ""

# 01efce801ae54b53bfe027af21180ed9
#~ msgid ""
#~ "Limits the scope of the cookie "
#~ "such that it will only be attached"
#~ " to requests if those requests are"
#~ " \"same-site\"."
#~ msgstr ""

# 7d58031609184652ae989f010c477ae1
#~ msgid "Basic usage is outlined in the :ref:`testing` chapter."
#~ msgstr ""

# e609563948bc493ba2003ec093c47e60
#~ msgid ""
#~ "Takes the same arguments as the "
#~ ":class:`EnvironBuilder` class with some "
#~ "additions:  You can provide a "
#~ ":class:`EnvironBuilder` or a WSGI environment"
#~ " as only argument instead of the "
#~ ":class:`EnvironBuilder` arguments and two "
#~ "optional keyword arguments (`as_tuple`, "
#~ "`buffered`) that change the type of "
#~ "the return value or the way the"
#~ " application is executed."
#~ msgstr ""

# 7442488f20e84f6c9788be31b37354f4
#~ msgid ""
#~ "If a dict is provided as file "
#~ "in the dict for the `data` "
#~ "parameter the content type has to "
#~ "be called `content_type` now instead of"
#~ " `mimetype`.  This change was made "
#~ "for consistency with :class:`werkzeug.FileWrapper`."
#~ msgstr ""

# 1593ef8968fc4e9fa76fdeda9faee889
#~ msgid "The `follow_redirects` parameter was added to :func:`open`."
#~ msgstr ""

# 6bd8ad034d4043d0b5e49bdc711a591a
#~ msgid "Additional parameters:"
#~ msgstr ""

# c131fe67a8cc43c6a9cc49e9597f1795
#~ msgid "Returns a tuple in the form ``(environ, result)``"
#~ msgstr ""

# fd28c6ef42b64b5a85579677a2ac6d95
#~ msgid ""
#~ "Set this to True to buffer the "
#~ "application run. This will automatically "
#~ "close the application for you as "
#~ "well."
#~ msgstr ""

# afee82f6f485411e98bc1c797a59ec4b
#~ msgid "Set this to True if the `Client` should follow HTTP redirects."
#~ msgstr ""

# 286c093891c64c92a397007715a92f0e
#~ msgid ""
#~ "Value to return if the attribute "
#~ "is not present, instead of raise a"
#~ " ``KeyError``."
#~ msgstr ""

# 5f22304ef06243d7b1e40c597c7f1774
#~ msgid "param"
#~ msgstr ""

# c63eb1973a4648eba6a1481fd6cb95c0
#~ msgid "default: Value to set and return if the attribute is not present."
#~ msgstr ""

# 0b03ae5376974293891415a5063106d6
#~ msgid ""
#~ "For more information, head over to "
#~ "the :ref:`Quickstart <url-building>`."
#~ msgstr ""

# a2a8cd1b9b0d4d7aa135bfa12fce2a54
#~ msgid ""
#~ "a string specifying the desired URL "
#~ "scheme. The `_external` parameter must "
#~ "be set to ``True`` or a "
#~ ":exc:`ValueError` is raised. The default "
#~ "behavior uses the same scheme as "
#~ "the current request, or "
#~ "``PREFERRED_URL_SCHEME`` from the :ref:`app "
#~ "configuration <config>` if no request "
#~ "context is available. As of Werkzeug "
#~ "0.10, this also can be set to "
#~ "an empty string to build protocol-"
#~ "relative URLs."
#~ msgstr ""

# 514e237f892343ff87702da35fe50769
#~ msgid ""
#~ "Sends the contents of a file to"
#~ " the client.  This will use the "
#~ "most efficient method available and "
#~ "configured.  By default it will try "
#~ "to use the WSGI server's file_wrapper"
#~ " support.  Alternatively you can set "
#~ "the application's :attr:`~Flask.use_x_sendfile` "
#~ "attribute to ``True`` to directly emit"
#~ " an ``X-Sendfile`` header.  This however"
#~ " requires support of the underlying "
#~ "webserver for ``X-Sendfile``."
#~ msgstr ""

# 2109a051b65c4db9b32fa74c96b70e39
#~ msgid ""
#~ "By default it will try to guess"
#~ " the mimetype for you, but you "
#~ "can also explicitly provide one.  For"
#~ " extra security you probably want to"
#~ " send certain files as attachment "
#~ "(HTML for instance).  The mimetype "
#~ "guessing requires a `filename` or an "
#~ "`attachment_filename` to be provided."
#~ msgstr ""

# cc3a4527712c42189a649a656f75c4c2
#~ msgid ""
#~ "ETags will also be attached "
#~ "automatically if a `filename` is "
#~ "provided. You can turn this off by"
#~ " setting `add_etags=False`."
#~ msgstr ""

# d4eb29530bdc4f73adb46030d25d7d1d
#~ msgid ""
#~ "If `conditional=True` and `filename` is "
#~ "provided, this method will try to "
#~ "upgrade the response stream to support"
#~ " range requests.  This will allow the"
#~ " request to be answered with partial"
#~ " content response."
#~ msgstr ""

# ed70a9fd69994458a3209a502d0ff13b
#~ msgid ""
#~ "Please never pass filenames to this "
#~ "function from user sources; you should"
#~ " use :func:`send_from_directory` instead."
#~ msgstr ""

# 809a06b6196a42608f7914b495e1e787
#~ msgid "UTF-8 filenames, as specified in `RFC 2231`_, are supported."
#~ msgstr ""

# 3e6fb342e4f94e439fca4088dfb6d7a7
#~ msgid ""
#~ "The filename is no longer automatically"
#~ " inferred from file objects. If you"
#~ " want to use automatic mimetype and"
#~ " etag support, pass a filepath via"
#~ " `filename_or_fp` or `attachment_filename`."
#~ msgstr ""

# ca51888bc63a42178fdeaf5be64c084d
#~ msgid ""
#~ "The `attachment_filename` is preferred over"
#~ " `filename` for MIME-type detection."
#~ msgstr ""

# 2fe416421aaf4750a095cdc76046b4ca
#~ msgid "cache_timeout pulls its default from application config, when None."
#~ msgstr ""

# 14c18a3583e14913ada9a22e2a337969
#~ msgid ""
#~ "mimetype guessing and etag support for"
#~ " file objects was deprecated because "
#~ "it was unreliable.  Pass a filename "
#~ "if you are able to, otherwise "
#~ "attach an etag yourself.  This "
#~ "functionality will be removed in Flask"
#~ " 1.0"
#~ msgstr ""

# b21d829d36f1402a9bb781b6c26b816d
#~ msgid ""
#~ "The `add_etags`, `cache_timeout` and "
#~ "`conditional` parameters were added.  The "
#~ "default behavior is now to attach "
#~ "etags."
#~ msgstr ""

# 38aff43df93a4540b5605beae1ddca42
#~ msgid "Filename may be a :class:`~os.PathLike` object."
#~ msgstr ""

# c6a6f48a0f1b4bec9ad1d91ece6e49d7
#~ msgid "Partial content supports :class:`~io.BytesIO`."
#~ msgstr ""

# 7a30e0e6978b49de81c2c6a6a583f6c8
#~ msgid ""
#~ "the filename of the file to send."
#~ " This is relative to the "
#~ ":attr:`~Flask.root_path` if a relative path"
#~ " is specified. Alternatively a file "
#~ "object might be provided in which "
#~ "case ``X-Sendfile`` might not work and"
#~ " fall back to the traditional method."
#~ "  Make sure that the file pointer "
#~ "is positioned at the start of data"
#~ " to send before calling :func:`send_file`."
#~ msgstr ""

# a8560b986595498f88715cc4de5b1725
#~ msgid ""
#~ "the mimetype of the file if "
#~ "provided. If a file path is given,"
#~ " auto detection happens as fallback, "
#~ "otherwise an error will be raised."
#~ msgstr ""

# 5bf2ff5d3b854172aba4cc0588f89e17
#~ msgid ""
#~ "set to ``True`` if you want to "
#~ "send this file with a ``Content-"
#~ "Disposition: attachment`` header."
#~ msgstr ""

# a9c680f63729410598d2e832ef46aa8c
#~ msgid "the filename for the attachment if it differs from the file's filename."
#~ msgstr ""

# 2dc303136da94c3fa529fa4290159b75
#~ msgid "set to ``False`` to disable attaching of etags."
#~ msgstr ""

# 08158304972349ecbf0f6c7833ced75a
#~ msgid "set to ``True`` to enable conditional responses."
#~ msgstr ""

# b3d724eb00014368b0ea14fe0f2f0375
#~ msgid ""
#~ "the timeout in seconds for the "
#~ "headers. When ``None`` (default), this "
#~ "value is set by "
#~ ":meth:`~Flask.get_send_file_max_age` of "
#~ ":data:`~flask.current_app`."
#~ msgstr ""

# d9e701a1545d48dead07fa5985c49227
#~ msgid ""
#~ "set the ``Last-Modified`` header to "
#~ "this value, a :class:`~datetime.datetime` or"
#~ " timestamp. If a file was passed, "
#~ "this overrides its mtime."
#~ msgstr ""

# f01d40db08b44c0ebd1ba5ebfe6f5be0
#~ msgid ""
#~ "Send a file from a given directory"
#~ " with :func:`send_file`.  This is a "
#~ "secure way to quickly expose static "
#~ "files from an upload folder or "
#~ "something similar."
#~ msgstr ""

# cb4e3b51b4f4446f972df703808fa6e9
#~ msgid "Sending files and Performance"
#~ msgstr ""

# f9ba188efbf8453b86efd25a4065725a
#~ msgid ""
#~ "It is strongly recommended to activate"
#~ " either ``X-Sendfile`` support in your "
#~ "webserver or (if no authentication "
#~ "happens) to tell the webserver to "
#~ "serve files for the given path on"
#~ " its own without calling into the "
#~ "web application for improved performance."
#~ msgstr ""

# 06c6c885b1e548de86ac00e2ea11f8ad
#~ msgid "the directory where all the files are stored."
#~ msgstr ""

# 4d27109d9c274d8d86f449d6b3758661
#~ msgid "the filename relative to that directory to download."
#~ msgstr ""

# af8fe7473f5f4db49d781061fe2d5956
#~ msgid ""
#~ "optional keyword arguments that are "
#~ "directly forwarded to :func:`send_file`."
#~ msgstr ""

# ba3c9bbd4b5e4720a7b54576cacaadd2
#~ msgid ""
#~ "Safely join `directory` and zero or "
#~ "more untrusted `pathnames` components."
#~ msgstr ""

# f5f0b111838d41ddb7b18fd823e2e617
#~ msgid "the trusted base directory."
#~ msgstr ""

# e2540a901b4f4694b532cdf461654269
#~ msgid "the untrusted pathnames relative to that directory."
#~ msgstr ""

# efcfc7d803fc4934bb1c0ba2e80934ac
#~ msgid ""
#~ ":class:`~werkzeug.exceptions.NotFound` if one or "
#~ "more passed paths fall out of its"
#~ " boundaries."
#~ msgstr ""

# 75b4b6d193504adc80c1cad53877a5db
#~ msgid ""
#~ "Convert the characters &, <, >, ',"
#~ " and \" in string s to HTML-"
#~ "safe sequences.  Use this if you "
#~ "need to display text that might "
#~ "contain such characters in HTML.  Marks"
#~ " return value as markup string."
#~ msgstr ""

# 4ef87290ff264c7cbd696a2975709d53
#~ msgid ""
#~ "This is a subclass of the text "
#~ "type (``str`` in Python 3, ``unicode``"
#~ " in Python 2). It has the same"
#~ " methods as that type, but all "
#~ "methods escape their arguments and "
#~ "return a ``Markup`` instance."
#~ msgstr ""

# ee45d356d1ac48a7ad1cf9d3672e5da4
#~ msgid "See :ref:`message-flashing-pattern` for examples."
#~ msgstr ""

# f770bc157b764f69b061de3041f2a4aa
#~ msgid "whitelist of categories to limit return values"
#~ msgstr ""

# 533a84b2261f425aae5dbd8af0eb2d13
#~ msgid ""
#~ "Flask uses ``simplejson`` for the JSON"
#~ " implementation.  Since simplejson is "
#~ "provided by both the standard library"
#~ " as well as extension, Flask will "
#~ "try simplejson first and then fall "
#~ "back to the stdlib json module.  "
#~ "On top of that it will delegate"
#~ " access to the current application's "
#~ "JSON encoders and decoders for easier"
#~ " customization."
#~ msgstr ""

# e93bd177353d47f0b4d35d979b505728
#~ msgid "So for starters instead of doing::"
#~ msgstr ""

# 0900f3561a2f4c69866da020ecd5caff
#~ msgid "You can instead just do this::"
#~ msgstr ""

# 44dea395e0c149adb6a3472383b52bdf
#~ msgid ""
#~ "For usage examples, read the :mod:`json`"
#~ " documentation in the standard library."
#~ "  The following extensions are by "
#~ "default applied to the stdlib's JSON "
#~ "module:"
#~ msgstr ""

# af3c925bde254f6483289ddc623a1024
#~ msgid "``datetime`` objects are serialized as :rfc:`822` strings."
#~ msgstr ""

# 864b67d7e0b74010b9a2c76aa24f66eb
#~ msgid ""
#~ "Any object with an ``__html__`` method"
#~ " (like :class:`~flask.Markup`) will have "
#~ "that method called and then the "
#~ "return value is serialized as string."
#~ msgstr ""

# cba4222cea814cec82c1cc48393238a0
#~ msgid ""
#~ "The :func:`~htmlsafe_dumps` function of this"
#~ " json module is also available as "
#~ "a filter called ``|tojson`` in Jinja2."
#~ "  Note that in versions of Flask "
#~ "prior to Flask 0.10, you must "
#~ "disable escaping with ``|safe`` if you"
#~ " intend to use ``|tojson`` output "
#~ "inside ``script`` tags. In Flask 0.10"
#~ " and above, this happens automatically "
#~ "(but it's harmless to include ``|safe``"
#~ " anyway)."
#~ msgstr ""

# 732d69b4c2b7486081437ec30d6242e2
#~ msgid "Auto-Sort JSON Keys"
#~ msgstr ""

# d332802adb8741bc98a09bb69a4c3f22
#~ msgid ""
#~ "The configuration variable ``JSON_SORT_KEYS`` "
#~ "(:ref:`config`) can be set to false "
#~ "to stop Flask from auto-sorting "
#~ "keys.  By default sorting is enabled "
#~ "and outside of the app context "
#~ "sorting is turned on."
#~ msgstr ""

# 77053fadd7db408191b38c838358854b
#~ msgid ""
#~ "Notice that disabling key sorting can"
#~ " cause issues when using content "
#~ "based HTTP caches and Python's hash "
#~ "randomization feature."
#~ msgstr ""

# 73cc4be3377c4aae85fb81c5a1fa6615
#~ msgid ""
#~ "This function wraps :func:`dumps` to add"
#~ " a few enhancements that make life"
#~ " easier.  It turns the JSON output"
#~ " into a :class:`~flask.Response` object "
#~ "with the :mimetype:`application/json` mimetype.  "
#~ "For convenience, it also converts "
#~ "multiple arguments into an array or "
#~ "multiple keyword arguments into a dict."
#~ "  This means that both ``jsonify(1,2,3)``"
#~ " and ``jsonify([1,2,3])`` serialize to "
#~ "``[1,2,3]``."
#~ msgstr ""

# c3fb569367854e2a9c817a2db9f18834
#~ msgid ""
#~ "For clarity, the JSON serialization "
#~ "behavior has the following differences "
#~ "from :func:`dumps`:"
#~ msgstr ""

# 1226141664b2463eb4f27d1c73d9dbe3
#~ msgid "Single argument: Passed straight through to :func:`dumps`."
#~ msgstr ""

# 968f4c232199447e9454bfa4d156c000
#~ msgid ""
#~ "Multiple arguments: Converted to an "
#~ "array before being passed to "
#~ ":func:`dumps`."
#~ msgstr ""

# c943b6dc990f4769b9aaa7c1a91e3a33
#~ msgid ""
#~ "Multiple keyword arguments: Converted to "
#~ "a dict before being passed to "
#~ ":func:`dumps`."
#~ msgstr ""

# 8bbabfe3d0b44789a7525106916a2b83
#~ msgid "Both args and kwargs: Behavior undefined and will throw an exception."
#~ msgstr ""

# 499a5a1cf26d4046a987f0bc5f8f259b
#~ msgid "This will send a JSON response like this to the browser::"
#~ msgstr ""

# 8db31961de694092ac6005264d59ba4b
#~ msgid ""
#~ "Added support for serializing top-level"
#~ " arrays. This introduces a security "
#~ "risk in ancient browsers. See :ref"
#~ ":`json-security` for details."
#~ msgstr ""

# 8a7c4450ce7a49dbb492da184834b2e6
#~ msgid ""
#~ "This function's response will be pretty"
#~ " printed if the ``JSONIFY_PRETTYPRINT_REGULAR``"
#~ " config parameter is set to True "
#~ "or the Flask app is running in "
#~ "debug mode. Compressed (not pretty) "
#~ "formatting currently means no indents "
#~ "and no spaces after separators."
#~ msgstr ""

# 1add3458a3384dcb94d852993e711b8c
#~ msgid ""
#~ "Serialize ``obj`` to a JSON-formatted"
#~ " string. If there is an app "
#~ "context pushed, use the current app's"
#~ " configured encoder "
#~ "(:attr:`~flask.Flask.json_encoder`), or fall back"
#~ " to the default :class:`JSONEncoder`."
#~ msgstr ""

# 73833e5d3ed64e7697c31d3ef002f020
#~ msgid ""
#~ "Takes the same arguments as the "
#~ "built-in :func:`json.dumps`, and does some"
#~ " extra configuration based on the "
#~ "application. If the simplejson package "
#~ "is installed, it is preferred."
#~ msgstr ""

# eb60fd74d04540c4a678ab49dcc94961
#~ msgid ""
#~ "App instance to use to configure "
#~ "the JSON encoder. Uses ``current_app`` "
#~ "if not given, and falls back to"
#~ " the default encoder when not in "
#~ "an app context."
#~ msgstr ""

# 217aa6557e4840ada9790f6d07dad2a5
#~ msgid "Like :func:`dumps` but writes into a file object."
#~ msgstr ""

# 2728833bb32848ec82a8a957b25b54be
#~ msgid ""
#~ "Deserialize an object from a JSON-"
#~ "formatted string ``s``. If there is "
#~ "an app context pushed, use the "
#~ "current app's configured decoder "
#~ "(:attr:`~flask.Flask.json_decoder`), or fall back"
#~ " to the default :class:`JSONDecoder`."
#~ msgstr ""

# 36fd975a2a0b4cbf94e220b3d3092a49
#~ msgid ""
#~ "Takes the same arguments as the "
#~ "built-in :func:`json.loads`, and does some"
#~ " extra configuration based on the "
#~ "application. If the simplejson package "
#~ "is installed, it is preferred."
#~ msgstr ""

# a5155e78a8d841e09f6a8beae8fec6ef
#~ msgid ""
#~ "App instance to use to configure "
#~ "the JSON decoder. Uses ``current_app`` "
#~ "if not given, and falls back to"
#~ " the default encoder when not in "
#~ "an app context."
#~ msgstr ""

# ce0c618aa22143d69d4cbc582f4bb9c7
#~ msgid "Like :func:`loads` but reads from a file object."
#~ msgstr ""

# 858397f2af8d46999a042a745bb1afbb
#~ msgid ""
#~ "The default Flask JSON encoder. This "
#~ "one extends the default encoder by "
#~ "also supporting ``datetime``, ``UUID``, "
#~ "``dataclasses``, and ``Markup`` objects."
#~ msgstr ""

# 1b33be34547f4d4ca5abcf34c7c5bbb7
#~ msgid ""
#~ "``datetime`` objects are serialized as "
#~ "RFC 822 datetime strings. This is "
#~ "the same as the HTTP date format."
#~ msgstr ""

# e1203a0d941c494da63c3e02bce61c67
#~ msgid ""
#~ "In order to support more data "
#~ "types, override the :meth:`default` method."
#~ msgstr ""

# f3549c9257d749a7917ac717867a5922
#~ msgid ""
#~ "Implement this method in a subclass "
#~ "such that it returns a serializable "
#~ "object for ``o``, or calls the "
#~ "base implementation (to raise a "
#~ ":exc:`TypeError`)."
#~ msgstr ""

# 7935484521924f549f0687710e2d94e0
#~ msgid ""
#~ "For example, to support arbitrary "
#~ "iterators, you could implement default "
#~ "like this::"
#~ msgstr ""

# acf690c827064b6d91edfbcb76e091a1
#~ msgid ""
#~ "The default JSON decoder.  This one "
#~ "does not change the behavior from "
#~ "the default simplejson decoder.  Consult "
#~ "the :mod:`json` documentation for more "
#~ "information.  This decoder is not only"
#~ " used for the load functions of "
#~ "this module but also :attr:`~flask.Request`."
#~ msgstr ""

# 9aec9a3d1213443aa34f9b49883f31a1
#~ msgid ":class:`~flask.Markup`"
#~ msgstr ""

# a4a56596d416498bb7f1c464575ef82f
#~ msgid ""
#~ "Let's seen an example that adds "
#~ "support for :class:`~collections.OrderedDict`. Dicts"
#~ " don't have an order in Python "
#~ "or JSON, so to handle this we "
#~ "will dump the items as a list "
#~ "of ``[key, value]`` pairs. Subclass "
#~ ":class:`JSONTag` and give it the new "
#~ "key ``' od'`` to identify the "
#~ "type. The session serializer processes "
#~ "dicts first, so insert the new tag"
#~ " at the front of the order "
#~ "since ``OrderedDict`` must be processed "
#~ "before ``dict``. ::"
#~ msgstr ""

# 39877874325c45778928eb44aa2a8f86
#~ msgid "copyright"
#~ msgstr ""

# 96b70321f1cd437794b6469543327e56
#~ msgid "2010 Pallets"
#~ msgstr ""

# 467c04c604bb4968967d817975c378ff
#~ msgid "license"
#~ msgstr ""

# 58531a83a1f84b569032d4654b841904
#~ msgid "BSD-3-Clause"
#~ msgstr ""

# b1edc5ef2c8141b090027d73b22a5748
#~ msgid ""
#~ "Updates the values in the config "
#~ "from a JSON file. This function "
#~ "behaves as if the JSON object was"
#~ " a dictionary and passed to the "
#~ ":meth:`from_mapping` function."
#~ msgstr ""

# c6360c2a9f1248eea818d728ac227d93
#~ msgid ""
#~ "the filename of the JSON file.  "
#~ "This can either be an absolute "
#~ "filename or a filename relative to "
#~ "the root path."
#~ msgstr ""

# f066a309638d48cb9db38c4df8a9e203
#~ msgid ""
#~ "This signal is sent when an "
#~ "exception happens during request processing."
#~ " It is sent *before* the standard "
#~ "exception handling kicks in and even "
#~ "in debug mode, where no exception "
#~ "handling happens.  The exception itself "
#~ "is passed to the subscriber as "
#~ "`exception`."
#~ msgstr ""

# cea9b8694ab147218675364bcd202d14
#~ msgid ""
#~ "Special subclass of the :class:`AppGroup` "
#~ "group that supports loading more "
#~ "commands from the configured Flask app."
#~ "  Normally a developer does not have"
#~ " to interface with this class but "
#~ "there are some very advanced use "
#~ "cases for which it makes sense to"
#~ " create an instance of this."
#~ msgstr ""

# bc12dc013c0049e5b42057fad1cd23d6
#~ msgid "For information as of why this is useful see :ref:`custom-scripts`."
#~ msgstr ""

# ab25e6e0b138470ea5b2d47792a9eaba
#~ msgid "Added the `standalone_mode` flag to control the standalone mode."
#~ msgstr ""

# 6dcd15d78fa14dba92f6811867e4b525
#~ msgid ""
#~ "Changes the current working directory to"
#~ " the location of the first file "
#~ "found, with the assumption that it "
#~ "is in the top level project "
#~ "directory and will be where the "
#~ "Python path should import local packages"
#~ " from."
#~ msgstr ""

# bc0291eb0758416e92f777fcbb75d395
#~ msgid ""
#~ "Run an interactive Python shell in "
#~ "the context of a given Flask "
#~ "application.  The application will populate"
#~ " the default namespace of this shell"
#~ " according to it's configuration."
#~ msgstr ""

