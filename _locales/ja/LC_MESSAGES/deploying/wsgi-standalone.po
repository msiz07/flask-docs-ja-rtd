# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# 7a244bd0bffb470694cbec2dd8e12414
#: ../../deploying/wsgi-standalone.rst:4
msgid "Standalone WSGI Containers"
msgstr ""

# df6aa676957742de9d7bdb0eca20fc5d
#: ../../deploying/wsgi-standalone.rst:6
msgid ""
"There are popular servers written in Python that contain WSGI "
"applications and serve HTTP.  These servers stand alone when they run; "
"you can proxy to them from your web server.  Note the section on :ref"
":`deploying-proxy-setups` if you run into issues."
msgstr ""

# 7b00a25c996f4324a59e606d1a85ea51
#: ../../deploying/wsgi-standalone.rst:12
msgid "Gunicorn"
msgstr ""

# 34f187e209134848a29db72cfeeb951e
#: ../../deploying/wsgi-standalone.rst:14
msgid ""
"`Gunicorn`_ 'Green Unicorn' is a WSGI HTTP Server for UNIX. It's a pre-"
"fork worker model ported from Ruby's Unicorn project. It supports both "
"`eventlet`_ and `greenlet`_. Running a Flask application on this server "
"is quite simple::"
msgstr ""

# 30daee0208b44f3588dc03d67052be1e
#: ../../deploying/wsgi-standalone.rst:20
msgid ""
"`Gunicorn`_ provides many command-line options -- see ``gunicorn -h``. "
"For example, to run a Flask application with 4 worker processes (``-w "
"4``) binding to localhost port 4000 (``-b 127.0.0.1:4000``)::"
msgstr ""

# 4179482b4b2f4c16bbef5009eddb2e29
#: ../../deploying/wsgi-standalone.rst:26
msgid ""
"The ``gunicorn`` command expects the names of your application module or "
"package and the application instance within the module. If you use the "
"application factory pattern, you can pass a call to that::"
msgstr ""

# 2e498a7d8a7e474ca1301efb6ba3e216
#: ../../deploying/wsgi-standalone.rst:37
msgid "uWSGI"
msgstr ""

# ab5b59374f9640668b402ab72b4d0714
#: ../../deploying/wsgi-standalone.rst:39
msgid ""
"`uWSGI`_ is a fast application server written in C. It is very "
"configurable which makes it more complicated to setup than gunicorn."
msgstr ""

# 514815966ffd484a83bcef979c7066a9
#: ../../deploying/wsgi-standalone.rst:42
msgid "Running `uWSGI HTTP Router`_::"
msgstr ""

# 23f735f36a094a58bf342c3d6c4d3118
#: ../../deploying/wsgi-standalone.rst:46
msgid ""
"For a more optimized setup, see :doc:`configuring uWSGI and NGINX "
"<uwsgi>`."
msgstr ""

# db80c1eaad7046f3b5acd732d95538c3
#: ../../deploying/wsgi-standalone.rst:52
msgid "Gevent"
msgstr ""

# 5df32795ba63486ba8bafa2ae2478e09
#: ../../deploying/wsgi-standalone.rst:54
msgid ""
"`Gevent`_ is a coroutine-based Python networking library that uses "
"`greenlet`_ to provide a high-level synchronous API on top of `libev`_ "
"event loop::"
msgstr ""

# 12ad3dea07a3407fb8f635ac19930982
#: ../../deploying/wsgi-standalone.rst:69
msgid "Twisted Web"
msgstr ""

# 434efc3f9d8f4b01b79f6ed4d13d85ae
#: ../../deploying/wsgi-standalone.rst:71
msgid ""
"`Twisted Web`_ is the web server shipped with `Twisted`_, a mature, non-"
"blocking event-driven networking library. Twisted Web comes with a "
"standard WSGI container which can be controlled from the command line "
"using the ``twistd`` utility::"
msgstr ""

# 3561c77f6fbf428a98015607f12282de
#: ../../deploying/wsgi-standalone.rst:78
msgid ""
"This example will run a Flask application called ``app`` from a module "
"named ``myproject``."
msgstr ""

# b92a967397a0446d9dc56459690d2a77
#: ../../deploying/wsgi-standalone.rst:81
msgid ""
"Twisted Web supports many flags and options, and the ``twistd`` utility "
"does as well; see ``twistd -h`` and ``twistd web -h`` for more "
"information. For example, to run a Twisted Web server in the foreground, "
"on port 8080, with an application from ``myproject``::"
msgstr ""

# 553e13052ded43198b679d8b68365531
#: ../../deploying/wsgi-standalone.rst:94
msgid "Proxy Setups"
msgstr ""

# 8106d12035a7492eaf8448d0677e56d4
#: ../../deploying/wsgi-standalone.rst:96
msgid ""
"If you deploy your application using one of these servers behind an HTTP "
"proxy you will need to rewrite a few headers in order for the application"
" to work. The two problematic values in the WSGI environment usually are "
"``REMOTE_ADDR`` and ``HTTP_HOST``.  You can configure your httpd to pass "
"these headers, or you can fix them in middleware.  Werkzeug ships a fixer"
" that will solve some common setups, but you might want to write your own"
" WSGI middleware for specific setups."
msgstr ""

# 7926585c551942cf8f0c5c6bc9add236
#: ../../deploying/wsgi-standalone.rst:104
msgid ""
"Here's a simple nginx configuration which proxies to an application "
"served on localhost at port 8000, setting appropriate headers:"
msgstr ""

# bdf8f6358ce8487795ee6f5878110667
#: ../../deploying/wsgi-standalone.rst:128
msgid ""
"If your httpd is not providing these headers, the most common setup "
"invokes the host being set from ``X-Forwarded-Host`` and the remote "
"address from ``X-Forwarded-For``::"
msgstr ""

# 3f474d9d72c847719c73a65d6ed1c970
#: ../../deploying/wsgi-standalone.rst:135
msgid "Trusting Headers"
msgstr ""

# 4cf0b0b53fa1454b8f1b47bdc40f9be7
#: ../../deploying/wsgi-standalone.rst:137
msgid ""
"Please keep in mind that it is a security issue to use such a middleware "
"in a non-proxy setup because it will blindly trust the incoming headers "
"which might be forged by malicious clients."
msgstr ""

# c9545712b9304ac0a923d854b398f582
#: ../../deploying/wsgi-standalone.rst:141
msgid ""
"If you want to rewrite the headers from another header, you might want to"
" use a fixer like this::"
msgstr ""

