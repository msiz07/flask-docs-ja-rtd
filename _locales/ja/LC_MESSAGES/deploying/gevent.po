# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.2.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-26 22:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../flask/docs/deploying/gevent.rst:2
msgid "gevent"
msgstr ""

#: ../../flask/docs/deploying/gevent.rst:4
msgid ""
"Prefer using :doc:`gunicorn` or :doc:`uwsgi` with gevent workers rather "
"than using `gevent`_ directly. Gunicorn and uWSGI provide much more "
"configurable and production-tested servers."
msgstr ""
"直接 `gevent`_ を使うよりも、:doc:`gunicorn` または :doc:`uwsgi` でgevent"
"のworkerを使う方が好ましいです。GunicornとuWSGIはより設定可能で製品レベル"
"のテストがされたサーバです。"

#: ../../flask/docs/deploying/gevent.rst:8
msgid ""
"`gevent`_ allows writing asynchronous, coroutine-based code that looks "
"like standard synchronous Python. It uses `greenlet`_ to enable task "
"switching without writing ``async/await`` or using ``asyncio``."
msgstr ""
"`gevent`_ は非同期処理の、コルーチンを土台にしたコードを標準の同期処理を"
"するPythonのような見た目で書けるようにします。`greenlet`_ を使うことで、"
"``async/await`` を書いたり、``asincio`` を使ったりせずに、タスクの切り"
"替えをできるようにします。"

#: ../../flask/docs/deploying/gevent.rst:12
msgid ""
":doc:`eventlet` is another library that does the same thing. Certain "
"dependencies you have, or other considerations, may affect which of the "
"two you choose to use."
msgstr ""
":doc:`eventlet` は、同じことをするもう一つのライブラリです。ある種の依存"
"対象や、その他の検討事項が、２つのどちらを使うかの選択に影響を与えるかも"
"しれません。"

#: ../../flask/docs/deploying/gevent.rst:16
msgid ""
"gevent provides a WSGI server that can handle many connections at once "
"instead of one per worker process. You must actually use gevent in your "
"own code to see any benefit to using the server."
msgstr ""
"geventは、接続ごとにworkerプロセスを使う代わりに、多くの接続を同時に処理"
"するWSGIサーバを提供します。このサーバを使用して得られるいかなる利点も見る"
"ためには、自分のコードの中で実際にgeventを使用する必要があります。"

#: ../../flask/docs/deploying/gevent.rst:25
msgid "Installing"
msgstr "インストール"

#: ../../flask/docs/deploying/gevent.rst:27
msgid ""
"When using gevent, greenlet>=1.0 is required, otherwise context locals "
"such as ``request`` will not work as expected. When using PyPy, "
"PyPy>=7.3.7 is required."
msgstr ""
"geventを使うときは、greenlet>=1.0が必要であり、さもなければ ``request`` の"
"ようなコンテキストの局所領域（context local）は期待通りに働かないでしょう。"
"PyPyを使うときは、PyPy>=7.3.7が必要です。"

#: ../../flask/docs/deploying/gevent.rst:31
msgid "Create a virtualenv, install your application, then install ``gevent``."
msgstr ""
"virtualenvを作成し、アプリケーションをインストールし、それから ``gevent`` "
"をインストールします。"

#: ../../flask/docs/deploying/gevent.rst:43
msgid "Running"
msgstr "実行"

#: ../../flask/docs/deploying/gevent.rst:45
msgid ""
"To use gevent to serve your application, write a script that imports its "
"``WSGIServer``, as well as your app or app factory."
msgstr ""
"Flaskアプリケーションを提供するためにgeventを使うには、その ``WSGIServer`` "
"をimportするスクリプトを、Flaskアプリのインスタンスであってもapp factoryで"
"あっても同様に書きます。"

#: ../../flask/docs/deploying/gevent.rst:48
msgid "``wsgi.py``"
msgstr ""

#: ../../flask/docs/deploying/gevent.rst:62
msgid "No output is shown when the server starts."
msgstr "サーバ開始時は、何も出力されません。"

#: ../../flask/docs/deploying/gevent.rst:66
msgid "Binding Externally"
msgstr "外部への結び付け（Binding Externally）"

#: ../../flask/docs/deploying/gevent.rst:68
msgid ""
"gevent should not be run as root because it would cause your application "
"code to run as root, which is not secure. However, this means it will not"
" be possible to bind to port 80 or 443. Instead, a reverse proxy such as "
":doc:`nginx` or :doc:`apache-httpd` should be used in front of gevent."
msgstr ""
"アプリケーションのコードがrootとして走るようになり、安全ではなくなるため、"
"geventはrootとして走らせないようにするべきです。しかしながら、これは"
"ポート80や443に結びつけ（bind）出来なくなることを意味します（訳注: 一般的な"
"Linuxでは、およそ1000より小さなポート番号は、セキュリティ対策のためroot権限"
"を持たないプログラムではbindできないようになっており、従ってroot権限がない"
"WSGIサーバではHTTPやHTTPSで標準的に使われる80や443番ポートでリクエストを"
"受け付けられないことになります）。代わりに、:doc:`nginx` または :doc:"
"`apache-httpd` のようなリバースプロキシをgeventの前面に使うべきです。"

#: ../../flask/docs/deploying/gevent.rst:74
msgid ""
"You can bind to all external IPs on a non-privileged port by using "
"``0.0.0.0`` in the server arguments shown in the previous section. Don't "
"do this when using a reverse proxy setup, otherwise it will be possible "
"to bypass the proxy."
msgstr ""
"外部からアクセスできる全てのIPアドレスのroot権限不要なポートは、前のセク"
"ションで示されたサーバの引数の中で ``0.0.0.0`` を使って結び付け（bind）"
"できます。これは、リバースプロキシを用意しているときは行わないでください、"
"さもなければリバースプロキシを迂回することが可能になります。"

#: ../../flask/docs/deploying/gevent.rst:79
msgid ""
"``0.0.0.0`` is not a valid address to navigate to, you'd use a specific "
"IP address in your browser."
msgstr ""
"``0.0.0.0`` はアクセスするには適切なアドレスではないため、ブラウザでは具体"
"的なIPアドレスを使うべきです。"
