# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.2.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-26 22:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

# da0e5ee25d7a4ea694bb8eaad502e4b0
#: ../../flask/docs/patterns/urlprocessors.rst:2
msgid "Using URL Processors"
msgstr "URL処理機能の利用（Using URL Processors）"

# f45822dbfd224ad594dfbbd14e1deb7f
#: ../../flask/docs/patterns/urlprocessors.rst:6
msgid ""
"Flask 0.7 introduces the concept of URL processors.  The idea is that you"
" might have a bunch of resources with common parts in the URL that you "
"don't always explicitly want to provide.  For instance you might have a "
"bunch of URLs that have the language code in it but you don't want to "
"have to handle it in every single function yourself."
msgstr ""
"Flask 0.7は、URL処理機能の概念を導入しました。そのアイデアは、常に明示的に"
"提供したいとは思わないURLの共通部分のあるリソースが大量にあるかもしれない、"
"というものです。例えば、URLの中に言語コードを持つ大量のURLがあり、全ての"
"一つ一つの関数でそれ（言語コード）を自分で処理したいとは思わないかもしれま"
"せん。"

# f5e6dee0f2a744ce96c7178edb5d97bc
#: ../../flask/docs/patterns/urlprocessors.rst:12
msgid ""
"URL processors are especially helpful when combined with blueprints.  We "
"will handle both application specific URL processors here as well as "
"blueprint specifics."
msgstr ""
"URL処理機能は、blueprintと組み合わせると特に便利です。ここでは、Flaskアプリ"
"ケーションが指定するURLだけでなく、blueprintが指定するものも扱います。"

# 60d2e9656b7946ba95d4cf927cb59481
#: ../../flask/docs/patterns/urlprocessors.rst:17
msgid "Internationalized Application URLs"
msgstr ""
"国際化されたアプリケーションのURL（Internationalized Application URLs）"

# 091f126a15284824a9d3482105ca7515
#: ../../flask/docs/patterns/urlprocessors.rst:19
msgid "Consider an application like this::"
msgstr "以下のようなアプリケーションを考えます::"

# 98a8373c91de43878141731c1ce4a703
#: ../../flask/docs/patterns/urlprocessors.rst:35
msgid ""
"This is an awful lot of repetition as you have to handle the language "
"code setting on the :data:`~flask.g` object yourself in every single "
"function. Sure, a decorator could be used to simplify this, but if you "
"want to generate URLs from one function to another you would have to "
"still provide the language code explicitly which can be annoying."
msgstr ""
"これは、全ての一つ一つの関数の中で :data:`~flask.g` オブジェクトに設定した"
"言語コードを自分で処理する必要があるため、恐ろしく多くの繰り返しです。もち"
"ろん、これを簡潔にするためにデコレータを使うこともできるでしょうが、もし"
"一つの関数内から別の関数のURLを生成したいときは、まだ言語コードを明示的に"
"提供する必要があるかもしれず、それは気が滅入るものでしょう。"

#: ../../flask/docs/patterns/urlprocessors.rst:41
msgid ""
"For the latter, this is where :func:`~flask.Flask.url_defaults` functions"
" come in.  They can automatically inject values into a call to "
":func:`~flask.url_for`.  The code below checks if the language code is "
"not yet in the dictionary of URL values and if the endpoint wants a value"
" named ``'lang_code'``::"
msgstr ""
"後者については、これは :func:`~flask.Flask.url_defaults` 関数が入って来る"
"ところです。それらは、:func:`~flask.url_for` 呼び出しの中へ自動的に値を挿入"
"します。以下のコードは、URLの値のdictionaryの中に言語コードがまだないかを"
"調べ、さらにエンドポイントが ``'lang_code'`` という名前の値を求めるか調べ"
"ます::"

# 59e6fecb12c94423bb79f59e984895e7
#: ../../flask/docs/patterns/urlprocessors.rst:54
msgid ""
"The method :meth:`~werkzeug.routing.Map.is_endpoint_expecting` of the URL"
" map can be used to figure out if it would make sense to provide a "
"language code for the given endpoint."
msgstr ""
"url_mapの :meth:`~werkzeug.routing.Map.is_endpoint_expecting` メソッドは、"
"与えられたエンドポイントに対して言語コードを提供することが理にかなっているか"
"どうかを理解するために使用できます。"

# 34af0f37c07f453da525dd19d0a68c8f
#: ../../flask/docs/patterns/urlprocessors.rst:58
msgid ""
"The reverse of that function are "
":meth:`~flask.Flask.url_value_preprocessor`\\s.  They are executed right "
"after the request was matched and can execute code based on the URL "
"values.  The idea is that they pull information out of the values "
"dictionary and put it somewhere else::"
msgstr ""
"その関数の反対が :meth:`~flask.Flask.url_value_preprocessor` です。それらは"
"リクエストが（URLのruleに）合致した直後に実行され、URLの値に基づいてコードを"
"実行できます。そのアイデアは、それらは（URLの）値のdictionaryから情報を引き"
"出し、それをどこか別のところに押し入れます::"

# 36e7d06354a4414cb05f029503d17ae8
#: ../../flask/docs/patterns/urlprocessors.rst:68
msgid ""
"That way you no longer have to do the `lang_code` assignment to "
":data:`~flask.g` in every function.  You can further improve that by "
"writing your own decorator that prefixes URLs with the language code, but"
" the more beautiful solution is using a blueprint.  Once the "
"``'lang_code'`` is popped from the values dictionary and it will no "
"longer be forwarded to the view function reducing the code to this::"
msgstr ""
"こうすると、`lang_code` の :data:`~flask.g` への割り当てを全ての関数で行う"
"必要が、もはやなくなります。言語コードをURLの接頭辞にする、自分独自のデコ"
"レータを書いてさらに改善できますが、より美しい解決策はblueprintを使うこと"
"です。一度 ``'lang_code'`` が値のdictionaryから取り出されたら、それはもはや"
"view関数へ転送さることはなくなり、コードを以下のように小さくします::"

# 72eb811b0c0545b4ab9c33205f19401b
#: ../../flask/docs/patterns/urlprocessors.rst:99
msgid "Internationalized Blueprint URLs"
msgstr "国際化されたBlueprintのURL（Internationalized Blueprint URLs）"

# 2eea97f05bf34d9d8e03855ee12d7ff5
#: ../../flask/docs/patterns/urlprocessors.rst:101
msgid ""
"Because blueprints can automatically prefix all URLs with a common string"
" it's easy to automatically do that for every function.  Furthermore "
"blueprints can have per-blueprint URL processors which removes a whole "
"lot of logic from the :meth:`~flask.Flask.url_defaults` function because "
"it no longer has to check if the URL is really interested in a "
"``'lang_code'`` parameter::"
msgstr ""
"blueprintは自動的に共通の文字列をすべてのURLの先頭に付けるため、全ての関数で"
"それ（上述のlang_code処理の様な共通処理）を自動的に行うことは容易です。さら"
"にblueprintは、URLが ``'lang_code'`` パラメータに本当に関心があるのかもはや"
"調べる必要がなくなるため、:meth:`~flask.Flask.url_defaults` 関数から一切合切"
"のロジックを取り除くURL処理機能を、blueprint毎に持つことができます::"

# e5fea8bbae454526a66219b9676aad2e
#~ msgid ""
#~ "For the latter, this is where "
#~ ":func:`~flask.Flask.url_defaults` functions come in."
#~ "  They can automatically inject values "
#~ "into a call for :func:`~flask.url_for` "
#~ "automatically.  The code below checks if"
#~ " the language code is not yet "
#~ "in the dictionary of URL values "
#~ "and if the endpoint wants a value"
#~ " named ``'lang_code'``::"
#~ msgstr ""

