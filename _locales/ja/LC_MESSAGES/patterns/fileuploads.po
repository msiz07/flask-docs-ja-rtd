# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-20 18:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

# c6367da4a6d0456692410f2bd1082a57
#: ../../flask/docs/patterns/fileuploads.rst:2
msgid "Uploading Files"
msgstr "ファイルのアップロード"

# 91d68555df274e9e9b7f9c3a446c7769
#: ../../flask/docs/patterns/fileuploads.rst:4
msgid ""
"Ah yes, the good old problem of file uploads.  The basic idea of file "
"uploads is actually quite simple.  It basically works like this:"
msgstr ""
"確かに、ファイルのアップロードは昔ながらの問題です。ファイルのアップ"
"ロードの基本的な考えは非常に単純です。基本的に以下のように働きます:"

# ef606784419c4e16a5a86f3c2a4e2e28
#: ../../flask/docs/patterns/fileuploads.rst:7
msgid ""
"A ``<form>`` tag is marked with ``enctype=multipart/form-data`` and an "
"``<input type=file>`` is placed in that form."
msgstr ""
"``<form>``\ タグは\ ``enctype=multipart/form-data``\ で印付けられ、その"
"formの中に\ ``<input type=file>``\ が置かれます。"

# 71168130a2e24fa2a4c0c061a9c22061
#: ../../flask/docs/patterns/fileuploads.rst:9
msgid ""
"The application accesses the file from the :attr:`~flask.request.files` "
"dictionary on the request object."
msgstr ""
"アプリケーションは、リクエストのオブジェクトの\ "
":attr:`~flask.request.files`\ にあるdictionaryからファイルにアクセス"
"します。"

# 4f72a3428c724370936bfab50f6e9cea
#: ../../flask/docs/patterns/fileuploads.rst:11
msgid ""
"use the :meth:`~werkzeug.datastructures.FileStorage.save` method of the "
"file to save the file permanently somewhere on the filesystem."
msgstr ""
"ファイルの\ :meth:`~werkzeug.datastructures.filesystem.save`\ メソッドを"
"使って、ファイルシステムのどこかへ永続的にファイルを保存します。"

# fdc2bd0aa9254ce2ba50ef2d7e236dcd
#: ../../flask/docs/patterns/fileuploads.rst:15
msgid "A Gentle Introduction"
msgstr "やさしいイントロダクション"

# db960ad1599f4310aae00cb8cee48bba
#: ../../flask/docs/patterns/fileuploads.rst:17
msgid ""
"Let's start with a very basic application that uploads a file to a "
"specific upload folder and displays a file to the user.  Let's look at "
"the bootstrapping code for our application::"
msgstr ""
"特定のアップロード・フォルダへファイルをアップロードし、ユーザへ"
"ファイルを表示する、非常に基本的なアプリケーションから始めましょう。"
"アプリケーションの手始めのコードを見てみましょう::"

# b6de704aedec4fb18602b619856c0430
#: ../../flask/docs/patterns/fileuploads.rst:31
msgid ""
"So first we need a couple of imports.  Most should be straightforward, "
"the :func:`werkzeug.secure_filename` is explained a little bit later.  "
"The ``UPLOAD_FOLDER`` is where we will store the uploaded files and the "
"``ALLOWED_EXTENSIONS`` is the set of allowed file extensions."
msgstr ""
"最初にいくつかimportが必要です。ほとんどは直感的なはずですが、"
"\ :func:`werkzeug.secure_filename`\ はもう少し後で説明します。"
"\ ``UPLOAD_FOLDER``\ はアップロードされたファイルを格納する場所で、"
"\ ``ALLOWED_EXTENSIONS``\ は許可されたファイル拡張子です。"

# d653a2e4d18d435691b1d131a14e0cb2
#: ../../flask/docs/patterns/fileuploads.rst:36
msgid ""
"Why do we limit the extensions that are allowed?  You probably don't want"
" your users to be able to upload everything there if the server is "
"directly sending out the data to the client.  That way you can make sure "
"that users are not able to upload HTML files that would cause XSS "
"problems (see :ref:`security-xss`).  Also make sure to disallow ``.php`` "
"files if the server executes them, but who has PHP installed on their "
"server, right?  :)"
msgstr ""
"なぜ許可される拡張子を制限するのでしょうか？恐らくあなたは、サーバが"
"クライアントへ直接データを送信する場合、そのサーバへユーザがなんでも"
"アップロードできるようにはしたくないでしょう。そうすれば、ユーザがXSSの"
"問題（:ref:`security-xss` を見てください）を起こしかねないHTMLファイルを"
"アップロードできないことを確実にできます。もしサーバが ``.php`` ファイル"
"を実行する場合はphpファイルのアップロードを許さないことも確実にする"
"でしょうが、誰が自分のサーバにPHPをインストールするんでしょうか？ :)"

# c09a8f425c55446f94edd7c6ebb33418
#: ../../flask/docs/patterns/fileuploads.rst:43
msgid ""
"Next the functions that check if an extension is valid and that uploads "
"the file and redirects the user to the URL for the uploaded file::"
msgstr ""
"次は、拡張子が適切かチェックし、ファイルをアップロードし、ユーザをアップ"
"ロードされたファイルのURLへリダイレクトする関数です::"

# adbfc08b497c41fa9f244dd9c759db26
#: ../../flask/docs/patterns/fileuploads.rst:77
msgid ""
"So what does that :func:`~werkzeug.utils.secure_filename` function "
"actually do? Now the problem is that there is that principle called "
"\"never trust user input\".  This is also true for the filename of an "
"uploaded file.  All submitted form data can be forged, and filenames can "
"be dangerous.  For the moment just remember: always use that function to "
"secure a filename before storing it directly on the filesystem."
msgstr ""
"では\ :func:`~werkzeug.utils.secure_filename`\ 関数は何を実際にはする"
"のでしょうか？この時の問題は「ユーザのインプットは決して信用するな」と"
"いわれる原則があることです。これはアップロードされたファイルのファイル名"
"についても当てはまります。提供されるformのデータはすべて偽造されている"
"可能性があり、ファイル名が危険である可能性があります。今のところはただ"
"覚えておくようにしてください: ファイルシステムへ直接格納する前に、常に"
"ファイル名を安全にする関数を使用してください。"

# 082b96016995426aa53d9f4ad1f43f44
#: ../../flask/docs/patterns/fileuploads.rst:84
msgid "Information for the Pros"
msgstr "プロ向けの情報"

# 1270b40d8881444197201c39557a680b
#: ../../flask/docs/patterns/fileuploads.rst:86
msgid ""
"So you're interested in what that :func:`~werkzeug.utils.secure_filename`"
" function does and what the problem is if you're not using it?  So just "
"imagine someone would send the following information as `filename` to "
"your application::"
msgstr ""
"この\ :func:`~werkzeug.utils.secure_filename`\ 関数が何をして、それを"
"使わない場合は何が問題なのか、興味を持ちましたね？では、誰かが以下の"
"ような情報を\ `filename`\ として自分のアプリケーションへ送信することを、"
"ただ想像してください::"

# 387ae413a9ad431abdccb5fd21a10d7a
#: ../../flask/docs/patterns/fileuploads.rst:93
msgid ""
"Assuming the number of ``../`` is correct and you would join this with "
"the ``UPLOAD_FOLDER`` the user might have the ability to modify a file on"
" the server's filesystem he or she should not modify.  This does require "
"some knowledge about how the application looks like, but trust me, "
"hackers are patient :)"
msgstr ""
"``../``\ の数が適切であり、これを\ ``UPLOAD_FOLDER``\ と結合すると仮定"
"したとき、ユーザはサーバのファイルシステムにある本来変更すべきでない"
"ファイルを変更できる能力を持つかもしれません。これはアプリケーションが"
"どのようなものかについての知識を要求しますが、信じてください、ハッカー"
"は我慢強いのです :)"

# 94905c62ce0949509d5e210061460245
#: ../../flask/docs/patterns/fileuploads.rst:99
msgid "Now let's look how that function works:"
msgstr ""
"それでは、この関数(secure_filename)がどのように働くかを見てみましょう:"

#: ../../flask/docs/patterns/fileuploads.rst:104
msgid ""
"We want to be able to serve the uploaded files so they can be downloaded "
"by users. We'll define a ``download_file`` view to serve files in the "
"upload folder by name. ``url_for(\"download_file\", name=name)`` "
"generates download URLs."
msgstr ""

#: ../../flask/docs/patterns/fileuploads.rst:117
msgid ""
"If you're using middleware or the HTTP server to serve files, you can "
"register the ``download_file`` endpoint as ``build_only`` so ``url_for`` "
"will work without a view function."
msgstr ""

# 4d31aa74162f4535bd7ab94bb688f3bf
#: ../../flask/docs/patterns/fileuploads.rst:129
msgid "Improving Uploads"
msgstr "アップロードの改善"

# 615b890ffd414eb293e30e5129e27409
#: ../../flask/docs/patterns/fileuploads.rst:133
msgid ""
"So how exactly does Flask handle uploads?  Well it will store them in the"
" webserver's memory if the files are reasonably small, otherwise in a "
"temporary location (as returned by :func:`tempfile.gettempdir`).  But how"
" do you specify the maximum file size after which an upload is aborted?  "
"By default Flask will happily accept file uploads with an unlimited "
"amount of memory, but you can limit that by setting the "
"``MAX_CONTENT_LENGTH`` config key::"
msgstr ""
"それでは、正確にはFlaskはどのようにファイルのアップロードを処理するので"
"しょうか？もしファイルが妥当な小ささであればウェブサーバのメモリ内に、"
"そうでない場合は（:func:`tempfile.gettempdir` で返される）一時的な場所に、"
"Flaskはファイルを格納します。しかし、それを超えたらアップロードが中止"
"される、最大ファイルサイズはどのように指定するのでしょうか？既定の動作"
"では、Flaskはファイルのアップロードをメモリ容量無制限に喜んで受け入れます"
"が、``MAX_CONTENT_LENGTH`` の設定キーを設定することで制限することができ"
"ます::"

# c09bf33962084c8fad16ddb0217fa0e4
#: ../../flask/docs/patterns/fileuploads.rst:146
msgid ""
"The code above will limit the maximum allowed payload to 16 megabytes. If"
" a larger file is transmitted, Flask will raise a "
":exc:`~werkzeug.exceptions.RequestEntityTooLarge` exception."
msgstr ""
"上記のコードは許可される最大のペイロードを16メガバイトに制限します。もし"
"もっと大きなファイルが伝送された場合、Flaskは\ "
":exc:`~werkzeug.exceptions.RequestEntityTooLarge`\ 例外を発生させます。"

# 2ca537dc4a8849579ad793a1a6574b51
#: ../../flask/docs/patterns/fileuploads.rst:150
msgid "Connection Reset Issue"
msgstr "接続中止の問題"

# a15ce6c90ab845bd80e36f3de1adcb4c
#: ../../flask/docs/patterns/fileuploads.rst:152
msgid ""
"When using the local development server, you may get a connection reset "
"error instead of a 413 response. You will get the correct status response"
" when running the app with a production WSGI server."
msgstr ""
"ローカルの開発サーバを使用しているとき、（HTTPステータスコードが）413"
"レスポンスの代わりに接続中止エラー（conneciton reset error）を得る場合が"
"あります。アプリを製品版のWSGIサーバで走らせたときは、適切なステータスの"
"レスポンスを得られるようになります。"

# 359b1356243e441cb369dac64a1868b8
#: ../../flask/docs/patterns/fileuploads.rst:156
msgid ""
"This feature was added in Flask 0.6 but can be achieved in older versions"
" as well by subclassing the request object.  For more information on that"
" consult the Werkzeug documentation on file handling."
msgstr ""
"この目玉機能はFlask 0.6で追加されましたが、リクエストのオブジェクトを"
"サブクラス化することで古いバージョンでも同様に達成可能です。このことに"
"関してのさらなる情報は、ファイル処理についてのWerkzeugのドキュメントを"
"調べてください。"

# e6e3a1c4313d4da9bb21cfb16c33e15b
#: ../../flask/docs/patterns/fileuploads.rst:162
msgid "Upload Progress Bars"
msgstr "アップロードのプログレスバー"

# 4a016517dba343a5af4fa9296fcde4e8
#: ../../flask/docs/patterns/fileuploads.rst:164
msgid ""
"A while ago many developers had the idea to read the incoming file in "
"small chunks and store the upload progress in the database to be able to "
"poll the progress with JavaScript from the client. The client asks the "
"server every 5 seconds how much it has transmitted, but this is something"
" it should already know."
msgstr ""
"しばらく前には、アップロードの進み具合をクライアントからJavaScriptで"
"ポーリングできるようにするために、多くの開発者は受信ファイルを小さな断片"
"にして読み込み、アップロードの進み具合をデータベースに格納することを考えて"
"いました。クライアントは5秒ごとにサーバにどれくらいファイルを伝送済みかを"
"問い合わせるのですが、それはクライアントが既に知っているべきことです。"

# 5f0da9535a0f490ab83e6f2b1096f8a2
#: ../../flask/docs/patterns/fileuploads.rst:171
msgid "An Easier Solution"
msgstr "より簡単な解決策"

# d0fc55013ca24f6ba198fc450d2bb421
#: ../../flask/docs/patterns/fileuploads.rst:173
msgid ""
"Now there are better solutions that work faster and are more reliable. "
"There are JavaScript libraries like jQuery_ that have form plugins to "
"ease the construction of progress bar."
msgstr ""
"今ではより高速に働いてより信頼性のある、より良い解決策があります。プログ"
"レス・バーの構築を容易にするformのプラグインを持つ、\ jQuery_\ のような"
"JavaScriptのライブラリがあります。"

# 5a97b511b6e14219b51ea98ed858d07e
#: ../../flask/docs/patterns/fileuploads.rst:177
#, fuzzy
#| msgid "" "Because the common pattern for file uploads exists almost
#| unchanged in " "all applications dealing with uploads, there is also a Flask
#| extension " "called `Flask-Uploads`_ that implements a full fledged upload
#| mechanism " "that allows controlling which file extensions are allowed to be
#| uploaded."
msgid ""
"Because the common pattern for file uploads exists almost unchanged in "
"all applications dealing with uploads, there are also some Flask "
"extensions that implement a full fledged upload mechanism that allows "
"controlling which file extensions are allowed to be uploaded."
msgstr ""
"ファイルのアップロードについてのありがちなパターンはアップロードを扱う"
"全てのアプリケーションで殆ど変わることなく存在するため、Flask拡張にも、"
"どのファイル拡張子はアップロードを許可するか制御できる、十分に成熟した"
"アップロードの仕組みを実装した `Flask-Uploads`_ と呼ばれるものがあります。"

# 2249e0cdc4264f10ba9451d7bb11a5e7
#~ msgid ""
#~ "Now one last thing is missing: the"
#~ " serving of the uploaded files. In"
#~ " the :func:`upload_file()` we redirect the"
#~ " user to ``url_for('uploaded_file', "
#~ "filename=filename)``, that is, "
#~ "``/uploads/filename``. So we write the "
#~ ":func:`uploaded_file` function to return the"
#~ " file of that name. As of Flask"
#~ " 0.5 we can use a function that"
#~ " does that for us::"
#~ msgstr ""
#~ "この時点で、最後のひとつが欠けています: アップロードされたファイルの提供です。その\\ "
#~ ":func:`upload_file()`\\ の中では、ユーザを\\ "
#~ "``url_for('uploaded_file', filename=filename)``\\ へ、つまり、\\"
#~ " ``/uploads/filename``\\ へリダイレクトします。それでは、その名前のファイルを返すための\\"
#~ " :func:`uploaded_file`\\ 関数を書きましょう。Flask "
#~ "0.5からは、それをしてくれる関数を使うことができます::"

# 34cabd43baa248889a4b65079f39f906
#~ msgid ""
#~ "Alternatively you can register `uploaded_file`"
#~ " as `build_only` rule and use the "
#~ ":class:`~werkzeug.wsgi.SharedDataMiddleware`.  This also"
#~ " works with older versions of Flask::"
#~ msgstr ""
#~ "別のやり方では\\ `build_only`\\ なルール（訳注: ``url_for``\\ "
#~ "でのURLの作成だけは可能で、対応するviewは用意しないルールのようです。\\ "
#~ ":func:`~flask.Flask.add_url_rule`\\ 関数と\\ "
#~ ":class:`werkzeug.routing.Rule`\\ クラス参照）として\\ "
#~ "`uploaded_file`\\ を登録し、\\ "
#~ ":class:`~werkzeug.middleware.shared_data.SharedDataMiddleware`\\ "
#~ "を使うことができます。これは古いバージョンのFlaskでも機能します::"

# 3c9cdf7469e84f878cf02c4f8a751627
#~ msgid "If you now run the application everything should work as expected."
#~ msgstr "もし今アプリケーションを走らせれば、すべて期待通りに機能するはずです。"

