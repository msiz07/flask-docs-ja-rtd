# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# 61436902668d4135966d554e139cb205
#: ../../patterns/apierrors.rst:2
msgid "Implementing API Exceptions"
msgstr ""

# e808fcc236e446358b90ea809f1456e4
#: ../../patterns/apierrors.rst:4
msgid ""
"It's very common to implement RESTful APIs on top of Flask.  One of the "
"first things that developers run into is the realization that the builtin"
" exceptions are not expressive enough for APIs and that the content type "
"of :mimetype:`text/html` they are emitting is not very useful for API "
"consumers."
msgstr ""

# 9bcf269a402241429f5ed32612375853
#: ../../patterns/apierrors.rst:9
msgid ""
"The better solution than using ``abort`` to signal errors for invalid API"
" usage is to implement your own exception type and install an error "
"handler for it that produces the errors in the format the user is "
"expecting."
msgstr ""

# d4030a7ac345437b91353f4f8624f156
#: ../../patterns/apierrors.rst:14
msgid "Simple Exception Class"
msgstr ""

# 7c944a4f801749378eb6e6e22e9c55c4
#: ../../patterns/apierrors.rst:16
msgid ""
"The basic idea is to introduce a new exception that can take a proper "
"human readable message, a status code for the error and some optional "
"payload to give more context for the error."
msgstr ""

# e61bcfa62e8344fabf6e62f11af6fdcd
#: ../../patterns/apierrors.rst:20
msgid "This is a simple example::"
msgstr ""

# 30a4c7c14c324ceeaf2817118f417db3
#: ../../patterns/apierrors.rst:39
msgid ""
"A view can now raise that exception with an error message.  Additionally "
"some extra payload can be provided as a dictionary through the `payload` "
"parameter."
msgstr ""

# a678bc1185df4855b7326bd647ff81e4
#: ../../patterns/apierrors.rst:44
msgid "Registering an Error Handler"
msgstr ""

# c2554bfc60684e57828d1e0f2b7a4ca3
#: ../../patterns/apierrors.rst:46
msgid ""
"At that point views can raise that error, but it would immediately result"
" in an internal server error.  The reason for this is that there is no "
"handler registered for this error class.  That however is easy to add::"
msgstr ""

# 9f7745905abc4e009a237a9f372d42be
#: ../../patterns/apierrors.rst:57
msgid "Usage in Views"
msgstr ""

# 1766d422891f494fa86399a93c519925
#: ../../patterns/apierrors.rst:59
msgid "Here is how a view can use that functionality::"
msgstr ""

