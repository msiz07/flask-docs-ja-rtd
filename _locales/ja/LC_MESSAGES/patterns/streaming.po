# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-21 20:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

# a31dbd9ff3e44d779735ef7acb16e23c
#: ../../flask/docs/patterns/streaming.rst:2
msgid "Streaming Contents"
msgstr ""

# 17b87ee6e3c54ce592c23c3811e9dc1b
#: ../../flask/docs/patterns/streaming.rst:4
msgid ""
"Sometimes you want to send an enormous amount of data to the client, much"
" more than you want to keep in memory.  When you are generating the data "
"on the fly though, how do you send that back to the client without the "
"roundtrip to the filesystem?"
msgstr ""

# 109c61f94fb64fe6abc9fca578b45eed
#: ../../flask/docs/patterns/streaming.rst:9
msgid "The answer is by using generators and direct responses."
msgstr ""

# 0ed6a4965d14436a97ee2c8bea24552a
#: ../../flask/docs/patterns/streaming.rst:12
msgid "Basic Usage"
msgstr ""

# d886418a69cc46469f0647e9fa5bf616
#: ../../flask/docs/patterns/streaming.rst:14
msgid ""
"This is a basic view function that generates a lot of CSV data on the "
"fly. The trick is to have an inner function that uses a generator to "
"generate data and to then invoke that function and pass it to a response "
"object::"
msgstr ""

# 1a65fb383edb41b0898f9c6b50f0741b
#: ../../flask/docs/patterns/streaming.rst:25
msgid ""
"Each ``yield`` expression is directly sent to the browser.  Note though "
"that some WSGI middlewares might break streaming, so be careful there in "
"debug environments with profilers and other things you might have "
"enabled."
msgstr ""

# 93411e6421c7459fab8065536aad898e
#: ../../flask/docs/patterns/streaming.rst:30
msgid "Streaming from Templates"
msgstr ""

# 3e302e9f717b4e7ab430b1a87e4452d3
#: ../../flask/docs/patterns/streaming.rst:32
msgid ""
"The Jinja2 template engine also supports rendering templates piece by "
"piece.  This functionality is not directly exposed by Flask because it is"
" quite uncommon, but you can easily do it yourself::"
msgstr ""

# 63358ee2906e4458829e57d0d8b7c814
#: ../../flask/docs/patterns/streaming.rst:48
msgid ""
"The trick here is to get the template object from the Jinja2 environment "
"on the application and to call :meth:`~jinja2.Template.stream` instead of"
" :meth:`~jinja2.Template.render` which returns a stream object instead of"
" a string.  Since we're bypassing the Flask template render functions and"
" using the template object itself we have to make sure to update the "
"render context ourselves by calling "
":meth:`~flask.Flask.update_template_context`. The template is then "
"evaluated as the stream is iterated over.  Since each time you do a yield"
" the server will flush the content to the client you might want to buffer"
" up a few items in the template which you can do with "
"``rv.enable_buffering(size)``.  ``5`` is a sane default."
msgstr ""

# d1e78bd067a64a4d97ebe2d7bbb6cb0a
#: ../../flask/docs/patterns/streaming.rst:60
msgid "Streaming with Context"
msgstr ""

# 87591f019a8449a0881808d4f9e5e5da
#: ../../flask/docs/patterns/streaming.rst:64
msgid ""
"Note that when you stream data, the request context is already gone the "
"moment the function executes.  Flask 0.9 provides you with a helper that "
"can keep the request context around during the execution of the "
"generator::"
msgstr ""

# e9d0695465fa41c18081a0390641f108
#: ../../flask/docs/patterns/streaming.rst:79
msgid ""
"Without the :func:`~flask.stream_with_context` function you would get a "
":class:`RuntimeError` at that point."
msgstr ""
