# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# 93d382664c0c447dac2cb49313db520f
#: ../../tutorial/views.rst:4
msgid "Blueprints and Views"
msgstr "青写真（blueprints）とビュー（views）"

# d987890f2cfd4a378283a2071b4f9f7d
#: ../../tutorial/views.rst:6
msgid ""
"A view function is the code you write to respond to requests to your "
"application. Flask uses patterns to match the incoming request URL to the"
" view that should handle it. The view returns data that Flask turns into "
"an outgoing response. Flask can also go the other direction and generate "
"a URL to a view based on its name and arguments."
msgstr ""
"view関数は、アプリケーションへのリクエストに対するレスポンスを作成する"
"ために作成するコードになります。Flaskは、やって来るリクエストのURLを"
"処理すべきviewへと照合するためのパターンを使用します。Flaskが送り出す"
"レスポンスへと変換するデータを、viewは返します。別の方向から、Flaskは"
"（viewの）名前と引数に基づいて、viewに対応するURLを生成することも"
"できます。"

# 6889b05a6af14511a1ba49e7b9de80eb
#: ../../tutorial/views.rst:14
msgid "Create a Blueprint"
msgstr "blueprintの作成"

# fda6fb178fd4496d867002f554be333b
#: ../../tutorial/views.rst:16
msgid ""
"A :class:`Blueprint` is a way to organize a group of related views and "
"other code. Rather than registering views and other code directly with an"
" application, they are registered with a blueprint. Then the blueprint is"
" registered with the application when it is available in the factory "
"function."
msgstr ""
":class:`blueprint`\ は、関連するviewおよびその他のコードをグループへと"
"編成するやり方です。viewおよびその他のコードを直接アプリケーションに"
"登録するよりも、それらをblueprintに登録します。それから、factory関数で"
"アプリケーションが利用可能になったときに、blueprintをアプリケーションに"
"登録します。"

# a95ba696c5dd40ae9c3b2b9b5c305c7f
#: ../../tutorial/views.rst:22
msgid ""
"Flaskr will have two blueprints, one for authentication functions and one"
" for the blog posts functions. The code for each blueprint will go in a "
"separate module. Since the blog needs to know about authentication, "
"you'll write the authentication one first."
msgstr ""
"Flaskrでは2つのblueprintがあり、ひとつは認証関数のためであり、ひとつは"
"ブログへ投稿する関数のためですそれぞれのblueprintのコードは、異なる"
"モジュールにして進めます。ブログは認証に関して知ている必要があるので、"
"まずは認証のものから書いていきます。"

# 8d5ca4a73a4e45bd97faaeaf4c5148de
# bc7e8daa2ba84fce9200c4d0de0f18c7
# e37b4308796849e5a0e1a5da0d6d69e9
# abcb5ff4e2f646b2b029c5ec9c88050d
# a3f030bb59f94c4b83068d15ac556a3d
# 5f6f23f96be049cb9b548f4ecee98ea5
#: ../../tutorial/views.rst:27 ../../tutorial/views.rst:79
#: ../../tutorial/views.rst:171 ../../tutorial/views.rst:218
#: ../../tutorial/views.rst:247 ../../tutorial/views.rst:263
msgid "``flaskr/auth.py``"
msgstr ""

# 31bc29cd722543cc876e856033de5607
#: ../../tutorial/views.rst:41
msgid ""
"This creates a :class:`Blueprint` named ``'auth'``. Like the application "
"object, the blueprint needs to know where it's defined, so ``__name__`` "
"is passed as the second argument. The ``url_prefix`` will be prepended to"
" all the URLs associated with the blueprint."
msgstr ""
"これは\ ``'auth'``\ と名付けられた\ :class:`blueprint`\ を作成します。"
"アプリケーションのオブジェクトと似たように、blueprintは自分がどこで定義"
"されているか知る必要があり、従って\ ``__name__``\ が2番目の引数として"
"渡されています。\ ``url_prefix``\ は、blueprintと関連付けられている"
"URL全ての先頭に付けられます。"

# 196a4c2d9aad4d80aba890a5565d5b8e
#: ../../tutorial/views.rst:46
msgid ""
"Import and register the blueprint from the factory using "
":meth:`app.register_blueprint() <Flask.register_blueprint>`. Place the "
"new code at the end of the factory function before returning the app."
msgstr ""
":meth:`app.register_blueprint() <Flask.register_blueprint>`\ を使用して、"
"factoryからblueprintをimportして登録します。新しいコードはfactory関数の"
"最後で、appを返す直前に置くようにします。"

# c9fa5c9ed0524254a60ab90c40d9cb27
#: ../../tutorial/views.rst:50
msgid "``flaskr/__init__.py``"
msgstr ""

# 79007e81853e4dc3bf2f002fa68ecd77
#: ../../tutorial/views.rst:62
msgid ""
"The authentication blueprint will have views to register new users and to"
" log in and log out."
msgstr ""
"この認証のblueprintは、新しいユーザを登録して、ログインとログアウトができる"
"ようにするviewを持つようにします。"

# f771f3a1b0284ef5b734ce11acb571c0
#: ../../tutorial/views.rst:67
msgid "The First View: Register"
msgstr "最初のビュー: 登録（Register）"

# 12d24a0fa3f34933b32154759e5564e5
#: ../../tutorial/views.rst:69
msgid ""
"When the user visits the ``/auth/register`` URL, the ``register`` view "
"will return `HTML`_ with a form for them to fill out. When they submit "
"the form, it will validate their input and either show the form again "
"with an error message or create the new user and go to the login page."
msgstr ""
"ユーザが\ ``/auth/register``\ URLへ訪ずれたときは、\ ``register``\ "
"ビューはユーザが記入すべきformと一緒に\ `HTML`_\ を返します。ユーザが"
"formを提出したときは、ユーザの入力を検証し、それから、エラーメッセージと"
"一緒にフォームを再表示するか、または、新しいユーザを作成してログイン"
"ページへ行くでしょう。"

# 40dd43916335440a98294bc52e1dd2e7
#: ../../tutorial/views.rst:76
msgid ""
"For now you will just write the view code. On the next page, you'll write"
" templates to generate the HTML form."
msgstr ""
"ここでは、viewのコードの作成だけしていきます。次のページでは、HTMLフォームを"
"生成するテンプレートを作成します。"

# 53a2c05253c34361879b29caee3ab24e
#: ../../tutorial/views.rst:111
msgid "Here's what the ``register`` view function is doing:"
msgstr "これはview関数の\ ``register``\ が何をするか示しています:"

# 3751500532914958b839707153cdfc67
#: ../../tutorial/views.rst:113
msgid ""
":meth:`@bp.route <Blueprint.route>` associates the URL ``/register`` with"
" the ``register`` view function. When Flask receives a request to "
"``/auth/register``, it will call the ``register`` view and use the return"
" value as the response."
msgstr ""
":meth:`@bp.route <Blueprint.route>`\ は、URLの\ ``/register``\ と"
"view関数の\ ``register``\ とを関連付けます。Flaskが\ ``/auth/register``\ への"
"リクエストを受信したとき、それはview関数の\ ``register``\ を呼び出し、その"
"戻り値をレスポンスとして使用します。"

# 5f92f149f9be417eae083642829a1866
#: ../../tutorial/views.rst:118
msgid ""
"If the user submitted the form, :attr:`request.method <Request.method>` "
"will be ``'POST'``. In this case, start validating the input."
msgstr ""
"もしユーザがformを提出した場合、\ :attr:`Request.method <Request.method>`\ "
"はPOSTになります。その場合は、入力データを検証します。"

# a2fc88550dd4407b83c0fdeb1a5952ff
#: ../../tutorial/views.rst:122
msgid ""
":attr:`request.form <Request.form>` is a special type of :class:`dict` "
"mapping submitted form keys and values. The user will input their "
"``username`` and ``password``."
msgstr ""
":attr:`request.form <Request.form>`\ は、提出されたformのキーと値とを"
"対応付ける、\ :class:`dict`\ の特別なタイプです。ユーザは自分の\ "
"``username``\ と\ ``password``\ を入力します。"

# 211f41286c744615911e1fe358c275d9
#: ../../tutorial/views.rst:126
msgid "Validate that ``username`` and ``password`` are not empty."
msgstr "``username``\ と\ ``password``\ が空でないか検証します。"

# bcfac4cfbdbc42f7b7d2b9115c9efbd2
#: ../../tutorial/views.rst:128
msgid ""
"Validate that ``username`` is not already registered by querying the "
"database and checking if a result is returned. :meth:`db.execute "
"<sqlite3.Connection.execute>` takes a SQL query with ``?`` placeholders "
"for any user input, and a tuple of values to replace the placeholders "
"with. The database library will take care of escaping the values so you "
"are not vulnerable to a *SQL injection attack*."
msgstr ""
"``username``\ が登録済でないことを、データベースに問合せして結果が返るか"
"調べることで検証します。\ :meth:`db.execute <sqlite3.Connection.execute>`\ "
"は、ユーザのあらゆる入力をプレースホルダ\ ``?``\ にしたSQLのqueryと、"
"プレースホルダを置き換える値のtupleを受け取ります。データベースライブラリは"
"\ *SQL injection attack*\ に対して脆弱にならないように値のエスケープを"
"取り計らいます。"

# 9bbd7158ac03480da40853d0e59e419c
#: ../../tutorial/views.rst:136
msgid ""
":meth:`~sqlite3.Cursor.fetchone` returns one row from the query. If the "
"query returned no results, it returns ``None``. Later, "
":meth:`~sqlite3.Cursor.fetchall` is used, which returns a list of all "
"results."
msgstr ""
":meth:`~sqlite3.Cursor.fetchone`\ はquery（の結果）から1行を返します。"
"もしqueryが何も結果を返さない場合は、\ ``None``\ を返します。後程、すべての"
"結果のリストを返す\ :meth:`~sqlite3.Cursor.fetchall`\ が使用されます。"

# a11409be0edf48a8b97855ae3bef0d01
#: ../../tutorial/views.rst:141
msgid ""
"If validation succeeds, insert the new user data into the database. For "
"security, passwords should never be stored in the database directly. "
"Instead, :func:`~werkzeug.security.generate_password_hash` is used to "
"securely hash the password, and that hash is stored. Since this query "
"modifies data, :meth:`db.commit() <sqlite3.Connection.commit>` needs to "
"be called afterwards to save the changes."
msgstr ""
"もし検証が成功した場合は、新しいユーザのデータをデータベースへinsert"
"します。セキュリティのために、パスワードは決してデータベースへ直接格納"
"すべきではありません。代わりに、\ :func:`~werkzeug.security.generate_password_hash`\ "
"を使用してパスワードを安全にハッシュし、そのハッシュを格納します。このqueryは"
"データを変更するため、変更を保存した後に\ :meth:`db.commit() "
"<sqlite3.Connection.commit>`\ を呼び出す必要があります。"

# bf107b82dc6a487fa2fc34b23bb59ffe
#: ../../tutorial/views.rst:149
msgid ""
"After storing the user, they are redirected to the login page. "
":func:`url_for` generates the URL for the login view based on its name. "
"This is preferable to writing the URL directly as it allows you to change"
" the URL later without changing all code that links to it. "
":func:`redirect` generates a redirect response to the generated URL."
msgstr ""
"ユーザ情報を格納した後、ログインページへリダイレクトさせます。\ "
":func:`url_for`\ は、ログインviewの名前から対応するURLを生成します。"
"これはURLを後から変更しても、そこにリンクしている全てのコードを変更"
"させずにすむようにできるため、URLを直接書き込むよりも好ましいやり方です。\ "
":func:`redirect`\ は、生成されたURLへリダイレクトさせるレスポンスを生成"
"します。"

# 0b153d00360e413fad1582e4f589d778
#: ../../tutorial/views.rst:156
msgid ""
"If validation fails, the error is shown to the user. :func:`flash` stores"
" messages that can be retrieved when rendering the template."
msgstr ""
"もし検証が失敗した場合は、エラーをユーザへ示します。\ :func:`flush`\ は、"
"テンプレートを変換するときに取得可能なメッセージを格納します。"

# 5d25a7a4f3054a4a80f312381402fee2
#: ../../tutorial/views.rst:159
msgid ""
"When the user initially navigates to ``auth/register``, or there was a "
"validation error, an HTML page with the registration form should be "
"shown. :func:`render_template` will render a template containing the "
"HTML, which you'll write in the next step of the tutorial."
msgstr ""
"ユーザが最初に\ ``auth/register``\ へ進んだときは、または検証での"
"エラーがあったときには、登録フォームのあるHTMLページを表示すべきです。\ "
":func:`render_template`\ は、このチュートリアルの次のステップで作成する、"
"そのHTMLを含んだテンプレートを変換します。"

# 64169ef34f354311a377f9ebd2ba9303
#: ../../tutorial/views.rst:167
msgid "Login"
msgstr "ログイン"

# bbecb3ae9da44986b4dc9b9f91e4ea5a
#: ../../tutorial/views.rst:169
msgid "This view follows the same pattern as the ``register`` view above."
msgstr "このviewは上記の\ ``register``\ のviewと同じパターンに従います。"

# 3c50deef7e3145548dc7b49d230dcb90
#: ../../tutorial/views.rst:199
msgid "There are a few differences from the ``register`` view:"
msgstr "``register``\ のviewとは少し違うところがあります:"

# efe46c07de4145d4b66548fbd17edd25
#: ../../tutorial/views.rst:201
msgid "The user is queried first and stored in a variable for later use."
msgstr "ユーザは最初に問合せ（query）され、後で使用するために変数へ格納されます。"

# 2382cf33e47e40f398092936357ea6d0
#: ../../tutorial/views.rst:203
msgid ""
":func:`~werkzeug.security.check_password_hash` hashes the submitted "
"password in the same way as the stored hash and securely compares them. "
"If they match, the password is valid."
msgstr ""
":func:`~werkzeug.securely.check_password_hash`\ は提出されたパスワードを"
"格納されたハッシュと同じやり方でハッシュし、セキュリティに注意しながら"
"それらを比較します。もし一致した場合、パスワードは適正です。"

# ccfb0cea4fe84c7487ee38d28222de37
#: ../../tutorial/views.rst:207
msgid ""
":data:`session` is a :class:`dict` that stores data across requests. When"
" validation succeeds, the user's ``id`` is stored in a new session. The "
"data is stored in a *cookie* that is sent to the browser, and the browser"
" then sends it back with subsequent requests. Flask securely *signs* the "
"data so that it can't be tampered with."
msgstr ""
":data:`session`\ は、リクエストを跨いで格納されるデータの\ :class:`dict`\ "
"です。検証が成功したときは、ユーザの\ ``id``\ は新しいsessionに格納され"
"ます。そのデータはブラウザへ送信される\ *cookie*\ に格納され、それから"
"ブラウザは以降のリクエストで送信し返します。Flaskはデータを改ざんできない"
"ようにするために、安全にデータを\ *署名*\ します。"

# 0100eff5fddf490db837b1614850a15a
#: ../../tutorial/views.rst:213
msgid ""
"Now that the user's ``id`` is stored in the :data:`session`, it will be "
"available on subsequent requests. At the beginning of each request, if a "
"user is logged in their information should be loaded and made available "
"to other views."
msgstr ""
"この時点でユーザの\ ``id``\ は\ :data:`session`\ へ格納され、それは以降の"
"リクエストで利用可能になります。各リクエストの開始時に、ユーザがログイン"
"していた場合はユーザの情報が読み込まれて、他のviewからも利用可能になります。"

# 3fab576897e248f78abda0483daed639
#: ../../tutorial/views.rst:232
msgid ""
":meth:`bp.before_app_request() <Blueprint.before_app_request>` registers "
"a function that runs before the view function, no matter what URL is "
"requested. ``load_logged_in_user`` checks if a user id is stored in the "
":data:`session` and gets that user's data from the database, storing it "
"on :data:`g.user <g>`, which lasts for the length of the request. If "
"there is no user id, or if the id doesn't exist, ``g.user`` will be "
"``None``."
msgstr ""
":meth:`bp.before_app_request() <Blueprint.before_app_request>`\ は"
"どのURLがリクエストされたかに関わらず、view関数の前に実行する関数を登録"
"します。\ ``load_logged_in_user``\ は、ユーザidが\ :data:`session`\ に"
"格納されているかチェックし、それからデータベースからユーザのデータを取得し、"
"それをリクエストの期間中は存続する\ :data:`g.user`\ へ格納します。もし"
"ユーザidがない場合、もしくはidが存在しない場合、\ ``g.user``\ は\ ``None``\ "
"になります。"

# be9323c7a2d944589d8ab30c2b061700
#: ../../tutorial/views.rst:242
msgid "Logout"
msgstr "ログアウト"

# ba043eb084bb497fb905118dda074f3d
#: ../../tutorial/views.rst:244
msgid ""
"To log out, you need to remove the user id from the :data:`session`. Then"
" ``load_logged_in_user`` won't load a user on subsequent requests."
msgstr ""
"ログアウトするには、ユーザidを\ :data:`session`\ から取り除く必要が"
"あります。そうすると\ ``load_logged_in_user``\ は以降のリクエストで"
"ユーザ情報を読み取らなくなります。"

# bd2992b2275643a5aebfc5661c080b6e
#: ../../tutorial/views.rst:257
msgid "Require Authentication in Other Views"
msgstr "他のviewでの認証の要求"

# 0158ed6ba37f41b0b255a87bbb83fb3c
#: ../../tutorial/views.rst:259
msgid ""
"Creating, editing, and deleting blog posts will require a user to be "
"logged in. A *decorator* can be used to check this for each view it's "
"applied to."
msgstr ""
"ブログの投稿を作成、編集、削除するにはユーザがログインする必要があります。"
"\ *デコレータ（decorator）*\ を使用すると、decoratorを適用した各ページで"
"ログインをチェックできます。"

# b0b730e5bac94f598f2c21e135fc2b11
#: ../../tutorial/views.rst:276
msgid ""
"This decorator returns a new view function that wraps the original view "
"it's applied to. The new function checks if a user is loaded and "
"redirects to the login page otherwise. If a user is loaded the original "
"view is called and continues normally. You'll use this decorator when "
"writing the blog views."
msgstr ""
"このdecoratorは、適用した元のviewを包み込む（wrap）新しい関数を返します。"
"その新しい関数はユーザ情報が読み込まれたかチェックして、そうでない場合は"
"ログインページへリダイレクトします。もしユーザ情報が読み込まれた場合は、"
"元のviewが呼び出されて正常に続けます。ブログのviewを作成するときにdecorator"
"を使用していきます。"

# d489f6861b9f4c6d98e65dae8066f6a9
#: ../../tutorial/views.rst:283
msgid "Endpoints and URLs"
msgstr "エンドポイントとURL"

# 499cdab90988412fa1ec664d87ad189a
#: ../../tutorial/views.rst:285
msgid ""
"The :func:`url_for` function generates the URL to a view based on a name "
"and arguments. The name associated with a view is also called the "
"*endpoint*, and by default it's the same as the name of the view "
"function."
msgstr ""
":func:`url_for`\ 関数はviewの名前と引数に基づいて対応するURLを生成します。"
"viewに関連付けられた名前は\ *エンドポイント*\ とも呼ばれ、標準設定ではview"
"関数の名前と同じになります。"

# 19638529d10e4210886fd686f77e5a27
#: ../../tutorial/views.rst:290
msgid ""
"For example, the ``hello()`` view that was added to the app factory "
"earlier in the tutorial has the name ``'hello'`` and can be linked to "
"with ``url_for('hello')``. If it took an argument, which you'll see "
"later, it would be linked to using ``url_for('hello', who='World')``."
msgstr ""
"例えば、このチュートリアルの前の方でapp factoryへ追加されたviewの\ "
"``hello()``\ は、名前が\ ``'hello'``\ であり、\ ``url_for('hello')``\ を"
"使ってリンクすることができます。もし引数を取る場合は、それは後で確認"
"していきますが、それは\ ``url_for('hello', who='World')``\ を使用して"
"リンクできるでしょう。"

# e9bf16ae80e1439aabcbd68d621fa965
#: ../../tutorial/views.rst:296
msgid ""
"When using a blueprint, the name of the blueprint is prepended to the "
"name of the function, so the endpoint for the ``login`` function you "
"wrote above is ``'auth.login'`` because you added it to the ``'auth'`` "
"blueprint."
msgstr "blueprintを使用するときは、blueprintの名前は関数名の前に付けられ、"
"従って先程作成した\ ``login``\ 関数のエンドポイントは、blueprintの\ "
"``'auth'``\ を追加しているため\ ``'auth.login'``\ になります。"

# 36dc0ce7ddf642a7b27599d16e07f068
#: ../../tutorial/views.rst:301
msgid "Continue to :doc:`templates`."
msgstr ":doc:`templates`\ へ続きます。"

