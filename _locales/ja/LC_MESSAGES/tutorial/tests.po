# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# 4c156b72299d4a57965dedfd80862ac0
#: ../../tutorial/tests.rst:4
msgid "Test Coverage"
msgstr "テスト網羅性（Test Coverage）"

# 1b57a31e32f54dc4aa2c2e7321e8b084
#: ../../tutorial/tests.rst:6
msgid ""
"Writing unit tests for your application lets you check that the code you "
"wrote works the way you expect. Flask provides a test client that "
"simulates requests to the application and returns the response data."
msgstr ""
"自分のアプリケーションに対してユニットテストを書くことで、自分で書いた"
"コードが自分の期待通りに機能することをチェックできるようになります。Flaskは"
"アプリケーションへのリクエストを模擬（simulate）してレスポンスデータを返す、"
"テスト用のクライアントを提供します。"

# c276b117b8ad459a991769ef1c0691ad
#: ../../tutorial/tests.rst:10
msgid ""
"You should test as much of your code as possible. Code in functions only "
"runs when the function is called, and code in branches, such as ``if`` "
"blocks, only runs when the condition is met. You want to make sure that "
"each function is tested with data that covers each branch."
msgstr ""
"可能な限り多くの自分のコードをテストするべきです。関数内のコードは、"
"関数が呼び出されたときだけ走り、\ ``if``\ ブロックのような分岐箇所は、"
"条件が合った時だけ走ります。それぞれの関数が、それぞれの分岐を網羅する"
"データでテストされていることを確認したくなるでしょう。"

# 75b1dee9bbf447ccbb7a0baa94becc38
#: ../../tutorial/tests.rst:15
#, python-format
msgid ""
"The closer you get to 100% coverage, the more comfortable you can be that"
" making a change won't unexpectedly change other behavior. However, 100% "
"coverage doesn't guarantee that your application doesn't have bugs. In "
"particular, it doesn't test how the user interacts with the application "
"in the browser. Despite this, test coverage is an important tool to use "
"during development."
msgstr ""
"網羅性が100%に近づくほど、変更したときに変更箇所以外の振る舞いへ予想外の"
"変化を起こさないという安心感がより得られるようになります。しかしながら、"
"100%の網羅性は、アプリケーションにはバグがないということを保証するわけでは"
"ありません。特に、それは、ユーザがブラウザの中でアプリケーションとどの"
"ようにやり取りするかについてはテストしません。とはいえ、テスト網羅性は"
"開発中に使用できる重要なツールです。"

# 292f17dc647746eea790f33850f8ed9c
#: ../../tutorial/tests.rst:23
msgid ""
"This is being introduced late in the tutorial, but in your future "
"projects you should test as you develop."
msgstr ""
"このチュートリアルでは後の方で紹介されていますが、自分の将来の"
"プロジェクトでは、開発するたびにテストするべきです。"

# 2bfc688caccf47a0a925f22ad2be51b7
#: ../../tutorial/tests.rst:26
msgid ""
"You'll use `pytest`_ and `coverage`_ to test and measure your code. "
"Install them both:"
msgstr ""
"コードのテストおよび（網羅性の）測定に、ここでは\ `pytest`_\ と\ "
"`coverage`_\ を使用します。両方ともインストールしましょう:"

# b593cdbe5ca1441d852bd5b4d9d86eb6
#: ../../tutorial/tests.rst:38
msgid "Setup and Fixtures"
msgstr "準備と据え付け品（Setup and Fixtures）"

# d99e1004cca4431297f63e6631e64ed1
#: ../../tutorial/tests.rst:40
msgid ""
"The test code is located in the ``tests`` directory. This directory is "
"*next to* the ``flaskr`` package, not inside it. The "
"``tests/conftest.py`` file contains setup functions called *fixtures* "
"that each test will use. Tests are in Python modules that start with "
"``test_``, and each test function in those modules also starts with "
"``test_``."
msgstr ""
"テスト用コードは\ ``tests``\ ディレクトリに置きます。このディレクトリは、\ "
"``flaskr``\ パッケージの内側ではなく\ *隣に*\ です。以下の\ "
"``tests/conftest.py``\ ファイルは、各テストで使用していく\ *据え付け品"
"（fixtures）*\ と呼ばれる準備用（setup）関数を含んでいます。テストは\ "
"``test_``\ で始まるPythonモジュールの中にあり、それらのモジュール内の"
"各テスト関数も同様に\ ``test_``\ で始まります。"

# b259a473fe9e4943a99d36df5249404a
#: ../../tutorial/tests.rst:47
msgid ""
"Each test will create a new temporary database file and populate some "
"data that will be used in the tests. Write a SQL file to insert that "
"data."
msgstr ""
"各テストで新しく一時的なデータベースを作成し、テスト中に使用される"
"データをいくらか挿入します。そのデータをinsertするためのSQLファイルを"
"書きましょう。"

# 0de6f610da674c21886961b58e2922a7
#: ../../tutorial/tests.rst:51
msgid "``tests/data.sql``"
msgstr ""

# 37965572f5d04c7db8f1bb14a0dcb9b1
#: ../../tutorial/tests.rst:63
msgid ""
"The ``app`` fixture will call the factory and pass ``test_config`` to "
"configure the application and database for testing instead of using your "
"local development configuration."
msgstr ""
"以下にあるfixutureの\ ``app``\ 関数ではfactoryを呼び出して、ローカル開発用の"
"設定を使用する代わりに、アプリケーションとデータベースをテスト用に設定する\ "
"``test_config``\ を渡します。"

# 0f77dd1c31b94ad98575f27c921d1196
# 74d49e228b1b4253b3d27567a694c0c7
#: ../../tutorial/tests.rst:67 ../../tutorial/tests.rst:226
msgid "``tests/conftest.py``"
msgstr ""

# f3ff3640b68749e4bb2f3b4b2541e24d
#: ../../tutorial/tests.rst:109
msgid ""
":func:`tempfile.mkstemp` creates and opens a temporary file, returning "
"the file object and the path to it. The ``DATABASE`` path is overridden "
"so it points to this temporary path instead of the instance folder. After"
" setting the path, the database tables are created and the test data is "
"inserted. After the test is over, the temporary file is closed and "
"removed."
msgstr ""
":func:`tempfile.mkstemp`\ は一時ファイルを作成して開き、そのfileオブジェクト"
"とパスを返します。\ ``DATABASE``\ のパスは上書きされて、インスタンスフォルダ"
"の代わりに、作成した一時ファイルのパスを指すようになります。パスを設定した後、"
"データベースの表が作成されテストデータが挿入されます。テストが終了した後は、"
"一時ファイルが閉じられ削除されます。"

# ce0754f2a58c44fca1f53e3efeeabdb9
#: ../../tutorial/tests.rst:116
msgid ""
":data:`TESTING` tells Flask that the app is in test mode. Flask changes "
"some internal behavior so it's easier to test, and other extensions can "
"also use the flag to make testing them easier."
msgstr ""
":data:`TESTING`\ は、appがテストモードであることをFlaskへ伝えます。Flaskは"
"いくらか内部的な振る舞いを変更してテストしやすいようにし、さらに、その他の"
"（Flaskの）拡張も自身をテストしやすくするために、この（TESTING）フラグを"
"使用する可能性があります。"

# 15ea38e4f9a14460b474ce5a390811b4
#: ../../tutorial/tests.rst:120
msgid ""
"The ``client`` fixture calls :meth:`app.test_client() "
"<Flask.test_client>` with the application object created by the ``app`` "
"fixture. Tests will use the client to make requests to the application "
"without running the server."
msgstr ""
"fixtureの\ ``client``\ 関数は、fixtureの\ ``app``\ 関数によって作成された"
"アプリケーションのオブジェクトを使って、\ :meth:`app.test_client() "
"<Flask.test_client>`\ を呼び出します。テストではこのclientを使用して、"
"サーバを実行させずに、アプリケーションへのリクエストを作成します。"

# ecca3ecb7ac64ee1ac4d61b5ee5d911d
#: ../../tutorial/tests.rst:125
msgid ""
"The ``runner`` fixture is similar to ``client``. "
":meth:`app.test_cli_runner() <Flask.test_cli_runner>` creates a runner "
"that can call the Click commands registered with the application."
msgstr ""
"fixtureの\ ``runner``\ 関数は\ ``client``\ と似ています。\ "
":meth:`app.test_cli_runner() <Flask.test_cli_runner>`\ は、アプリケーション"
"に登録されたClickのコマンドを呼び出し可能なrunner（実行者）を作成します。"

# 9f8f772acf8b4b28a03bcae3d7815fa0
#: ../../tutorial/tests.rst:129
msgid ""
"Pytest uses fixtures by matching their function names with the names of "
"arguments in the test functions. For example, the ``test_hello`` function"
" you'll write next takes a ``client`` argument. Pytest matches that with "
"the ``client`` fixture function, calls it, and passes the returned value "
"to the test function."
msgstr ""
"Pytestは、テスト用関数内の引数名とfictureの関数名とを照合することで、"
"fixtureを使用します。例えば、次に作成する予定の\ ``test_hello``\ 関数"
"は\ ``client``\ 引数を取ります。Pytestはその引数名をfixtureの\ ``client``\ "
"関数と照合し、それを呼び出し、そしてテスト関数へ（fixutureの関数の）"
"戻り値を渡します。"

# 015ab0badd7d46daab6c2d589f206a5e
#: ../../tutorial/tests.rst:137
msgid "Factory"
msgstr "製造工場（Factory）"

# 59e3074a49c54bf59c670c3dd9372a6c
#: ../../tutorial/tests.rst:139
msgid ""
"There's not much to test about the factory itself. Most of the code will "
"be executed for each test already, so if something fails the other tests "
"will notice."
msgstr ""
"factory自身についてはそれほどテストするところはありません。コードの殆どは"
"各テストで実施されていくため、何かに失敗しているときは他のテストで気づく"
"でしょう。"

# 8fd48d280f1945d8a4a477669c13b03f
#: ../../tutorial/tests.rst:143
msgid ""
"The only behavior that can change is passing test config. If config is "
"not passed, there should be some default configuration, otherwise the "
"configuration should be overridden."
msgstr ""
"変えることができる唯一の振る舞いは、テスト用設定を渡すことです。もし"
"設定が渡されない場合、なにかしらの標準設定になっているはずであり、そうで"
"なければ設定は上書きされるはずです。"

# 135ac0e577ba44f5b51d22494625f176
#: ../../tutorial/tests.rst:147
msgid "``tests/test_factory.py``"
msgstr ""

# 3d381d9fa15f4910a00949e34e44820a
#: ../../tutorial/tests.rst:162
msgid ""
"You added the ``hello`` route as an example when writing the factory at "
"the beginning of the tutorial. It returns \"Hello, World!\", so the test "
"checks that the response data matches."
msgstr ""
"このチュートリアルの始めでfactoryを書いたとき、\ ``hello``\ 経路（route）"
"を例として追加しました。それは「Hello, World!」を返すので、テストではその"
"レスポンスデータが合っているかをチェックします。"

# 2e5e16898b3542209f92a34c089b381e
#: ../../tutorial/tests.rst:168
msgid "Database"
msgstr "データベース"

# 5371db79fe40416abd7df8d238d6ef2d
#: ../../tutorial/tests.rst:170
msgid ""
"Within an application context, ``get_db`` should return the same "
"connection each time it's called. After the context, the connection "
"should be closed."
msgstr ""
"アプリケーションのcontext内では、\ ``get_db``\ は呼び出される"
"たびに同じ接続（connection）を返すはずです。そのcontextが終わった後"
"では、connectionは閉じられているはずです。"

# 18c4a36b1ab84bf9af305bb665578ab7
# 5c0831ee5e664fe0930f1fd24a3c7dba
#: ../../tutorial/tests.rst:174 ../../tutorial/tests.rst:196
msgid "``tests/test_db.py``"
msgstr ""

# cc509aa739c74488acc201a2b0d3ba3f
#: ../../tutorial/tests.rst:193
msgid ""
"The ``init-db`` command should call the ``init_db`` function and output a"
" message."
msgstr ""
"``init-db``\ コマンドは\ ``init_db``\ 関数を呼び出して、メッセージを出力"
"するはずです。"

# 3824be01fbe24c10876c3027d1d4b94d
#: ../../tutorial/tests.rst:211
msgid ""
"This test uses Pytest's ``monkeypatch`` fixture to replace the "
"``init_db`` function with one that records that it's been called. The "
"``runner`` fixture you wrote above is used to call the ``init-db`` "
"command by name."
msgstr ""
"このテストはPytestのfixtureの\ ``monkeypatch``\ を使って、\ ``init_db``\ "
"関数を、それが呼び出された時には記録を残す関数へ置き換えます。\ "
"先ほど書いたfixtureの\ ``runner``\ 関数（が返すオブジェクト）は、\ "
"``init-db``\ コマンドを名前を使って呼び出すために使用されています。"

# 7348cc7a0145448d800143e2f1bd8265
#: ../../tutorial/tests.rst:218
msgid "Authentication"
msgstr "認証（Authentication）"

# 359d7b76dd734fd28f74f8a9ca9e7245
#: ../../tutorial/tests.rst:220
msgid ""
"For most of the views, a user needs to be logged in. The easiest way to "
"do this in tests is to make a ``POST`` request to the ``login`` view with"
" the client. Rather than writing that out every time, you can write a "
"class with methods to do that, and use a fixture to pass it the client "
"for each test."
msgstr ""
"大部分のviewでは、ユーザがログインしている必要があります。テストの中でこれを"
"行う最も簡単なやり方は、クライアントを使って\ ``login``\ のviewへ\ ``POST``\ "
"リクエストを作成することです。クライアント作成などを行う処理を毎回書くよりも、"
"それを行うメソッドを持つクラスを書いて、各テストでそのクラスへクライアント"
"を渡すfixtureを使用することができます。"

# 7681b1926a97471bb2062e76a084948e
#: ../../tutorial/tests.rst:247
msgid ""
"With the ``auth`` fixture, you can call ``auth.login()`` in a test to log"
" in as the ``test`` user, which was inserted as part of the test data in "
"the ``app`` fixture."
msgstr ""
"fixtureの\ ``auth``\ 関数と合わせると、テスト中に\ ``auth.login()``\ を"
"呼び出し、fixutureの\ ``app``\ 関数の中でテスト用データの一部として挿入"
"された\ ``test``\ ユーザとしてログインすることができます。"

# dae2022dc8e84d579e29f6c5e8d0940b
#: ../../tutorial/tests.rst:251
msgid ""
"The ``register`` view should render successfully on ``GET``. On ``POST`` "
"with valid form data, it should redirect to the login URL and the user's "
"data should be in the database. Invalid data should display error "
"messages."
msgstr ""
"``register``\ のviewは\ ``GET``\ でうまく表示できるはずです。適切なデータを"
"使った\ ``POST``\ では、ログインのURLへリダイレクトして、ユーザのデータを"
"データベースへ入れるはずです。適切でないデータではエラーメッセージを表示する"
"はずです。"

# d3d15921054f46bfbca94f14902e204b
# 5e78eb3fe85b4766b88f85128cee0dd6
# 0b655a596df840e298bcea234a092740
#: ../../tutorial/tests.rst:256 ../../tutorial/tests.rst:316
#: ../../tutorial/tests.rst:345
msgid "``tests/test_auth.py``"
msgstr ""

# c21c99b9cf6948dd829e1563c7f89b5d
#: ../../tutorial/tests.rst:289
msgid ""
":meth:`client.get() <werkzeug.test.Client.get>` makes a ``GET`` request "
"and returns the :class:`Response` object returned by Flask. Similarly, "
":meth:`client.post() <werkzeug.test.Client.post>` makes a ``POST`` "
"request, converting the ``data`` dict into form data."
msgstr ""
":meth:`client.get() <werkzeug.test.Client.get>`\ は\ ``GET``\ リクエスト"
"を作成して、Flaskによって返された\ :class:`Reponse`\ オブジェクトを返し"
"ます。同様に、\ :meth:`client.post() <werkzeug.test.Client.post>`\ は\ "
"``POST``\ リクエストを作成して、\ ``data``\ のdictをformのデータへ変換"
"します。"

# daf455127d1a4013875da96df87f5733
#: ../../tutorial/tests.rst:294
msgid ""
"To test that the page renders successfully, a simple request is made and "
"checked for a ``200 OK`` :attr:`~Response.status_code`. If rendering "
"failed, Flask would return a ``500 Internal Server Error`` code."
msgstr ""
"ページがうまく表示されているかをテストするために、単純なリクエストが作成"
"され、\ ``200 OK``\ の\ :attr:`~Response.status_code`\ に対するチェックが"
"されます。もし表示が失敗した場合、Flaskは\ ``500 Internal Server Error``\ の"
"コード（status code）を返します。"

# fdd6837eee1942db8e2188a30804c827
#: ../../tutorial/tests.rst:299
msgid ""
":attr:`~Response.headers` will have a ``Location`` header with the login "
"URL when the register view redirects to the login view."
msgstr ""
":attr:`~Response.header`\ は、registerのviewがログインのviewへリダイレクト"
"したとき、ログインのURLに設定された\ ``Location``\ ヘッダを持ちます。"

# bc7820b0ae02483a992bc480387d20b8
#: ../../tutorial/tests.rst:302
msgid ""
":attr:`~Response.data` contains the body of the response as bytes. If you"
" expect a certain value to render on the page, check that it's in "
"``data``. Bytes must be compared to bytes. If you want to compare Unicode"
" text, use :meth:`get_data(as_text=True) "
"<werkzeug.wrappers.BaseResponse.get_data>` instead."
msgstr ""
":attr:`~Response.data`\ はレスポンスの本体（body）をバイト（bytes）として"
"含んでいます。もしもある値をページ上に表示することを期待する場合、それが\ "
"``data``\ の中にあるかチェックします。bytes（型）はbytes（型）と比較しな"
"ければなりません。もしUnicodeのテキストを比較したいときは、\ "
":meth:`get_data(as_text=True) <werkzeug.wrappers.BaseResponse.get_data>`\ "
"を代わりに使用してください。"

# 61a43c8db5af4ab5a2212222fb4a47c4
#: ../../tutorial/tests.rst:308
msgid ""
"``pytest.mark.parametrize`` tells Pytest to run the same test function "
"with different arguments. You use it here to test different invalid input"
" and error messages without writing the same code three times."
msgstr ""
"``pytest.mark.parametrize``\ は、同じテスト用関数を違う引数で走らせるよう"
"Pytestに伝えます。ここでは、異なる不正な入力とエラーメッセージを、3回同じ"
"コードを書くことなくテストするために使用しています。"

# 56f69d12fabf43288f1659bcf725aa32
#: ../../tutorial/tests.rst:312
msgid ""
"The tests for the ``login`` view are very similar to those for "
"``register``. Rather than testing the data in the database, "
":data:`session` should have ``user_id`` set after logging in."
msgstr ""
"``login``\ のviewのテストは、\ ``register``\ のものと非常に似ています。"
"（registerのように）データベースの中のデータをテストするのではなく、"
"\ :data:`session`\ がログイン後には\ ``user_id``\ を持っているかをテスト"
"します。"

# fb7b870eda8149d2ab107c681e2ead62
#: ../../tutorial/tests.rst:338
msgid ""
"Using ``client`` in a ``with`` block allows accessing context variables "
"such as :data:`session` after the response is returned. Normally, "
"accessing ``session`` outside of a request would raise an error."
msgstr ""
"``client``\ を\ ``with``\ ブロックの中で使用すると、レスポンスが返された"
"後に\ :data:`session`\ のようなcontextの変数（訳注: リクエストの処理中"
"だけ設定されている変数のような意味合い）へアクセスできるようになります。"
"通常は、\ ``session``\ へリクエストの外側からアクセスしようとするとエラーを"
"引き起こします。"

# 7201174613474e21ad14b02b3a33e049
#: ../../tutorial/tests.rst:342
msgid ""
"Testing ``logout`` is the opposite of ``login``. :data:`session` should "
"not contain ``user_id`` after logging out."
msgstr ""
"``logout``\ のテストは\ ``login``\ の反対になります。\ :data:`session`\ "
"はログアウトした後\ ``user_id``\ を含まないようにするはずです 。"

# 3f07fd00ab7e440cba68d4f71bcd2148
#: ../../tutorial/tests.rst:357
msgid "Blog"
msgstr "ブログ"

# 87800cc5db0341e3aebc7aebff6c5e48
#: ../../tutorial/tests.rst:359
msgid ""
"All the blog views use the ``auth`` fixture you wrote earlier. Call "
"``auth.login()`` and subsequent requests from the client will be logged "
"in as the ``test`` user."
msgstr ""
"全てのブログのviewは、前の方で書いたfixutureの\ ``auth``\ を使用します。"
"\ ``auth.login()``\ を呼び出すと、それ以降のクライアントからのリクエスト"
"は、\ ``test``\ ユーザとしてログインされたものになります。"

# 61bd02173f3c425cbed28119b7680d45
#: ../../tutorial/tests.rst:363
msgid ""
"The ``index`` view should display information about the post that was "
"added with the test data. When logged in as the author, there should be a"
" link to edit the post."
msgstr ""
"``index``\ のviewはテストデータを使って追加された投稿記事についての情報を表示"
"するはずです。作者としてログインしたときは、投稿記事を編集できるリンクがある"
"はずです。"

# bd551aa6f1b645ef9650c2f8ef5de09c
#: ../../tutorial/tests.rst:367
msgid ""
"You can also test some more authentication behavior while testing the "
"``index`` view. When not logged in, each page shows links to log in or "
"register. When logged in, there's a link to log out."
msgstr ""
"``index``\ のviewをテストしている間、さらにいくつかの認証の振舞を"
"テストできます。ログインしていないときは、各ページはログインまたは登録"
"へのリンクを表示します。ログインしていたときは、ログアウトへのリンクを"
"があります。"

# f4e9b7f0851d43bea477a3e081b4d05e
# 46ff0c90dabb405f91c7667265c47ff2
# a660f2b797b346a49ccf33ff9643145e
# 3f1d37a3e8e04f778d847819ae17e291
#: ../../tutorial/tests.rst:371 ../../tutorial/tests.rst:397
#: ../../tutorial/tests.rst:439 ../../tutorial/tests.rst:476
msgid "``tests/test_blog.py``"
msgstr ""

# 3f9c4dac514b4f50903eddaf8b86dd65
#: ../../tutorial/tests.rst:391
msgid ""
"A user must be logged in to access the ``create``, ``update``, and "
"``delete`` views. The logged in user must be the author of the post to "
"access ``update`` and ``delete``, otherwise a ``403 Forbidden`` status is"
" returned. If a ``post`` with the given ``id`` doesn't exist, ``update`` "
"and ``delete`` should return ``404 Not Found``."
msgstr ""
"ユーザは、\ ``create``, ``update``, ``delete``\ のviewへアクセスするには、"
"ログインしている必要があります。投稿記事の\ ``update``, ``delete``\ へ"
"アクセスするには、ログインしているユーザは作者である必要があり、そうでない"
"ときは\ ``403 Forbidden``\ ステータスが返されます。もし与えられた\ ``id``\ "
"の\ ``post``\ が存在しない場合は、\ ``update``\ と\ ``delete``\ は\ "
"``404 Not Found``\ を返すはずです。"

# b1732f383ed44e58b45861690871f9f8
#: ../../tutorial/tests.rst:433
msgid ""
"The ``create`` and ``update`` views should render and return a ``200 OK``"
" status for a ``GET`` request. When valid data is sent in a ``POST`` "
"request, ``create`` should insert the new post data into the database, "
"and ``update`` should modify the existing data. Both pages should show an"
" error message on invalid data."
msgstr ""
"``create``\ と\ ``update``\ のviewは\ ``GET``\ リクエストへ対応して表示し\ "
"``200 OK``\ を返すはずです。正しいデータが\ ``POST``\ リクエストで送られて"
"きたときは、\ ``create``\ は新しい投稿記事のデータをデータベースへ挿入し、\ "
"``update``\ は既存のデータを変更するはずです。どちらのページも不正なデータ"
"が送られてきたときはエラーメッセージを表示するはずです。"

# 152f03a1a0774dbb9cfa60e0bd8861c6
#: ../../tutorial/tests.rst:473
msgid ""
"The ``delete`` view should redirect to the index URL and the post should "
"no longer exist in the database."
msgstr ""
"``delete``\ のviewはindexのURLへリダイレクトするはずであり、データベースに"
"投稿記事はもはや存在しないはずです。"

# c77a6516e1324918b1dcf40cef36e494
#: ../../tutorial/tests.rst:491
msgid "Running the Tests"
msgstr "テストの実行"

# 528b912a114f42709a5cfca6aeab45b9
#: ../../tutorial/tests.rst:493
msgid ""
"Some extra configuration, which is not required but makes running tests "
"with coverage less verbose, can be added to the project's ``setup.cfg`` "
"file."
msgstr ""
"必要ではないですが、"
"coverage（訳注: テストツールの名前）を使ったテストを実行するとき、（テスト"
"メッセージの）出力が多過ぎないようにする、いくらかの追加設定をプロジェクト"
"の\ ``setup.cfg``\ ファイルへ加えます。"

# 56f0ff06e9da48d1ac5b190ff7452248
#: ../../tutorial/tests.rst:497
msgid "``setup.cfg``"
msgstr ""

# 6309e197cf294ba0b380671eaf2bc340
#: ../../tutorial/tests.rst:508
msgid ""
"To run the tests, use the ``pytest`` command. It will find and run all "
"the test functions you've written."
msgstr ""
"テストを実行するには、\ ``pytest``\ コマンドを使用します。それは、これ"
"まで書いたテスト関数をすべて見つけ出して実行します。"

# 475c369ef42c42d990e7d3a0c02cebba
#: ../../tutorial/tests.rst:527
msgid ""
"If any tests fail, pytest will show the error that was raised. You can "
"run ``pytest -v`` to get a list of each test function rather than dots."
msgstr ""
"もしも失敗したテストがあれば、pytestは発生したエラーを表示します。\ "
"``pytest -v``\ を実行すれば、ドット（「.」）が表示される代わりに、テスト"
"関数の一覧を取得できます。"

# 2e5ed924ad3142628f764cbaee79faaa
#: ../../tutorial/tests.rst:530
msgid ""
"To measure the code coverage of your tests, use the ``coverage`` command "
"to run pytest instead of running it directly."
msgstr ""
"テストのコード網羅性を測定するには、pytestを直接実行する代わりに\ "
"``coverage``\ コマンドを使用してpytestを実行します。"

# adcc546f06f344f6b9889b928e61f5db
#: ../../tutorial/tests.rst:537
msgid "You can either view a simple coverage report in the terminal:"
msgstr "簡潔な網羅性レポートを端末の中で見ることができます:"

# 4eee3830b860424d8010cb4814aeddec
#: ../../tutorial/tests.rst:552
msgid "An HTML report allows you to see which lines were covered in each file:"
msgstr ""
"HTMLレポートでは各ファイルのどの行がテストで網羅されているか見ることが"
"できます:"

# 3314bd1c2b39406ca6ff57b2af88be37
#: ../../tutorial/tests.rst:558
msgid ""
"This generates files in the ``htmlcov`` directory. Open "
"``htmlcov/index.html`` in your browser to see the report."
msgstr ""
"このコマンドは\ ``htmlcov``\ ディレクトリにファイルを生成します。この"
"レポートを見るには\ ``htmlcov/index.html``\ をブラウザで開きます。"

# fae859ab990f4382b8f56a877fb647a5
#: ../../tutorial/tests.rst:561
msgid "Continue to :doc:`deploy`."
msgstr ":doc:`deploy`\ へ続きます。"

