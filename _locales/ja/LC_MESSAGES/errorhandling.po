# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-21 20:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

# a875ccc78e6f4625a64ba8ebd52e5783
#: ../../flask/docs/errorhandling.rst:2
msgid "Handling Application Errors"
msgstr "アプリケーションのエラーの処理"

# aaf066c9ee164e79a528c2c570527934
#: ../../flask/docs/errorhandling.rst:4
msgid ""
"Applications fail, servers fail. Sooner or later you will see an "
"exception in production. Even if your code is 100% correct, you will "
"still see exceptions from time to time. Why? Because everything else "
"involved will fail. Here are some situations where perfectly fine code "
"can lead to server errors:"
msgstr ""
"アプリケーションには障害が発生し、サーバにも障害が発生します。遅かれ"
"早かれ、本番環境で例外（exception）が見つかるでしょう。もしコードが100%"
"正しいとしても、時には例外が見つかります。なぜでしょうか？コード以外の"
"関連する全てモノに障害が発生するためです。ここでは、完全によくできた"
"コードがサーバのエラーに至る状況をいくつか示します:"

# 285e029b8cc24fd0975e8249641d20c4
#: ../../flask/docs/errorhandling.rst:10
msgid ""
"the client terminated the request early and the application was still "
"reading from the incoming data"
msgstr "クライアントがリクエストを早いうちに終了させて、アプリケーションが受信データの読み取り中です"

# aaea8c12bafb4eb193b45e0fbda8d7c7
#: ../../flask/docs/errorhandling.rst:12
msgid "the database server was overloaded and could not handle the query"
msgstr "データベース・サーバが過負荷であり、問合せ（query）を処理できません"

# a5100876973d4c6bb630d734593ade17
#: ../../flask/docs/errorhandling.rst:13
msgid "a filesystem is full"
msgstr "ファイルシステムに空きがありません"

# cb1229a599b74f429b88300a8628acaa
#: ../../flask/docs/errorhandling.rst:14
msgid "a harddrive crashed"
msgstr "ハードドライブ（ハードディスク）がクラッシュしました"

# 01b5e3a3e71b4ad5a454d4632763f758
#: ../../flask/docs/errorhandling.rst:15
msgid "a backend server overloaded"
msgstr "背後（backend）のサーバが過負荷です"

# b2ad471731184167a89305fc742206d6
#: ../../flask/docs/errorhandling.rst:16
msgid "a programming error in a library you are using"
msgstr "使用しているライブラリにプログラムのエラーがあります"

# b2c3c4593de2482089262f32ffbe8eb0
#: ../../flask/docs/errorhandling.rst:17
msgid "network connection of the server to another system failed"
msgstr "サーバから他のシステムへのネットワーク接続に障害が発生しました"

# 10721206cc274416a14aff2e8c7bb2d9
#: ../../flask/docs/errorhandling.rst:19
msgid ""
"And that's just a small sample of issues you could be facing. So how do "
"we deal with that sort of problem? By default if your application runs in"
" production mode, and an exception is raised Flask will display a very "
"simple page for you and log the exception to the "
":attr:`~flask.Flask.logger`."
msgstr ""
"そして、これは直面するであろう問題の小さなサンプルでしかありません。では"
"このような問題にどう対処するのでしょうか？標準設定では、もしアプリケーション"
"が本番環境（production）モードで走っていて、例外が生じた場合、Flaskはとても"
"シンプルなページを表示し、 :attr:`~flask.Flask.logger` へ例外をログします。"

# b2f377030ee849a2a434442d22f9b78b
#: ../../flask/docs/errorhandling.rst:24
msgid ""
"But there is more you can do, and we will cover some better setups to "
"deal with errors including custom exceptions and 3rd party tools."
msgstr ""
"しかし、もっとできることがあり、独自の例外と3rd partyツールを含む、エラーを"
"処理するためのより良いいくつかの準備（setup）についてこの文書で扱います。"

# 3891696d55c64d0bab22dc7ed0665265
#: ../../flask/docs/errorhandling.rst:31
msgid "Error Logging Tools"
msgstr "エラーログ処理ツール"

# 71b7f5f7a52f49e7beece378eae0f2a7
#: ../../flask/docs/errorhandling.rst:33
msgid ""
"Sending error mails, even if just for critical ones, can become "
"overwhelming if enough users are hitting the error and log files are "
"typically never looked at. This is why we recommend using `Sentry "
"<https://sentry.io/>`_ for dealing with application errors. It's "
"available as a source-available project `on GitHub "
"<https://github.com/getsentry/sentry>`_ and is also available as a "
"`hosted version <https://sentry.io/signup/>`_ which you can try for free."
" Sentry aggregates duplicate errors, captures the full stack trace and "
"local variables for debugging, and sends you mails based on new errors or"
" frequency thresholds."
msgstr ""
"エラーメールを送信していると、たとえ非常に重大なものだけにした場合でも、"
"多くのユーザがエラーに当たると圧倒されるものになり、典型的にはログファイル"
"は見られなくなります。これが、アプリケーションのエラー処理のために"
" `Sentry <https://sentry.io/>`_ を勧める理由です。それは "
"`GitHub上 <https://github.com/getsentry/sentry>`_ でソース入手可能な"
"プロジェクトとして利用可能であり、無料で試すことのできる `ホストされた"
"バージョン <https://sentry.io/signup/>`_ としても利用可能です。Sentryは"
"重複するエラーを収集し、デバッグのためにスタックトレース全体とローカル"
"変数を捕捉し、そして新しいエラーであるか、もしくは閾値を超える頻度である"
"ことに基づいてメール送信します。"

# 666480a5278c4cae84d1382de89619d3
#: ../../flask/docs/errorhandling.rst:44
msgid ""
"To use Sentry you need to install the ``sentry-sdk`` client with extra "
"``flask`` dependencies."
msgstr ""
"Sentryを使うには、``sentry-sdk`` クライアントを、追加分の ``flask`` "
"依存対象と一緒にインストールする必要があります。"

# 1149606e1d854910ba3d28ad6a8c7ce4
#: ../../flask/docs/errorhandling.rst:51
msgid "And then add this to your Flask app:"
msgstr "そしてそれから、以下をFlaskのappに追加します:"

# a42b114764a6494899da531583ed6dd9
#: ../../flask/docs/errorhandling.rst:60
msgid ""
"The ``YOUR_DSN_HERE`` value needs to be replaced with the DSN value you "
"get from your Sentry installation."
msgstr ""
"``YOUR_DSN_HERE`` の値は、インストールしたSentryから得たDSNの値に置き"
"換える必要があります。"

# c2fa84fed3f94eaf904f690a5ab34057
#: ../../flask/docs/errorhandling.rst:63
msgid ""
"After installation, failures leading to an Internal Server Error are "
"automatically reported to Sentry and from there you can receive error "
"notifications."
msgstr "インストールの後、Internal Server Errorに至る障害は自動的にSentryへ報告され、そこからエラー通知を受け取ることができます。"

#: ../../flask/docs/errorhandling.rst:67
msgid "See also:"
msgstr ""

# 26275a08d2fa4d1e89a6f4d01d9124d9
#: ../../flask/docs/errorhandling.rst:69
msgid ""
"Sentry also supports catching errors from a worker queue (RQ, Celery, "
"etc.) in a similar fashion. See the `Python SDK docs "
"<https://docs.sentry.io/platforms/python/>`__ for more information."
msgstr ""
"Sentryは（RQ, Celery（訳注: RQ・Celeryともに、ジョブをキューに投入し、"
"ワーカーでキューからジョブを取り出して実行させる、ジョブキューのPythonの"
"ライブラリ）のような）ワーカーのキューでのエラーを同じように捕捉することも"
"サポートしています。さらなる情報は `Python SDKドキュメント "
"<https://docs.sentry.io/platforms/python/>`__ を見てください。"

# 0692bcc0c4894d97982510686ac348a1
#: ../../flask/docs/errorhandling.rst:72
msgid ""
"`Getting started with Sentry "
"<https://docs.sentry.io/quickstart/?platform=python>`__"
msgstr "`Sentry入門 <https://docs.sentry.io/quickstart/?platform=python>`__"

# a353059f243f436ba5e981610db276d6
#: ../../flask/docs/errorhandling.rst:73
msgid ""
"`Flask-specific documentation "
"<https://docs.sentry.io/platforms/python/guides/flask/>`__"
msgstr ""
"`Flask固有のドキュメント "
"<https://docs.sentry.io/platforms/python/guides/flask/>`__"

# af36f041daa54811ba60901d73a453d2
#: ../../flask/docs/errorhandling.rst:77
msgid "Error Handlers"
msgstr "エラー処理器（Error Handlers）"

#: ../../flask/docs/errorhandling.rst:79
msgid ""
"When an error occurs in Flask, an appropriate `HTTP status code "
"<https://developer.mozilla.org/en-US/docs/Web/HTTP/Status>`__ will be "
"returned. 400-499 indicate errors with the client's request data, or "
"about the data requested. 500-599 indicate errors with the server or "
"application itself."
msgstr ""

# 05ca80a2003346b5bc99adb44dab84a2
#: ../../flask/docs/errorhandling.rst:85
msgid ""
"You might want to show custom error pages to the user when an error "
"occurs. This can be done by registering error handlers."
msgstr "エラーが起きたとき、独自のエラーページを見せたいかもしれません。これは、error handlerを登録することで可能です。"

#: ../../flask/docs/errorhandling.rst:88
msgid ""
"An error handler is a function that returns a response when a type of "
"error is raised, similar to how a view is a function that returns a "
"response when a request URL is matched. It is passed the instance of the "
"error being handled, which is most likely a "
":exc:`~werkzeug.exceptions.HTTPException`."
msgstr ""

#: ../../flask/docs/errorhandling.rst:93
msgid ""
"The status code of the response will not be set to the handler's code. "
"Make sure to provide the appropriate HTTP status code when returning a "
"response from a handler."
msgstr ""

# e853d3e4feee488e83cf92cd75e25d6b
#: ../../flask/docs/errorhandling.rst:99
msgid "Registering"
msgstr "登録"

# eb825af47ef543e7b15f2b2036306145
#: ../../flask/docs/errorhandling.rst:101
msgid ""
"Register handlers by decorating a function with "
":meth:`~flask.Flask.errorhandler`. Or use "
":meth:`~flask.Flask.register_error_handler` to register the function "
"later. Remember to set the error code when returning the response."
msgstr ""
":meth:`~flask.Flask.errorhandler` を使って関数を修飾（decorating）して"
"handlerを登録します（訳注: Pythonのdecorator機能を使って登録します）。"
"または、:meth:`~flask.Flask.register_error_handler` を使って、後から"
"関数を登録します。レスポンスを返すときにはエラーコードを設定することを"
"覚えておいてください。"

# 4b350a309a1546cf81da3e0ffd4ea616
#: ../../flask/docs/errorhandling.rst:115
msgid ""
":exc:`werkzeug.exceptions.HTTPException` subclasses like "
":exc:`~werkzeug.exceptions.BadRequest` and their HTTP codes are "
"interchangeable when registering handlers. (``BadRequest.code == 400``)"
msgstr ""
":exc:`~werkzeug.exceptions.BadRequest`\\ のような\\ "
":exc:`werkzeug.exceptions.HTTPException`\\ "
"のサブクラスとそれらのHTTPコードは、handlerを登録するとき相互に交換可能です。（\\ ``BadRequest.code == "
"400``\\ ）"

# 99e9c340e42e49d881204eaebeb2b663
#: ../../flask/docs/errorhandling.rst:119
msgid ""
"Non-standard HTTP codes cannot be registered by code because they are not"
" known by Werkzeug. Instead, define a subclass of "
":class:`~werkzeug.exceptions.HTTPException` with the appropriate code and"
" register and raise that exception class."
msgstr ""
"非標準のHTTPコード（訳注: HTTPプロトコルの仕様に定義されていないHTTP"
"レスポンスコード）はWerkzeugで分からないため、コードによる登録ができません。"
"代わりに、適切なコードを使って :class:`~werkzeug.exceptions.HTTPException` "
"のサブクラスを定義し、そのクラス（とhandler）を登録し、その例外クラス（の"
"例外）を発生させます。"

# 3cf5f0edc29141309f7c7b44424b0105
#: ../../flask/docs/errorhandling.rst:134
msgid ""
"Handlers can be registered for any exception class, not just "
":exc:`~werkzeug.exceptions.HTTPException` subclasses or HTTP status "
"codes. Handlers can be registered for a specific class, or for all "
"subclasses of a parent class."
msgstr ""
"handlerは、\\ :exc:`~werkzeug.exceptions.HTTPException`\\ "
"サブクラスまたはHTTPステータスコードに対してだけでなく、どのような例外クラスに対しても登録可能です。handlerは特定のクラスに対しても、ある親クラスの全てのサブクラスに対しても、登録可能です。"

# 4b8f182f2327474fb3cdbe69bb480e50
#: ../../flask/docs/errorhandling.rst:141
msgid "Handling"
msgstr "処理（Handling）"

#: ../../flask/docs/errorhandling.rst:143
msgid ""
"When building a Flask application you *will* run into exceptions. If some"
" part of your code breaks while handling a request (and you have no error"
" handlers registered), a \"500 Internal Server Error\" "
"(:exc:`~werkzeug.exceptions.InternalServerError`) will be returned by "
"default. Similarly, \"404 Not Found\" "
"(:exc:`~werkzeug.exceptions.NotFound`) error will occur if a request is "
"sent to an unregistered route. If a route receives an unallowed request "
"method, a \"405 Method Not Allowed\" "
"(:exc:`~werkzeug.exceptions.MethodNotAllowed`) will be raised. These are "
"all subclasses of :class:`~werkzeug.exceptions.HTTPException` and are "
"provided by default in Flask."
msgstr ""

#: ../../flask/docs/errorhandling.rst:154
msgid ""
"Flask gives you to the ability to raise any HTTP exception registered by "
"Werkzeug. However, the default HTTP exceptions return simple exception "
"pages. You might want to show custom error pages to the user when an "
"error occurs. This can be done by registering error handlers."
msgstr ""

# 63c65fab3338406389bf44fa76b051db
#: ../../flask/docs/errorhandling.rst:159
msgid ""
"When Flask catches an exception while handling a request, it is first "
"looked up by code. If no handler is registered for the code, Flask looks "
"up the error by its class hierarchy; the most specific handler is chosen."
" If no handler is registered, :class:`~werkzeug.exceptions.HTTPException`"
" subclasses show a generic message about their code, while other "
"exceptions are converted to a generic \"500 Internal Server Error\"."
msgstr ""
"リクエストを処理しているときに例外がFlaskによって捕捉されたとき、handlerは"
"最初にコード（訳注: HTTPコードのことだと思います）によって検索されます。"
"もしコードに対するhandlerが登録されてない場合、Flaskはクラス階層によって"
"エラーを検索します; 最も具体的な（訳注: クラス階層上で最もサブクラス化"
"された）handlerが選ばれます。もしhandlerが登録されていない場合、"
":class:`~werkzeug.exceptions.HTTPException` のサブクラスはそのコードに"
"関する汎用的なメッセージを表示し、その他の例外は汎用的な「500 Internal "
"Server Error」へ変換されます。"

# 2a0ccea1479c43dc80915cc0298f2a46
#: ../../flask/docs/errorhandling.rst:165
msgid ""
"For example, if an instance of :exc:`ConnectionRefusedError` is raised, "
"and a handler is registered for :exc:`ConnectionError` and "
":exc:`ConnectionRefusedError`, the more specific "
":exc:`ConnectionRefusedError` handler is called with the exception "
"instance to generate the response."
msgstr ""
"例えば、もし\\ :exc:`ConnectionRefusedError`\\ のインスタンスが発生し、そして\\ "
":exc:`ConnectionError`\\ と\\ :exc:`ConnectionRefusedError`\\ "
"に対するhandlerが登録されていた場合、レスポンスを生成するために、最も具体的な\\ "
":exc:`ConnectionRefusedError`\\ のhandlerが例外のインスタンスを使って呼び出されます。"

# 4533431d0e274e1ca66872d9fefe3e6b
#: ../../flask/docs/errorhandling.rst:170
msgid ""
"Handlers registered on the blueprint take precedence over those "
"registered globally on the application, assuming a blueprint is handling "
"the request that raises the exception. However, the blueprint cannot "
"handle 404 routing errors because the 404 occurs at the routing level "
"before the blueprint can be determined."
msgstr ""
"blueprintに登録されたhandlerは、blueprintが例外を発生させたリクエストを処理することを仮定して、アプリケーションでグローバルに登録されたものよりも優先されます。しかしながら、404エラーはblueprintが決定される前の経路決定（routing）のレベルで起こるため、blueprintでは404"
" routing errorは処理できません。"

# 851bb6d470df4053a1b398338a8edaa1
#: ../../flask/docs/errorhandling.rst:178
msgid "Generic Exception Handlers"
msgstr "汎用の例外の処理器（Generic Exception Handlers）"

# 88d05982f4064894a5f13cb67bb1a868
#: ../../flask/docs/errorhandling.rst:180
msgid ""
"It is possible to register error handlers for very generic base classes "
"such as ``HTTPException`` or even ``Exception``. However, be aware that "
"these will catch more than you might expect."
msgstr ""
"非常に汎用的な基底クラスへ対して、例えば\\ ``HTTPException``\\ または\\ ``Exception``\\ "
"にさえ、error "
"handlerを登録することができます。しかしながら、これらはおそらくあなたが予想するよりも多くのものを捕捉するであろうことに注意してください。"

# 631a5bd940a840888bc8a28befc6baba
#: ../../flask/docs/errorhandling.rst:184
msgid ""
"For example, an error handler for ``HTTPException`` might be useful for "
"turning the default HTML errors pages into JSON. However, this handler "
"will trigger for things you don't cause directly, such as 404 and 405 "
"errors during routing. Be sure to craft your handler carefully so you "
"don't lose information about the HTTP error."
msgstr ""
"例えば、``HTTPException`` に対するerror handlerは、標準のHTMLエラーページを"
"JSONへ変換するには便利かもしれません。しかしながら、このhandlerは、例えば"
"経路決定（routing）のときの404と405エラーのように、あなたが直接引き起こさ"
"ないものに対しても発動するでしょう。HTTPエラーに関する情報を失わないように、"
"自分のhandlerは必ず注意して作り上げるようにしてください。"

# ad3fc7887516438088ba57745906f141
#: ../../flask/docs/errorhandling.rst:209
msgid ""
"An error handler for ``Exception`` might seem useful for changing how all"
" errors, even unhandled ones, are presented to the user. However, this is"
" similar to doing ``except Exception:`` in Python, it will capture *all* "
"otherwise unhandled errors, including all HTTP status codes."
msgstr ""
"``Exception`` に対するerror handlerは、全てのエラー、処理されてないもの"
"さえも、ユーザへどのように表示するかを変更するには便利にみえるかもしれま"
"せん。しかしながら、これはPythonで ``except Exception:`` を行うことと似た"
"ものであり、それは、さもなければ処理されないエラーを *全て* 、HTTPステータス"
"コードを含めて、捕捉するでしょう。"

#: ../../flask/docs/errorhandling.rst:215
msgid ""
"In most cases it will be safer to register handlers for more specific "
"exceptions. Since ``HTTPException`` instances are valid WSGI responses, "
"you could also pass them through directly."
msgstr ""
"殆どの場合、より具体的な例外に対するhandlerを登録する方がより安全です。"
"``HTTPException`` のインスタンスは正当なWSGIレスポンスなので、それらを直接"
"そのまま渡すことも可能です。"

# 9694712d77ff4d0a801665d2f80d46d3
#: ../../flask/docs/errorhandling.rst:232
msgid ""
"Error handlers still respect the exception class hierarchy. If you "
"register handlers for both ``HTTPException`` and ``Exception``, the "
"``Exception`` handler will not handle ``HTTPException`` subclasses "
"because it the ``HTTPException`` handler is more specific."
msgstr ""
"error handlerでも例外のクラス階層を尊重します。もし\\ ``HTTPException``\\ と\\ "
"``Exception``\\ の両方に対してhandlerを登録した場合、``HTTPException``\\ "
"のhandlerの方がより具体的であるため、\\ ``Exception``\\ のhandlerは\\ ``HTTPException``\\ "
"サブクラスを処理しません。"

# f639dfa2de3d4848ab87371fec358016
#: ../../flask/docs/errorhandling.rst:239
msgid "Unhandled Exceptions"
msgstr "処理されなかった例外（Unhandled Exceptions）"

# 19ec5dd6111343fdb3d0abdde95e9d3d
#: ../../flask/docs/errorhandling.rst:241
msgid ""
"When there is no error handler registered for an exception, a 500 "
"Internal Server Error will be returned instead. See "
":meth:`flask.Flask.handle_exception` for information about this behavior."
msgstr ""
"例外に対してerror handlerが登録されていないとき、500 Internal Server "
"Errorが代わりに返されます。この振る舞いに関する情報については\\ "
":meth:`flask.Flask.handle_exception`\\ を見てください。"

# 6445bfe8aff34a4d82ddfa44fdbc4f5f
#: ../../flask/docs/errorhandling.rst:246
msgid ""
"If there is an error handler registered for ``InternalServerError``, this"
" will be invoked. As of Flask 1.1.0, this error handler will always be "
"passed an instance of ``InternalServerError``, not the original unhandled"
" error."
msgstr ""
"``InternalServerError`` に対してerror handlerが登録されていた場合、これが"
"呼び起されます。Flask 1.1.0以降、このerror handlerにはオリジナルの処理され"
"なかったエラーではなく、常に ``InternalServerError`` のインスタンスが渡され"
"ます。"

#: ../../flask/docs/errorhandling.rst:251
msgid "The original error is available as ``e.original_exception``."
msgstr ""
"オリジナルのエラーは ``e.original_exception`` として利用可能です。"

#: ../../flask/docs/errorhandling.rst:253
msgid ""
"An error handler for \"500 Internal Server Error\" will be passed "
"uncaught exceptions in addition to explicit 500 errors. In debug mode, a "
"handler for \"500 Internal Server Error\" will not be used. Instead, the "
"interactive debugger will be shown."
msgstr ""

#: ../../flask/docs/errorhandling.rst:260
msgid "Custom Error Pages"
msgstr ""

#: ../../flask/docs/errorhandling.rst:262
msgid ""
"Sometimes when building a Flask application, you might want to raise a "
":exc:`~werkzeug.exceptions.HTTPException` to signal to the user that "
"something is wrong with the request. Fortunately, Flask comes with a "
"handy :func:`~flask.abort` function that aborts a request with a HTTP "
"error from werkzeug as desired. It will also provide a plain black and "
"white error page for you with a basic description, but nothing fancy."
msgstr ""

#: ../../flask/docs/errorhandling.rst:269
msgid ""
"Depending on the error code it is less or more likely for the user to "
"actually see such an error."
msgstr ""

#: ../../flask/docs/errorhandling.rst:272
msgid ""
"Consider the code below, we might have a user profile route, and if the "
"user fails to pass a username we can raise a \"400 Bad Request\". If the "
"user passes a username and we can't find it, we raise a \"404 Not "
"Found\"."
msgstr ""

#: ../../flask/docs/errorhandling.rst:296
msgid ""
"Here is another example implementation for a \"404 Page Not Found\" "
"exception:"
msgstr ""

#: ../../flask/docs/errorhandling.rst:307
#: ../../flask/docs/errorhandling.rst:361
msgid "When using :doc:`/patterns/appfactories`:"
msgstr ""

#: ../../flask/docs/errorhandling.rst:321
msgid "An example template might be this:"
msgstr ""

#: ../../flask/docs/errorhandling.rst:335
msgid "Further Examples"
msgstr ""

#: ../../flask/docs/errorhandling.rst:337
msgid ""
"The above examples wouldn't actually be an improvement on the default "
"exception pages. We can create a custom 500.html template like this:"
msgstr ""

#: ../../flask/docs/errorhandling.rst:350
msgid ""
"It can be implemented by rendering the template on \"500 Internal Server "
"Error\":"
msgstr ""

#: ../../flask/docs/errorhandling.rst:375
msgid "When using :doc:`/blueprints`:"
msgstr ""

# af36f041daa54811ba60901d73a453d2
#: ../../flask/docs/errorhandling.rst:393
msgid "Blueprint Error Handlers"
msgstr "ブループリントのエラー処理器（Blueprint Error Handlers）"

#: ../../flask/docs/errorhandling.rst:395
msgid ""
"In :doc:`/blueprints`, most error handlers will work as expected. "
"However, there is a caveat concerning handlers for 404 and 405 "
"exceptions. These error handlers are only invoked from an appropriate "
"``raise`` statement or a call to ``abort`` in another of the blueprint's "
"view functions; they are not invoked by, e.g., an invalid URL access."
msgstr ""

#: ../../flask/docs/errorhandling.rst:401
msgid ""
"This is because the blueprint does not \"own\" a certain URL space, so "
"the application instance has no way of knowing which blueprint error "
"handler it should run if given an invalid URL. If you would like to "
"execute different handling strategies for these errors based on URL "
"prefixes, they may be defined at the application level using the "
"``request`` proxy object."
msgstr ""

#: ../../flask/docs/errorhandling.rst:436
msgid "Returning API Errors as JSON"
msgstr ""

#: ../../flask/docs/errorhandling.rst:438
msgid ""
"When building APIs in Flask, some developers realise that the built-in "
"exceptions are not expressive enough for APIs and that the content type "
"of :mimetype:`text/html` they are emitting is not very useful for API "
"consumers."
msgstr ""

#: ../../flask/docs/errorhandling.rst:442
msgid ""
"Using the same techniques as above and :func:`~flask.json.jsonify` we can"
" return JSON responses to API errors.  :func:`~flask.abort` is called "
"with a ``description`` parameter. The error handler will use that as the "
"JSON error message, and set the status code to 404."
msgstr ""

#: ../../flask/docs/errorhandling.rst:464
msgid ""
"We can also create custom exception classes. For instance, we can "
"introduce a new custom exception for an API that can take a proper human "
"readable message, a status code for the error and some optional payload "
"to give more context for the error."
msgstr ""

#: ../../flask/docs/errorhandling.rst:469
msgid "This is a simple example:"
msgstr ""

#: ../../flask/docs/errorhandling.rst:508
msgid ""
"A view can now raise that exception with an error message. Additionally "
"some extra payload can be provided as a dictionary through the `payload` "
"parameter."
msgstr ""

# 95b922e803d34a46855e9ce92c73848e
#: ../../flask/docs/errorhandling.rst:514
msgid "Logging"
msgstr "ログ処理（Logging）"

# 9a220a932e2342798f69f538693563a7
#: ../../flask/docs/errorhandling.rst:516
msgid ""
"See :doc:`/logging` for information about how to log exceptions, such as "
"by emailing them to admins."
msgstr ""
"どのように例外をログするか、例えば管理者へメールするなど、についての"
"情報は :doc:`/logging` を見てください。"

# 95b922e803d34a46855e9ce92c73848e
#: ../../flask/docs/errorhandling.rst:521
msgid "Debugging"
msgstr "デバッグ処理（Debugging）"

#: ../../flask/docs/errorhandling.rst:523
msgid ""
"See :doc:`/debugging` for information about how to debug errors in "
"development and production."
msgstr ""

# 3e190b72b8a84bca9376b6306cbc7f92
#~ msgid "Application Errors"
#~ msgstr "アプリケーションのエラー"

# a00a426e6b614343ae874343847e5a2c
#~ msgid "Follow-up reads:"
#~ msgstr "さらに追いかけるときに読むもの:"

# 87eaf88a3de540f0867f0411bdc57b01
#~ msgid ""
#~ "An error handler is a normal view"
#~ " function that returns a response, "
#~ "but instead of being registered for "
#~ "a route, it is registered for an"
#~ " exception or HTTP status code that"
#~ " would be raised while trying to "
#~ "handle a request."
#~ msgstr ""
#~ "error "
#~ "handlerはレスポンスを返す普通のview関数ですが、経路（route）に対して登録する代わりに、リクエストを処理しようと試みるときに発生することがある例外またはHTTPステータスコードに対して登録します。"

# a0d8703c6e624d04a06c0e1072867113
#~ msgid ""
#~ "For production applications, configure your"
#~ " application with logging and notifications"
#~ " as described in :ref:`application-errors`."
#~ "  This section provides pointers when "
#~ "debugging deployment configuration and digging"
#~ " deeper with a full-featured Python"
#~ " debugger."
#~ msgstr ""
#~ "本番環境のアプリケーションでは、\\ :ref:`application-errors`\\ "
#~ "で記述されているようにログ処理と通知を使って、自分のアプリケーションを設定してください。このセクションは、デプロイの設定をデバッグし、機能の揃ったPythonのデバッガでより深く掘り下げるときのポインタを提供します。"

# 1c0d1a855ee44ad1a38e1524918b33c5
#~ msgid "When in Doubt, Run Manually"
#~ msgstr "疑わしいときは、手で実行してください"

# 99c92cfcefe94b749b5c04912ae6f41a
#~ msgid ""
#~ "Having problems getting your application "
#~ "configured for production?  If you have"
#~ " shell access to your host, verify"
#~ " that you can run your application"
#~ " manually from the shell in the "
#~ "deployment environment.  Be sure to run"
#~ " under the same user account as "
#~ "the configured deployment to troubleshoot "
#~ "permission issues.  You can use Flask's"
#~ " builtin development server with "
#~ "`debug=True` on your production host, "
#~ "which is helpful in catching "
#~ "configuration issues, but **be sure to"
#~ " do this temporarily in a controlled"
#~ " environment.** Do not run in "
#~ "production with `debug=True`."
#~ msgstr ""
#~ "本番環境用に自分のアプリケーションを設定するのに問題を抱えていますか？もしホスト（コンピュータのこと）のシェルにアクセスできる場合、自分のアプリケーションを、デプロイされている環境のシェルから手で実行できるか確かめてください。権限の問題を解決するために、必ずデプロイの設定と同じユーザアカウントのもとで実行してください。Flaskの組込まれた開発サーバを\\"
#~ " `debug=True`\\ を使って本番環境のホストで使用することが可能で、それは設定の問題を捕捉するには役立ちますが、\\ "
#~ "**必ず制御された環境の中で一時的に実行してください。**\\ 本番環境では\\ `debug=True`\\ を使って実行しないでください。"

# 04a47fe20a5547da8e528f59b3d20e3a
#~ msgid "Working with Debuggers"
#~ msgstr "デバッガを使った作業"

# 44ceccacb1e7463b96c0905ba918115a
#~ msgid ""
#~ "To dig deeper, possibly to trace "
#~ "code execution, Flask provides a "
#~ "debugger out of the box (see :ref"
#~ ":`debug-mode`).  If you would like to"
#~ " use another Python debugger, note "
#~ "that debuggers interfere with each "
#~ "other.  You have to set some "
#~ "options in order to use your "
#~ "favorite debugger:"
#~ msgstr ""
#~ "より深く掘り下げるために、例えばコードの実行をトレースするために、Flaskは最初からデバッガを提供しています（\\ :ref:`debug-"
#~ "mode`\\ "
#~ "を見てください）。もし別のPythonデバッガを使いたい場合、デバッガはそれぞれ干渉し合うことに注意してください。自分の好きなデバッガを使うためにはいくつかのオプションを設定する必要があります:"

# 67157ba8e4314fb58bb1a46903a93d22
#~ msgid "``debug``        - whether to enable debug mode and catch exceptions"
#~ msgstr "``debug``              - デバッグモードを有効にして例外を捕捉するかどうか"

# 626f1f104e3646db9d581b2e14abebea
#~ msgid "``use_debugger`` - whether to use the internal Flask debugger"
#~ msgstr "``use_debugger`` - 内部のFlaskデバッガを使うかどうか"

# 4b6d4a23856c4f979786a48c19f082ec
#~ msgid ""
#~ "``use_reloader`` - whether to reload and"
#~ " fork the process if modules were "
#~ "changed"
#~ msgstr ""
#~ "``use_reloader`` - "
#~ "moduleが変更されたとき、再読み込みしてプロセスをforkするか（新しくプロセスを作成するか）どうか"

# 45ddb3bd7924495585a27edfb77fabbe
#~ msgid ""
#~ "``debug`` must be True (i.e., exceptions"
#~ " must be caught) in order for "
#~ "the other two options to have any"
#~ " value."
#~ msgstr "``debug``\\ は、他の2つのオプションが何かしら値を持つためには、Trueにする必要が（つまり、例外を捕捉する必要が）あります。"

# 14fe729e77fe4e4b8618af0519567846
#~ msgid ""
#~ "If you're using Aptana/Eclipse for "
#~ "debugging you'll need to set both "
#~ "``use_debugger`` and ``use_reloader`` to "
#~ "False."
#~ msgstr ""
#~ "もしAptana/Eclipseをデバッグに使用している場合、\\ ``use_debugger``\\ と\\ "
#~ "``use_reloader``\\ の両方をFalseに設定する必要があります。"

# c5ef089bd44f439aa53840d500656168
#~ msgid ""
#~ "A possible useful pattern for "
#~ "configuration is to set the following"
#~ " in your config.yaml (change the "
#~ "block as appropriate for your "
#~ "application, of course)::"
#~ msgstr "設定のために役に立つあり得るパターンは、config.yamlに以下を設定することです（もちろん、自分のアプリケーションに適切なようにブロックを変更してください）::"

# 259418463ae8483e8718d09cabb15a2b
#~ msgid ""
#~ "Then in your application's entry-point"
#~ " (main.py), you could have something "
#~ "like::"
#~ msgstr "それから、自分のアプリケーションの開始地点（main.py）の中で、以下のようなものを持つことができます::"

