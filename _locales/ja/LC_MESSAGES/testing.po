# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.2.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-26 22:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

# c3aaedfb657f4184886111da24a85674
#: ../../flask/docs/testing.rst:2
msgid "Testing Flask Applications"
msgstr "Flaskアプリケーションのテスト"

#: ../../flask/docs/testing.rst:4
msgid ""
"Flask provides utilities for testing an application. This documentation "
"goes over techniques for working with different parts of the application "
"in tests."
msgstr ""
"Flaskはアプリケーションをテストするユーティリティを提供します。このドキュ"
"メントはテストの中でアプリケーションの異なる部分で作業するための技法を扱い"
"ます。"

#: ../../flask/docs/testing.rst:8
msgid "We will use the `pytest`_ framework to set up and run our tests."
msgstr ""
"ここではテストを準備し走らせるために `pytest`_ フレームワークを使います。"

#: ../../flask/docs/testing.rst:16
#, python-format
msgid ""
"The :doc:`tutorial </tutorial/index>` goes over how to write tests for "
"100% coverage of the sample Flaskr blog application. See :doc:`the "
"tutorial on tests </tutorial/tests>` for a detailed explanation of "
"specific tests for an application."
msgstr ""
":doc:`チュートリアル </tutorial/index>` はサンプルのブログのアプリケーション"
"であるFlaskrに対して100%の網羅率のテストをどのように書くかを扱います。アプリ"
"ケーション用の特定のテストの詳細な説明は、:doc:`テストのチュートリアル "
"</tutorial/tests>` を見てください。"

#: ../../flask/docs/testing.rst:23
msgid "Identifying Tests"
msgstr "テストの特定"

#: ../../flask/docs/testing.rst:25
msgid ""
"Tests are typically located in the ``tests`` folder. Tests are functions "
"that start with ``test_``, in Python modules that start with ``test_``. "
"Tests can also be further grouped in classes that start with ``Test``."
msgstr ""
"テストは典型的には ``tests`` フォルダに置かれます。テストは ``tests_`` から"
"始まる関数で、``test_`` から始まるPythonモジュール中にあります。さらにテスト"
"は ``Test`` で始まるクラスの中にグループ化できます。"

#: ../../flask/docs/testing.rst:29
msgid ""
"It can be difficult to know what to test. Generally, try to test the code"
" that you write, not the code of libraries that you use, since they are "
"already tested. Try to extract complex behaviors as separate functions to"
" test individually."
msgstr ""
"何をテストするか知るのは難しいことがあります。大概は、自分で書いたコードを"
"テストしようと試み、使用するライブラリのコードは既にテストされているため"
"試みません。複雑な振る舞いは、個別にテストするために分かれた関数として取り"
"出すことを試みます。"

#: ../../flask/docs/testing.rst:36
msgid "Fixtures"
msgstr "据え付け品（Fixtures）"

#: ../../flask/docs/testing.rst:38
msgid ""
"Pytest *fixtures* allow writing pieces of code that are reusable across "
"tests. A simple fixture returns a value, but a fixture can also do setup,"
" yield a value, then do teardown. Fixtures for the application, test "
"client, and CLI runner are shown below, they can be placed in "
"``tests/conftest.py``."
msgstr ""
"Pytestの *fixture* はテストで再利用できるコードの断片を書けるようにします。"
"シンプルなfixtureは値を返しますが、fixtureは準備（setup）をし、値を生成"
"（yield）し、それから取り壊す（teardown）こともできます。アプリケーション、"
"テストのクライアント、CLIの実行プログラム用のfixtureが、以下に示されており、"
"それらは ``tests/conftest.py`` に置くことができます。"

#: ../../flask/docs/testing.rst:44
msgid ""
"If you're using an :doc:`application factory </patterns/appfactories>`, "
"define an ``app`` fixture to create and configure an app instance. You "
"can add code before and after the ``yield`` to set up and tear down other"
" resources, such as creating and clearing a database."
msgstr ""
"もし :doc:`アプリケーションの製造工場（factory） </patterns/appfactories>` "
"を使っている場合、appのインスタンスを作成し設定するための ``app`` のfixture"
"（訳注: 以下の例の ``app`` 関数のこと）を定義します。データベースの作成と消去"
"のように、他のリソースの準備（set up）と取り壊し（tear down）のために、"
"``yield`` の前後にコードを加えることができます。"

#: ../../flask/docs/testing.rst:50
msgid ""
"If you're not using a factory, you already have an app object you can "
"import and configure directly. You can still use an ``app`` fixture to "
"set up and tear down resources."
msgstr ""
"もしfactoryを使っていない場合、あなたは既にimportして直接設定できるappオブ"
"ジェクトを持っているでしょう。それでも、リソースのset upおよびtear downの"
"ために ``app`` のfixtureを使うことができます。"

#: ../../flask/docs/testing.rst:84
msgid "Sending Requests with the Test Client"
msgstr "テスト用クライアントを使ったリクエストの送信"

#: ../../flask/docs/testing.rst:86
msgid ""
"The test client makes requests to the application without running a live "
"server. Flask's client extends :doc:`Werkzeug's client <werkzeug:test>`, "
"see those docs for additional information."
msgstr ""
"テスト用クライアントは実際のサーバを走らせずにアプリケーションへのリクエスト"
"を作成します。Flaskのクライアントは :doc:`Werkzeugのクライアント "
"<werkzeug:test>` を拡張しており、追加情報はWerkzeugのドキュメントを見てくだ"
"さい。"

#: ../../flask/docs/testing.rst:91
#| msgid "" "The ``client`` has methods that match the common HTTP request
#| methods, " "such as ``client.get()`` and ``client.post()``. They take many
#| arguments " "for building the request; you can find the full documentation
#| in " ":class:`~werkzeug.test.EnvironBuilder`. Typically you'll use ``path``,
#| " "``query``, ``headers``, and ``data`` or ``json``."
msgid ""
"The ``client`` has methods that match the common HTTP request methods, "
"such as ``client.get()`` and ``client.post()``. They take many arguments "
"for building the request; you can find the full documentation in "
":class:`~werkzeug.test.EnvironBuilder`. Typically you'll use ``path``, "
"``query_string``, ``headers``, and ``data`` or ``json``."
msgstr ""
"``client`` は、``client.get()`` や ``client.post()`` のように、一般的なHTTP"
"リクエストのメソッドに合致するメソッドを持っています。それらはリクエストを"
"構築するために多くの引数を取ります: 全てのドキュメントは :class:"
"`~werkzeug.test.EnvironBuilder` で見つけることができます。典型的には、"
"``path``、``query_string``、``headers``、そして ``data`` または ``json`` を"
"引数で使うでしょう。"

#: ../../flask/docs/testing.rst:97
msgid ""
"To make a request, call the method the request should use with the path "
"to the route to test. A :class:`~werkzeug.test.TestResponse` is returned "
"to examine the response data. It has all the usual properties of a "
"response object. You'll usually look at ``response.data``, which is the "
"bytes returned by the view. If you want to use text, Werkzeug 2.1 "
"provides ``response.text``, or use ``response.get_data(as_text=True)``."
msgstr ""
"リクエストを作成するときは、テストする経路（route）へのpathと一緒に、"
"リクエストが使うはずのメソッドを呼び出します。レスポンスのデータを調べる"
"ために :class:`~werkzeug.test.TestResponse` が返されます。それはレスポンス"
"のオブジェクトの通常の属性（properties）をすべて持っています。普通は、view"
"により返されるbytesである、``response.data`` を調べるでしょう。もしテキスト"
"を使いたいときは、Werkzeug 2.1は ``response.text`` を提供しており、または "
"``response.get_data(as_text=True)`` を使いましょう。"

#: ../../flask/docs/testing.rst:111
#| msgid "" "Pass a dict ``query={\"key\": \"value\", ...}`` to set arguments
#| in the " "query string (after the ``?`` in the URL). Pass a dict
#| ``headers={}`` to " "set request headers."
msgid ""
"Pass a dict ``query_string={\"key\": \"value\", ...}`` to set arguments "
"in the query string (after the ``?`` in the URL). Pass a dict "
"``headers={}`` to set request headers."
msgstr ""
"query string（URLの ``?`` の後）の中の引数を設定するには、dictを "
"``query_string={\"key\": \"value\", ...}`` のように引数で渡します。リクエ"
"ストのヘッダーを設定するには、dictを ``headers={}`` のように引数で渡します。"

#: ../../flask/docs/testing.rst:115
msgid ""
"To send a request body in a POST or PUT request, pass a value to "
"``data``. If raw bytes are passed, that exact body is used. Usually, "
"you'll pass a dict to set form data."
msgstr ""
"POSTまたはPUTリクエストの中でリクエストのbodyを送るには、``data`` 引数に値"
"を渡します。もし手を加えていないbytes（raw bytes）を渡された場合、そのままの"
"bodyが使われます。普通はformのデータを設定するにはdictを渡すでしょう。"

#: ../../flask/docs/testing.rst:121
msgid "Form Data"
msgstr "Formのデータ"

#: ../../flask/docs/testing.rst:123
msgid ""
"To send form data, pass a dict to ``data``. The ``Content-Type`` header "
"will be set to ``multipart/form-data`` or ``application/x-www-form-"
"urlencoded`` automatically."
msgstr ""
"formのデータを渡すには、``data`` 引数にdictを渡します。``Content-Type`` "
"ヘッダーは ``multipart/form-data`` または ``application/"
"x-www-form-urlencoded`` へ自動的に設定されるでしょう。"

#: ../../flask/docs/testing.rst:127
msgid ""
"If a value is a file object opened for reading bytes (``\"rb\"`` mode), "
"it will be treated as an uploaded file. To change the detected filename "
"and content type, pass a ``(file, filename, content_type)`` tuple. File "
"objects will be closed after making the request, so they do not need to "
"use the usual ``with open() as f:`` pattern."
msgstr ""
"もし値（訳注: data引数に渡されたdictに含まれる値）がbytesを読み取るために"
"開かれたfileオブジェクト（``\"rb\"`` モード）の場合、それはアップロードされた"
"ファイルとして扱われます。検知されたファイル名とcontent typeを変更するには、"
"tupleの ``(file, filename, content_type)`` を渡します（訳注: 「``file: "
"(open(filename, \"rb\"), filename, content_type)``」のように、dict内の"
"アイテムで該当するtupleを値に設定します）。Fileオブジェクトは、通常の "
"``with open() as f:`` パターンを使う必要が無いように、リクエストを作成した"
"後に閉じられます。"

#: ../../flask/docs/testing.rst:133
msgid ""
"It can be useful to store files in a ``tests/resources`` folder, then use"
" ``pathlib.Path`` to get files relative to the current test file."
msgstr ""
"（以下のコード例のように）``tests/resources`` フォルダにファイルを格納し、"
"それから ``pathlib.path`` を使ってそのときのテストのファイルから相対的に"
"（相対パスで）ファイルを取得できると、便利な場合があります。"

#: ../../flask/docs/testing.rst:153
msgid "JSON Data"
msgstr "JSONのデータ"

#: ../../flask/docs/testing.rst:155
msgid ""
"To send JSON data, pass an object to ``json``. The ``Content-Type`` "
"header will be set to ``application/json`` automatically."
msgstr ""
"JSONのデータを送るには、``json`` 引数にオブジェクトを渡します。"
"``Content-Type`` ヘッダーは自動的に ``application/json`` に設定されます。"

#: ../../flask/docs/testing.rst:158
msgid ""
"Similarly, if the response contains JSON data, the ``response.json`` "
"attribute will contain the deserialized object."
msgstr ""
"同様に、もしレスポンスがJSONのデータを含む場合、``response.json`` 属性は"
"シリアライズを元に戻したオブジェクトが含まれます。"

#: ../../flask/docs/testing.rst:180
msgid "Following Redirects"
msgstr "リダイレクトのフォロー"

#: ../../flask/docs/testing.rst:182
msgid ""
"By default, the client does not make additional requests if the response "
"is a redirect. By passing ``follow_redirects=True`` to a request method, "
"the client will continue to make requests until a non-redirect response "
"is returned."
msgstr ""
"標準設定では、クライアントはレスポンスが転送（redirect）である場合に追加の"
"リクエストを作成はしません。``follow_redirects=True`` をリクエストの"
"メソッドに渡すことで（訳注: 「``client.get(path, follow_redirects=True)``」"
"など、テスト用クライアントがリクエストを作成するメソッドの引数に渡すこと"
"で）、クライアントは転送されない（non-redirect）レスポンスが返されるまで"
"リクエストを作成し続けます。"

#: ../../flask/docs/testing.rst:187
msgid ""
":attr:`TestResponse.history <werkzeug.test.TestResponse.history>` is a "
"tuple of the responses that led up to the final response. Each response "
"has a :attr:`~werkzeug.test.TestResponse.request` attribute which records"
" the request that produced that response."
msgstr ""
":attr:`TestResponse.history <werkzeug.test.TestResponse.history>` 属性は最後"
"のレスポンスに至るまでのレスポンスのtupleです。各レスポンスは、そのレス"
"ポンスを生成したリクエストを記録している :attr:"
"`~werkzeug.test.TestResponse.request` 属性を持ちます。"

# 262bfb979b194173810f94038be60a33
# | msgid "Accessing and Modifying Sessions"
#: ../../flask/docs/testing.rst:203
msgid "Accessing and Modifying the Session"
msgstr "セッションに対するアクセスと変更"

#: ../../flask/docs/testing.rst:205
msgid ""
"To access Flask's context variables, mainly :data:`~flask.session`, use "
"the client in a ``with`` statement. The app and request context will "
"remain active *after* making a request, until the ``with`` block ends."
msgstr ""
"Flaskのコンテキストの変数、主に :data:`~flask.session`、へアクセスするには"
" ``with`` 文の中でクライアントを使います（訳注: コンテキストの変数は、実体"
"が :doc:`/appcontext` および :doc:`/reqcontext` に格納され、主にcurrent_app"
"やgなどの代理になるオブジェクトによりモジュール内でグローバルなスコープで"
"アクセスできるもののような意味合い）。appとrequestのcontextは、``with`` "
"ブロックを終了するまで、リクエストを作成した *後* も活動状態（active）の"
"まま残ります。"

#: ../../flask/docs/testing.rst:222
msgid ""
"If you want to access or set a value in the session *before* making a "
"request, use the client's "
":meth:`~flask.testing.FlaskClient.session_transaction` method in a "
"``with`` statement. It returns a session object, and will save the "
"session once the block ends."
msgstr ""
"もしリクエストを作成する *前* にセッション内のデータに対してアクセスまたは"
"設定したい場合、クライアントの :meth:"
"`~flask.testing.FlaskClient.session_transaciton` メソッドを ``with`` 文の"
"中で使用します。それはsessionオブジェクトを返し、withブロックが終わると"
"sessionを保存します。"

#: ../../flask/docs/testing.rst:246
msgid "Running Commands with the CLI Runner"
msgstr "CLI実行プログラムを使ったコマンドの実行"

#: ../../flask/docs/testing.rst:248
msgid ""
"Flask provides :meth:`~flask.Flask.test_cli_runner` to create a "
":class:`~flask.testing.FlaskCliRunner`, which runs CLI commands in "
"isolation and captures the output in a :class:`~click.testing.Result` "
"object. Flask's runner extends :doc:`Click's runner <click:testing>`, see"
" those docs for additional information."
msgstr ""
"Flaskは :class:`~flask.testing.FlaskCliRunner` を作成する :meth:"
"`~flask.Flask.test_cli_runner` を提供し、それはCLIコマンドを隔離して走らせ"
"出力を :class:`~click.testing.Result` オブジェクトの中に捉えます。Flaskの"
"CLI実行プログラムは :doc:`Clickのテスト用CLI実行プログラム <click:testing>` "
"を拡張したものであり、追加情報はそのドキュメントを見てください。"

#: ../../flask/docs/testing.rst:254
msgid ""
"Use the runner's :meth:`~flask.testing.FlaskCliRunner.invoke` method to "
"call commands in the same way they would be called with the ``flask`` "
"command from the command line."
msgstr ""
"コマンドラインから ``flask`` コマンドを使って呼び出された場合と同じように"
"コマンドを呼び出すには、CLI実行プログラムの :meth:"
"`~flask.testing.FlaskCliRunner.invoke` メソッドを使用します。"

#: ../../flask/docs/testing.rst:276
msgid "Tests that depend on an Active Context"
msgstr "活動状態（active）なコンテキストに依存したテスト（Tests that depend on an Active Context）"

#: ../../flask/docs/testing.rst:278
msgid ""
"You may have functions that are called from views or commands, that "
"expect an active :doc:`application context </appcontext>` or "
":doc:`request context  </reqcontext>` because they access ``request``, "
"``session``, or ``current_app``. Rather than testing them by making a "
"request or invoking the command, you can create and activate a context "
"directly."
msgstr ""
"``request``、``session``、または ``current_app`` へアクセスするために、"
":doc:`application context </appcontext>` または :doc:`request context "
"</reqcontext>` が活動状態（active）であることを想定しているviewまたは"
"コマンドから呼び出される関数があるかもしれません。リクエストを作成するか、"
"またはコマンドを呼び出してそれらをテストするよりも、コンテキストを直接作成"
"して活動状態（active）にできます。"

#: ../../flask/docs/testing.rst:285
msgid ""
"Use ``with app.app_context()`` to push an application context. For "
"example, database extensions usually require an active app context to "
"make queries."
msgstr ""
"applicaiton contextをpushするには ``with app.app_context()`` を使います。"
"例えば、データベース用のFlask拡張はデータベースへのクエリーを作成する"
"ために、普通はactiveなapplication contextを必要とします。"

#: ../../flask/docs/testing.rst:295
msgid ""
"Use ``with app.test_request_context()`` to push a request context. It "
"takes the same arguments as the test client's request methods."
msgstr ""
"request contextをpushするには ``with app.test_request_context()`` を使い"
"ます。それは、クライアントのリクエストのメソッドと同じ引数を取ります。"

#: ../../flask/docs/testing.rst:309
msgid ""
"Creating a test request context doesn't run any of the Flask dispatching "
"code, so ``before_request`` functions are not called. If you need to call"
" these, usually it's better to make a full request instead. However, it's"
" possible to call them manually."
msgstr ""
"テスト用のrequest contextの作成では、Flaskのリクエスト振り分け（dispatching）"
"のコードを何も走らせないため、``before_request`` 関数は呼び出されません。もし"
"それらを呼び出す必要があるときは、普通は完全なリクエストを代わりに作成した方"
"が良いでしょう。しかしながら、それらを手動で呼び出すことは可能です。"

# 8e55faec19cc40c98568e6e0d4cb51cd
#~ msgid "**Something that is untested is broken.**"
#~ msgstr "**テストされていないものは壊れる**"

# ed7211219f1849c3a07f657229456efb
#~ msgid ""
#~ "The origin of this quote is "
#~ "unknown and while it is not "
#~ "entirely correct, it is also not "
#~ "far from the truth.  Untested "
#~ "applications make it hard to improve "
#~ "existing code and developers of untested"
#~ " applications tend to become pretty "
#~ "paranoid.  If an application has "
#~ "automated tests, you can safely make "
#~ "changes and instantly know if anything"
#~ " breaks."
#~ msgstr ""
#~ "この言葉の源は不明であり、そして完全に正しいわけではないですが、それでも真実からかけ離れているわけではありません。テストされていないアプリケーションは、存在するコードを改善することが難しく、テストされていないアプリケーションの開発者は極端な偏執症になりがちです（訳注:"
#~ " "
#~ "変更を極端に避けようとする姿勢を指していると思います）。もしアプリケーションの自動テストがあれば、安全に変更することができ、もしも何かしら壊れた場合には即座に分かるようになります。"

# 0b3f3f01f63e453c8e960997934c0f2d
#~ msgid ""
#~ "Flask provides a way to test your"
#~ " application by exposing the Werkzeug "
#~ "test :class:`~werkzeug.test.Client` and handling "
#~ "the context locals for you. You "
#~ "can then use that with your "
#~ "favourite testing solution."
#~ msgstr ""
#~ "Flaskは、Werkzeugのテスト用\\ :class:`~werkzeug.test.Client`\\ "
#~ "を使えるようにすることによって、さらにcontext "
#~ "localsを操作することによって、自分のアプリケーションをテストする方法を提供します。そして、あなたはそれらを自分の好きなテスト用のソリューションと一緒に使うことができます。"

# 0821ca25bc9549b7ad200a60e64732a6
#~ msgid ""
#~ "In this documentation we will use "
#~ "the `pytest`_ package as the base "
#~ "framework for our tests. You can "
#~ "install it with ``pip``, like so::"
#~ msgstr ""
#~ "このドキュメントでは、テスト用の基盤となるフレームワークとして\\ `pytest`_\\ "
#~ "パッケージを使用していきます。以下のように、\\ ``pip``\\ を使ってそれをインストールできます::"

# 988d9dd986804160883bfdf5bc27d428
#~ msgid "The Application"
#~ msgstr "アプリケーション"

# 59e998245baf42fb99967815c0dbf3e0
#~ msgid ""
#~ "First, we need an application to "
#~ "test; we will use the application "
#~ "from the :doc:`tutorial/index`. If you "
#~ "don't have that application yet, get "
#~ "the source code from :gh:`the examples"
#~ " <examples/tutorial>`."
#~ msgstr ""
#~ "第一に、アプリケーションをテストする必要があります; この文書では、:doc:`tutorial/index` "
#~ "のアプリケーションを使用していきます。もしもそのアプリケーションをまだ持っていない場合、:gh:`チュートリアルの例 "
#~ "<examples/tutorial>` からソースコードを取得してください。"

#~ msgid ""
#~ "So that we can import the module"
#~ " ``flaskr`` correctly, we need to run"
#~ " ``pip install -e .`` in the "
#~ "folder ``tutorial``."
#~ msgstr ""

# 8c3be563660b4374bc8952b5cf42b6cf
#~ msgid "The Testing Skeleton"
#~ msgstr "テストの骨組（The Testing Skeleton）"

# d96bbd0aff7948d28f03e523e6cce329
#~ msgid ""
#~ "We begin by adding a tests "
#~ "directory under the application root.  "
#~ "Then create a Python file to store"
#~ " our tests (:file:`test_flaskr.py`). When "
#~ "we format the filename like "
#~ "``test_*.py``, it will be auto-"
#~ "discoverable by pytest."
#~ msgstr ""
#~ "ここでは、アプリケーションのルートの下にtestsディレクトリを加えることから始めます。それから、テストを格納するPythonファイル（\\"
#~ " :file:`test_flaskr.py`\\ ）を作成します。ファイル名を\\ "
#~ "``test_*.py``\\ のような形式にしたときは、そのファイルはpytestによって自動的に見つけ出されます。"

# fcae897741d846988bb6847f2369f063
#~ msgid ""
#~ "Next, we create a `pytest fixture`_ "
#~ "called :func:`client` that configures the "
#~ "application for testing and initializes "
#~ "a new database::"
#~ msgstr ""
#~ "次に、テスト用にアプリケーションを設定し、新しいデータベースを初期化する、\\ :func:`client`\\ "
#~ "と呼ばれる（訳注: 以下の例で「client」という名前で定義されていることを指しています）\\ "
#~ "`pytestのfixture`_\\ を作成します::"

# cd7d1f75c08c477a8cc88dd56cc0c756
#~ msgid ""
#~ "This client fixture will be called "
#~ "by each individual test.  It gives "
#~ "us a simple interface to the "
#~ "application, where we can trigger test"
#~ " requests to the application.  The "
#~ "client will also keep track of "
#~ "cookies for us."
#~ msgstr "このclientのfixtureは、個別のテストそれぞれから呼び出されます。そのfixtureは、アプリケーションへのテスト用のリクエストを引き起こせるようにする、アプリケーションへのシンプルなインタフェースを供給します。そのclientは、cookieの経過も追跡します。"

# a2446a7a42e24406968189aaf6284585
#~ msgid ""
#~ "During setup, the ``TESTING`` config "
#~ "flag is activated.  What this does "
#~ "is disable error catching during request"
#~ " handling, so that you get better "
#~ "error reports when performing test "
#~ "requests against the application."
#~ msgstr ""
#~ "setupの間、\\ ``TESTING``\\ 設定フラグ（訳注: "
#~ "flask.ConfigオブジェクトでTESTINGキーで設定される情報で、直前のコード例でapp.config['TESTING']として操作している箇所）が有効化されます。これは、リクエストの処理中にエラーを捕捉しないようにすることで、アプリケーションに対するテスト用のリクエストを実施するときに、より良いエラーのレポートを得られるようにします。"

# d2ed250cb0ae42e29028abd91d628be6
#~ msgid ""
#~ "Because SQLite3 is filesystem-based, we"
#~ " can easily use the :mod:`tempfile` "
#~ "module to create a temporary database"
#~ " and initialize it. The "
#~ ":func:`~tempfile.mkstemp` function does two "
#~ "things for us: it returns a "
#~ "low-level file handle and a random"
#~ " file name, the latter we use "
#~ "as database name.  We just have to"
#~ " keep the `db_fd` around so that "
#~ "we can use the :func:`os.close` function"
#~ " to close the file."
#~ msgstr ""
#~ "SQLite3はファイルシステムをベースにしているため（訳注: "
#~ "データをローカルのファイルとして保存し、データベースへのアクセスにネットワーク越しのサーバへのアクセスなどを必要としないことが、ここではポイントになります）、\\"
#~ " :mod:`tempfile`\\ モジュールを使用して、容易に一時的なデータベースを作成して初期化できます。\\"
#~ " :func:`~tempfile.mkstemp`\\ 関数は2つのことを行います: "
#~ "低レベルでのファイル処理用ハンドルと、後でデータベース名として使用できるランダムなファイル名を返します。\\ `db_fd`\\"
#~ " （訳注: "
#~ "直前のコード例にあるdb_fd変数のことで、mkstempで作成したファイル処理用ハンドルを格納します）だけ保持していれば、\\ "
#~ ":func:`os.close`\\ 関数を使ってそのファイルを閉じることが可能です。"

# 34638897cfae4ff7ab9d4842326b8e90
#~ msgid ""
#~ "To delete the database after the "
#~ "test, the fixture closes the file "
#~ "and removes it from the filesystem."
#~ msgstr "テストの後にテスト用のデータベースを消去するために、fixtureはそのファイルを閉じて、ファイルシステムからそのファイルを削除します。"

# c66e4e79eda14bd1a2d94b1b21acd1f2
#~ msgid "If we now run the test suite, we should see the following output::"
#~ msgstr "この時点でテスト一式を実行した場合、以下のような出力を確認できるはずです::"

# 32e2002380c8407fb2f75abe6def9bdb
#~ msgid ""
#~ "Even though it did not run any "
#~ "actual tests, we already know that "
#~ "our ``flaskr`` application is syntactically"
#~ " valid, otherwise the import would "
#~ "have died with an exception."
#~ msgstr ""
#~ "たとえ実際のテストは何も実行していないとしても、この時点で\\ ``flaskr``\\ "
#~ "アプリケーションは文法的に正当であることが分かり、そうでなければ（pytestの実行のとき）importが例外により異常終了します。"

# c6df2e68bcd045b2a6c2251704a87906
#~ msgid "The First Test"
#~ msgstr "最初のテスト"

# c742b5cd7dcc461ca5bffa4892af242a
#~ msgid ""
#~ "Now it's time to start testing the"
#~ " functionality of the application. Let's"
#~ " check that the application shows "
#~ "\"No entries here so far\" if we"
#~ " access the root of the application"
#~ " (``/``).  To do this, we add a"
#~ " new test function to "
#~ ":file:`test_flaskr.py`, like this::"
#~ msgstr ""
#~ "ここまできたら、アプリケーションの機能のテストを始めるときです。もしもアプリケーションのルート（\\ ``/``\\ "
#~ "）へアクセスした場合に「No entries here so "
#~ "far」をアプリケーションが表示するかチェックしましょう。これを行うために、以下のように、\\ "
#~ ":file:`test_flaskr.py`\\ へ新しいテスト関数を追加します::"

# f258bc2b61814f04a64cc82fc9be7a45
#~ msgid ""
#~ "Notice that our test functions begin "
#~ "with the word `test`; this allows "
#~ "`pytest`_ to automatically identify the "
#~ "function as a test to run."
#~ msgstr ""
#~ "テスト関数は\\ `test`\\ 文字列から始めることに注意してください; これは、\\ "
#~ "`pytest`_\\ がその関数を実行すべきテストだと自動的に特定できるようにします。"

# 46a4bba534e54dbe883c414b81ff97f8
#~ msgid ""
#~ "By using ``client.get`` we can send "
#~ "an HTTP ``GET`` request to the "
#~ "application with the given path.  The"
#~ " return value will be a "
#~ ":class:`~flask.Flask.response_class` object. We can"
#~ " now use the "
#~ ":attr:`~werkzeug.wrappers.Response.data` attribute to "
#~ "inspect the return value (as string) "
#~ "from the application. In this case, "
#~ "we ensure that ``'No entries here "
#~ "so far'`` is part of the output."
#~ msgstr ""
#~ "``client.get`` を使用することで、（引数で）与えられたパスを伴ったHTTPの ``GET`` "
#~ "リクエストをアプリケーションに送ることができます。その戻り値は "
#~ ":class:`~flask.Flask.response_class` "
#~ "オブジェクトになります。それから、:attr:`~werkzeug.wrappers.Response.data` "
#~ "属性を使ってアプリケーションからの戻り値を（文字列として）調べることができます。このケースでは、``「No entries"
#~ " here so far」`` が出力の一部であることを確認します。"

# 7087afbc31364cf9b5d99a16bdc75af9
#~ msgid "Run it again and you should see one passing test::"
#~ msgstr "（pytestを）再実行すると、1つテストをパスしたことを確認できるはずです::"

# 35b4dcf1850147849e77c61b425f9138
#~ msgid "Logging In and Out"
#~ msgstr "ログインとログアウト"

# c5086af938a24dd0a749fb59b8c3fc30
#~ msgid ""
#~ "The majority of the functionality of "
#~ "our application is only available for"
#~ " the administrative user, so we need"
#~ " a way to log our test client"
#~ " in and out of the application.  "
#~ "To do this, we fire some requests"
#~ " to the login and logout pages "
#~ "with the required form data (username"
#~ " and password).  And because the "
#~ "login and logout pages redirect, we "
#~ "tell the client to `follow_redirects`."
#~ msgstr ""
#~ "今回のアプリケーションでの主要な機能は、管理者ユーザだけが利用可能になっているため、テスト用のclientがアプリケーションに対してログインおよびログアウトする方法が必要になります。これを行うために、必要なformデータ（ユーザ名とパスワード）を使ってログインおよびログアウトのページへのリクエストを起こします。さらにログインおよびログアウトのページは転送（redirect）されるものなので、clientに対して\\"
#~ " `follow_redirects`\\ を指示します（訳注: "
#~ "以下のコード例のように、client.postおよびclient.getにfollow_redirectsのキーワード引数を渡すことを指しています）。"

# 22fd3bc6c5134d4f824feabffa57287a
#~ msgid "Add the following two functions to your :file:`test_flaskr.py` file::"
#~ msgstr "以下の2つの関数を\\ :file:`test_flaskr.py`\\ ファイルへ追加します::"

# ec1d1a72300248bd81793c2c4af485f9
#~ msgid ""
#~ "Now we can easily test that "
#~ "logging in and out works and that"
#~ " it fails with invalid credentials.  "
#~ "Add this new test function::"
#~ msgstr "この時点で、ログインとログアウトが機能し、不正な認証情報（credentials）では（ログインに）失敗することを容易にテストできます。以下の新しい関数を（test_flaskr.pyに）追加します::"

# 3766274a5fb048c383e74fc0a49aad01
#~ msgid "Test Adding Messages"
#~ msgstr "メッセージ追加のテスト"

# 919d5db046de4fef8278c80b7064e177
#~ msgid ""
#~ "We should also test that adding "
#~ "messages works.  Add a new test "
#~ "function like this::"
#~ msgstr "メッセージ追加が機能することもテストするべきです。以下のように新しい関数を追加します::"

# 0352f8d0d0994621bfa2684ed91c3f90
#~ msgid ""
#~ "Here we check that HTML is allowed"
#~ " in the text but not in the "
#~ "title, which is the intended behavior."
#~ msgstr "ここでは、HTMLがテキストでは許されていながら、タイトルでは許されていないという、意図している振舞をチェックします。"

# adbf2e3b914a433fb7cefd727dbd9971
#~ msgid "Running that should now give us three passing tests::"
#~ msgstr "これを（pytestで）実行すると、3つのテストがパスすることを示すはずです::"

# 7d299dfaae634433ad28048050e7a410
#~ msgid "Other Testing Tricks"
#~ msgstr "その他のテスト用のしかけ（Other Tesing Tricks）"

# 7799974b122e4888aca7fbbf0b126654
#~ msgid ""
#~ "Besides using the test client as "
#~ "shown above, there is also the "
#~ ":meth:`~flask.Flask.test_request_context` method that "
#~ "can be used in combination with "
#~ "the ``with`` statement to activate a "
#~ "request context temporarily.  With this "
#~ "you can access the :class:`~flask.request`,"
#~ " :class:`~flask.g` and :class:`~flask.session` "
#~ "objects like in view functions.  Here"
#~ " is a full example that demonstrates"
#~ " this approach::"
#~ msgstr ""
#~ "ここまでに示したテスト用clientを使う他に、request "
#~ "contextを一時的に有効にするには、with文と組み合わせて使用できる\\ "
#~ ":meth:`~flask.Flask.test_request_context`\\ メソッドもあります。これを使うと\\"
#~ " :class:`~flask.request`, :class:`~flask.g`, "
#~ ":class:`~flask.session`\\ "
#~ "オブジェクトへview関数のようにアクセスできるようになります。以下は、このアプローチを実演（demonstrates）する一通り不足のない例になります::"

# baacac7b7b824efd9d3ae4448182b970
#~ msgid ""
#~ "All the other objects that are "
#~ "context bound can be used in the"
#~ " same way."
#~ msgstr "contextに結び付けられた（bound）その他の全てのオブジェクトを同じやり方で使用できます。"

# 75d81349995141fdaa4d2bb617ebb9a7
#~ msgid ""
#~ "If you want to test your "
#~ "application with different configurations and"
#~ " there does not seem to be a"
#~ " good way to do that, consider "
#~ "switching to application factories (see "
#~ ":doc:`patterns/appfactories`)."
#~ msgstr ""
#~ "もしも自分のアプリケーションを異なる設定でテストしたいにもかかわらず、相応しいやり方が見つからない場合、application "
#~ "factory（:doc:`patterns/appfactories` "
#~ "を確認してください）へ切り替えることを検討してください。"

# 63fb622b61014997b15ad0c98c395bb6
#~ msgid ""
#~ "Note however that if you are using"
#~ " a test request context, the "
#~ ":meth:`~flask.Flask.before_request` and "
#~ ":meth:`~flask.Flask.after_request` functions are not"
#~ " called automatically.  However "
#~ ":meth:`~flask.Flask.teardown_request` functions are "
#~ "indeed executed when the test request"
#~ " context leaves the ``with`` block.  "
#~ "If you do want the "
#~ ":meth:`~flask.Flask.before_request` functions to be"
#~ " called as well, you need to "
#~ "call :meth:`~flask.Flask.preprocess_request` yourself::"
#~ msgstr ""
#~ "しかしながら、もしもテスト用のrequest contextを使用している場合は、\\ "
#~ ":meth:`~flask.Flask.before_request`\\ と\\ "
#~ ":meth:`~flask.Flask.after_request`\\ "
#~ "関数が自動的には呼び出されないことに注意してください。しかしながら、テスト用のrequest contextが\\ "
#~ "``with``\\ ブロックを去るときに、\\ "
#~ ":meth:`~flask.Flask.teardown_request`\\ 関数は実際には実行されます。もしも\\ "
#~ ":meth:`~flask.Flask.before_request`\\ "
#~ "関数も同様に呼び出されるようにしたい場合は、自分で\\ "
#~ ":meth:`~flask.Flask.preprocess_request`\\ を呼び出す必要があります::"

# 03109b4a3e974e32bef7b7c9619d3783
#~ msgid ""
#~ "This can be necessary to open "
#~ "database connections or something similar "
#~ "depending on how your application was"
#~ " designed."
#~ msgstr "これは、自分のアプリケーションの設計によっては、データベース接続または似たような何かを開くために必要になる可能性があります。"

# 91b43cd5c0a74bcfbc9a0565fb2e6277
#~ msgid ""
#~ "If you want to call the "
#~ ":meth:`~flask.Flask.after_request` functions you "
#~ "need to call into "
#~ ":meth:`~flask.Flask.process_response` which however "
#~ "requires that you pass it a "
#~ "response object::"
#~ msgstr ""
#~ "もしも\\ :meth:`~flask.Flask.after_request`\\ "
#~ "関数を呼び出したい場合は、呼び出すときにresponseオブジェクトを渡す必要がある\\ "
#~ ":meth:`~flask.Flask.process_response`\\ を経由する必要があります::"

# f074ae1fa0b947d8ba0c8e1b85c45fe5
#~ msgid ""
#~ "This in general is less useful "
#~ "because at that point you can "
#~ "directly start using the test client."
#~ msgstr "その時点ではテスト用clientを使用して直接開始できるため、これは概してあまり便利ではありません。"

# 69673f08ac7143368eb3a8ae7155fd81
#~ msgid "Faking Resources and Context"
#~ msgstr "リソースおよびコンテキストの模倣（Faking Resources and Context）"

# 246cbb9c797142bf8e9825903bebda89
#~ msgid ""
#~ "A very common pattern is to store"
#~ " user authorization information and "
#~ "database connections on the application "
#~ "context or the :attr:`flask.g` object.  "
#~ "The general pattern for this is to"
#~ " put the object on there on "
#~ "first usage and then to remove it"
#~ " on a teardown.  Imagine for instance"
#~ " this code to get the current "
#~ "user::"
#~ msgstr ""
#~ "ユーザ認証情報とデータベース接続（database connections）をapplication "
#~ "contextまたは\\ :attr:`flask.g`\\ "
#~ "オブジェクトへ格納することは、よくあるパターンになります。これに対する一般的なパターンは、オブジェクトを最初に使用するときにそれ（application"
#~ " contextまたはflask.gオブジェクト）に置き、（リクエストやapplication "
#~ "contextなどを）取り壊すときにそれ（認証情報など）を削除することです。例えば、そのときのユーザを取得するための以下のコードを想像してください::"

# cebcba7c50dc49fcba3af6c22151bd1f
#~ msgid ""
#~ "For a test it would be nice "
#~ "to override this user from the "
#~ "outside without having to change some"
#~ " code.  This can be accomplished with"
#~ " hooking the :data:`flask.appcontext_pushed` "
#~ "signal::"
#~ msgstr ""
#~ "テストのためには、コードを変更することなくこのユーザを外側から上書きできるとうれしいでしょう。これは、\\ "
#~ ":data:`flask.appcontext_pushed`\\ シグナルをフックすることで達成可能です::"

# d75cb0a5e3364108adb964b11479948b
#~ msgid "And then to use it::"
#~ msgstr "それから、（以下のように）それ（appcontext_pushedをフックする処理）を使用します::"

# 9ebd5477775040ba826060299d66ddaa
#~ msgid "Keeping the Context Around"
#~ msgstr "コンテキストの保持（Keeping the Context Around）"

# 41074ce7c7b946988a9b377838322240
#~ msgid ""
#~ "Sometimes it is helpful to trigger "
#~ "a regular request but still keep "
#~ "the context around for a little "
#~ "longer so that additional introspection "
#~ "can happen.  With Flask 0.4 this "
#~ "is possible by using the "
#~ ":meth:`~flask.Flask.test_client` with a ``with`` "
#~ "block::"
#~ msgstr ""
#~ "ときには通常のリクエストを引き起こしながら、より多く調査できるようにするため（so that additional"
#~ " introspection can "
#~ "happen）に、少し長い間コンテキストを保持できると役立ちます。Flask 0.4では、\\ ``with``\\"
#~ " ブロックと一緒に\\ :meth:`~flask.Flask.test_client`\\ "
#~ "を使うことで可能です::"

# de9c6557b579456a80ae06b7609d66bc
#~ msgid ""
#~ "If you were to use just the "
#~ ":meth:`~flask.Flask.test_client` without the "
#~ "``with`` block, the ``assert`` would "
#~ "fail with an error because `request` "
#~ "is no longer available (because you "
#~ "are trying to use it outside of"
#~ " the actual request)."
#~ msgstr ""
#~ "もしも\\ ``with``\\ ブロックを伴わずに\\ "
#~ ":meth:`~flask.Flask.test_client`\\ "
#~ "だけを使用した場合、（実際のリクエストの外側で使用しようとしているため）もはや\\ `request`\\ "
#~ "が利用できないために\\ ``assert``\\ がエラーを伴って失敗するでしょう。"

# 598747a2251e4467a7729656e77beb94
#~ msgid ""
#~ "Sometimes it can be very helpful "
#~ "to access or modify the sessions "
#~ "from the test client.  Generally there"
#~ " are two ways for this.  If you"
#~ " just want to ensure that a "
#~ "session has certain keys set to "
#~ "certain values you can just keep "
#~ "the context around and access "
#~ ":data:`flask.session`::"
#~ msgstr ""
#~ "ときには、テスト用clientからセッションに対してアクセスまたは変更すると非常に役立つことがあります。これについては、概して2つのやり方があります。もしもある値が設定たあるキーをセッションが持っているか確認したいだけである場合は、コンテキストを保持して\\"
#~ " :data:`flask.session`\\ にアクセスするだけで可能です::"

# c7f9f53e93204e24a4128c282f5d6e9d
#~ msgid ""
#~ "This however does not make it "
#~ "possible to also modify the session "
#~ "or to access the session before a"
#~ " request was fired.  Starting with "
#~ "Flask 0.8 we provide a so called"
#~ " “session transaction” which simulates the"
#~ " appropriate calls to open a session"
#~ " in the context of the test "
#~ "client and to modify it. At the"
#~ " end of the transaction the session"
#~ " is stored and ready to be used"
#~ " by the test client. This works "
#~ "independently of the session backend "
#~ "used::"
#~ msgstr ""
#~ "これは、しかしながら、セッションの変更やリクエストが引き起こされる前のセッションへのアクセスもできるようにはしません。Flask "
#~ "0.8からは、テスト用clientのコンテキストの中でセッションを開き、そしてそのセッションを変更する、適切な呼び出しを模倣する「セッショントランザクション（session"
#~ " transaction）」と呼ばれるものを提供しています。これは使用されているセッションの背後の仕組み（session "
#~ "backend）に関係なく機能します::"

# 668dbb2405f54b9cb2a32b182c2e36ec
#~ msgid ""
#~ "Note that in this case you have"
#~ " to use the ``sess`` object instead"
#~ " of the :data:`flask.session` proxy.  The"
#~ " object however itself will provide "
#~ "the same interface."
#~ msgstr ""
#~ "このケース（直前のコード例）では、\\ :data:`flask.session`\\ プロキシの代わりに\\"
#~ " ``sess``\\ "
#~ "オブジェクトを使う必要があることに注意してください。しかしながら、sessオブジェクト自体はflask.sessionと同じインタフェースを提供します。"

# 5db1b5ca8cf747a7a618815160ed9392
#~ msgid "Testing JSON APIs"
#~ msgstr "JSON APIのテスト（Testing JSON APIs）"

# 8567e8b70a584a439edef4d75d1d23c4
#~ msgid ""
#~ "Flask has great support for JSON, "
#~ "and is a popular choice for "
#~ "building JSON APIs. Making requests with"
#~ " JSON data and examining JSON data"
#~ " in responses is very convenient::"
#~ msgstr "FlaskにはJSONへの素晴しいサポートがあり、JSONのAPIを構築するための選択肢として人気があります。JSONデータを使ったリクエストを作成して、レスポンスの中でJSONデータを調べるには非常に好都合です::"

# 2600047646df40bdb464632512a916a1
#~ msgid ""
#~ "Passing the ``json`` argument in the "
#~ "test client methods sets the request "
#~ "data to the JSON-serialized object "
#~ "and sets the content type to "
#~ "``application/json``. You can get the "
#~ "JSON data from the request or "
#~ "response with ``get_json``."
#~ msgstr ""
#~ "``json``\\ 引数をテスト用clientのメソッドで渡すと、リクエストのデータをJSONでシリアライズされたオブジェクト"
#~ "（JSON-serialized object）に設定し、（リクエストの）content typeを\\"
#~ " ``application/json``\\ に設定します。\\ ``get_json``\\ "
#~ "を使って、リクエストまたはレスポンスからJSONのデータを取得できます。"

# 93f743ced9e446f5a4a69efc0f85697a
#~ msgid "Testing CLI Commands"
#~ msgstr "CLIコマンドのテスト（Testing CLI Commands）"

# 7e9ee36087cc4e1abe35b9a43e76b621
#~ msgid ""
#~ "Click comes with `utilities for "
#~ "testing`_ your CLI commands. A "
#~ ":class:`~click.testing.CliRunner` runs commands in"
#~ " isolation and captures the output in"
#~ " a :class:`~click.testing.Result` object."
#~ msgstr ""
#~ "Click（訳注: Flaskインストール時に自動的にインストールされるCLI用のツール）は自分のCLIコマンドを\\ "
#~ "`テストするためのユーティリティ`_\\ が一緒になっています。\\ "
#~ ":class:`~click.testing.CliRunner`\\ はコマンドを別々に分けながら実行して出力を\\ "
#~ ":class:`~click.testing.Result`\\ オブジェクトの中に捉えます。"

# d7973504f2b0433e87032a1d4b9137e1
#~ msgid ""
#~ "Flask provides :meth:`~flask.Flask.test_cli_runner` "
#~ "to create a :class:`~flask.testing.FlaskCliRunner`"
#~ " that passes the Flask app to "
#~ "the CLI automatically. Use its "
#~ ":meth:`~flask.testing.FlaskCliRunner.invoke` method to "
#~ "call commands in the same way they"
#~ " would be called from the command "
#~ "line. ::"
#~ msgstr ""
#~ "Flaskは、FlaskのappをCLIへ自動的に渡す\\ "
#~ ":class:`~flask.testing.FlaskCliRunner`\\ を作成するために\\ "
#~ ":meth:`~flask.Flask.test_cli_runner`\\ "
#~ "を提供しています。コマンドラインから呼ばれたときと同じようにコマンドを呼び出すために、\\ "
#~ ":meth:`~flask.testing.FlaskCliRunner.invoke`\\ メソッドを使用します。::"

# 8a0956cf8f77412b9ae658d5d339dd70
#~ msgid ""
#~ "In the example above, invoking the "
#~ "command by name is useful because "
#~ "it verifies that the command was "
#~ "correctly registered with the app."
#~ msgstr "上の例では、コマンドがappに適切に登録されたことを検証するため、名前によってコマンドを起動するのが便利です。"

# 7ee7dae2b86045c3b4779fd3a8840e74
#~ msgid ""
#~ "If you want to test how your "
#~ "command parses parameters, without running "
#~ "the command, use its "
#~ ":meth:`~click.BaseCommand.make_context` method. This "
#~ "is useful for testing complex validation"
#~ " rules and custom types. ::"
#~ msgstr ""
#~ "もしも自分のコマンドがどのようにパラメータを解析するか、コマンドを実行せずにテストしたい場合は、\\ "
#~ ":meth:`~click.BaseCommand.make_context`\\ "
#~ "メソッドを使用します。これは複雑な検証ルールや独自タイプ（のパラメータ）をテストするために役立ちます。::"

