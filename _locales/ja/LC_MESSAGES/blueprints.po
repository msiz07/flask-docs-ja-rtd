# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-21 13:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# c02d9e638a5143e8a4b1afc0b7669739
#: ../../blueprints.rst:4
msgid "Modular Applications with Blueprints"
msgstr ""

# eecf351890c94c81acf3d6a35d35be1e
#: ../../blueprints.rst:10
msgid ""
"Flask uses a concept of *blueprints* for making application components "
"and supporting common patterns within an application or across "
"applications. Blueprints can greatly simplify how large applications work"
" and provide a central means for Flask extensions to register operations "
"on applications. A :class:`Blueprint` object works similarly to a "
":class:`Flask` application object, but it is not actually an application."
"  Rather it is a *blueprint* of how to construct or extend an "
"application."
msgstr ""

# bf52b9ba56754ff59c784c051b881571
#: ../../blueprints.rst:19
msgid "Why Blueprints?"
msgstr ""

# 3cddc2e513394ce0b0c6189082feefcf
#: ../../blueprints.rst:21
msgid "Blueprints in Flask are intended for these cases:"
msgstr ""

# fdd7b6dd2d3649eb9b3a5bb52c1e3593
#: ../../blueprints.rst:23
msgid ""
"Factor an application into a set of blueprints.  This is ideal for larger"
" applications; a project could instantiate an application object, "
"initialize several extensions, and register a collection of blueprints."
msgstr ""

# 37abeede2d644ccf9838e3051325f931
#: ../../blueprints.rst:26
msgid ""
"Register a blueprint on an application at a URL prefix and/or subdomain. "
"Parameters in the URL prefix/subdomain become common view arguments (with"
" defaults) across all view functions in the blueprint."
msgstr ""

# 051a0cc893024972a1c4b14243c0d0c1
#: ../../blueprints.rst:29
msgid ""
"Register a blueprint multiple times on an application with different URL "
"rules."
msgstr ""

# 83bdabb865b341b7afcda1b72c1f3fe5
#: ../../blueprints.rst:31
msgid ""
"Provide template filters, static files, templates, and other utilities "
"through blueprints.  A blueprint does not have to implement applications "
"or view functions."
msgstr ""

# 3afb107944934a3dbc76ee361c410022
#: ../../blueprints.rst:34
msgid ""
"Register a blueprint on an application for any of these cases when "
"initializing a Flask extension."
msgstr ""

# 97e0673d5c7c467d84a926ebcec38377
#: ../../blueprints.rst:37
msgid ""
"A blueprint in Flask is not a pluggable app because it is not actually an"
" application -- it's a set of operations which can be registered on an "
"application, even multiple times.  Why not have multiple application "
"objects?  You can do that (see :ref:`app-dispatch`), but your "
"applications will have separate configs and will be managed at the WSGI "
"layer."
msgstr ""

# 9aef2a46cb7242e884530b59f5291cf9
#: ../../blueprints.rst:43
msgid ""
"Blueprints instead provide separation at the Flask level, share "
"application config, and can change an application object as necessary "
"with being registered. The downside is that you cannot unregister a "
"blueprint once an application was created without having to destroy the "
"whole application object."
msgstr ""

# 563b209c89c742c08d4aa004952a94ac
#: ../../blueprints.rst:50
msgid "The Concept of Blueprints"
msgstr ""

# 9b1f6e7b5f2c4689ab7e626a410fe84c
#: ../../blueprints.rst:52
msgid ""
"The basic concept of blueprints is that they record operations to execute"
" when registered on an application.  Flask associates view functions with"
" blueprints when dispatching requests and generating URLs from one "
"endpoint to another."
msgstr ""

# 0399b7b317454e7cb3dff793f577c4c4
#: ../../blueprints.rst:58
msgid "My First Blueprint"
msgstr ""

# 9a28a87831f04425acf0bd949e1e89e7
#: ../../blueprints.rst:60
msgid ""
"This is what a very basic blueprint looks like.  In this case we want to "
"implement a blueprint that does simple rendering of static templates::"
msgstr ""

# 61eb5afcfc9b4c3d94d3ae687e06a80c
#: ../../blueprints.rst:77
msgid ""
"When you bind a function with the help of the ``@simple_page.route`` "
"decorator, the blueprint will record the intention of registering the "
"function ``show`` on the application when it's later registered. "
"Additionally it will prefix the endpoint of the function with the name of"
" the blueprint which was given to the :class:`Blueprint` constructor (in "
"this case also ``simple_page``). The blueprint's name does not modify the"
" URL, only the endpoint."
msgstr ""

# ffc1e55678bd4814bd121548ffc00441
#: ../../blueprints.rst:86
msgid "Registering Blueprints"
msgstr ""

# 2ef94b5d3632478b9e798c6bafc5a97c
#: ../../blueprints.rst:88
msgid "So how do you register that blueprint?  Like this::"
msgstr ""

# ce5a51efa2f2431aaf4054a5f8bbb98f
#: ../../blueprints.rst:96
msgid ""
"If you check the rules registered on the application, you will find "
"these::"
msgstr ""

# f8378ba5bb8c44f193f321a962fbc387
#: ../../blueprints.rst:104
msgid ""
"The first one is obviously from the application itself for the static "
"files.  The other two are for the `show` function of the ``simple_page`` "
"blueprint.  As you can see, they are also prefixed with the name of the "
"blueprint and separated by a dot (``.``)."
msgstr ""

# 34b77ebad2f442b58da5e74fc810a5ff
#: ../../blueprints.rst:109
msgid "Blueprints however can also be mounted at different locations::"
msgstr ""

# 8a28d9c0f740424e9defd943eb9f7a7a
#: ../../blueprints.rst:113
msgid "And sure enough, these are the generated rules::"
msgstr ""

# addf4ebe2cc14bada4181edceb4a7e38
#: ../../blueprints.rst:120
msgid ""
"On top of that you can register blueprints multiple times though not "
"every blueprint might respond properly to that.  In fact it depends on "
"how the blueprint is implemented if it can be mounted more than once."
msgstr ""

# 68dee2b6f73048e8a9356b1815cbd067
#: ../../blueprints.rst:125
msgid "Blueprint Resources"
msgstr ""

# 7f88eb3d57df4e39a80d49a815ff7103
#: ../../blueprints.rst:127
msgid ""
"Blueprints can provide resources as well.  Sometimes you might want to "
"introduce a blueprint only for the resources it provides."
msgstr ""

# 0ac1391c888240b4a63de573a6291712
#: ../../blueprints.rst:131
msgid "Blueprint Resource Folder"
msgstr ""

# 34a2fa6db3fa4618bd4c3c9df4f8deef
#: ../../blueprints.rst:133
msgid ""
"Like for regular applications, blueprints are considered to be contained "
"in a folder.  While multiple blueprints can originate from the same "
"folder, it does not have to be the case and it's usually not recommended."
msgstr ""

# 55d8c6d496f941b5a71d174a4a730353
#: ../../blueprints.rst:137
msgid ""
"The folder is inferred from the second argument to :class:`Blueprint` "
"which is usually `__name__`.  This argument specifies what logical Python"
" module or package corresponds to the blueprint.  If it points to an "
"actual Python package that package (which is a folder on the filesystem) "
"is the resource folder.  If it's a module, the package the module is "
"contained in will be the resource folder.  You can access the "
":attr:`Blueprint.root_path` property to see what the resource folder is::"
msgstr ""

# cccaa78f5a3f4514af34c3618f8cd307
#: ../../blueprints.rst:148
msgid ""
"To quickly open sources from this folder you can use the "
":meth:`~Blueprint.open_resource` function::"
msgstr ""

# 15f0996f353649d29b53b2bdc0fe8135
#: ../../blueprints.rst:155
msgid "Static Files"
msgstr ""

# 7ba935a7cfb846d19a0a3e7fbd4bc811
#: ../../blueprints.rst:157
msgid ""
"A blueprint can expose a folder with static files by providing the path "
"to the folder on the filesystem with the ``static_folder`` argument. It "
"is either an absolute path or relative to the blueprint's location::"
msgstr ""

# b6896bcf7287455abe6b10bf0ad8390a
#: ../../blueprints.rst:163
msgid ""
"By default the rightmost part of the path is where it is exposed on the "
"web. This can be changed with the ``static_url_path`` argument. Because "
"the folder is called ``static`` here it will be available at the "
"``url_prefix`` of the blueprint + ``/static``. If the blueprint has the "
"prefix ``/admin``, the static URL will be ``/admin/static``."
msgstr ""

# d0284cb25b7f479d9bece1233a629189
#: ../../blueprints.rst:169
msgid ""
"The endpoint is named ``blueprint_name.static``. You can generate URLs to"
" it with :func:`url_for` like you would with the static folder of the "
"application::"
msgstr ""

# 863cfc7ce48e4af68f6ad0ca9a1e4b66
#: ../../blueprints.rst:175
msgid ""
"However, if the blueprint does not have a ``url_prefix``, it is not "
"possible to access the blueprint's static folder. This is because the URL"
" would be ``/static`` in this case, and the application's ``/static`` "
"route takes precedence. Unlike template folders, blueprint static folders"
" are not searched if the file does not exist in the application static "
"folder."
msgstr ""

# 1f36255873f9436d89129fb88da370a3
#: ../../blueprints.rst:183
msgid "Templates"
msgstr ""

# c224ffb038204d9991ece0591bfbbd62
#: ../../blueprints.rst:185
msgid ""
"If you want the blueprint to expose templates you can do that by "
"providing the `template_folder` parameter to the :class:`Blueprint` "
"constructor::"
msgstr ""

# 48722da5f541493ca3e0caa8e0ee8b29
#: ../../blueprints.rst:190
msgid ""
"For static files, the path can be absolute or relative to the blueprint "
"resource folder."
msgstr ""

# d1549439b9194376871fd5f5e46f4d2b
#: ../../blueprints.rst:193
msgid ""
"The template folder is added to the search path of templates but with a "
"lower priority than the actual application's template folder. That way "
"you can easily override templates that a blueprint provides in the actual"
" application. This also means that if you don't want a blueprint template"
" to be accidentally overridden, make sure that no other blueprint or "
"actual application template has the same relative path. When multiple "
"blueprints provide the same relative template path the first blueprint "
"registered takes precedence over the others."
msgstr ""

# b279110735b14c9ebef69137af25758d
#: ../../blueprints.rst:202
msgid ""
"So if you have a blueprint in the folder ``yourapplication/admin`` and "
"you want to render the template ``'admin/index.html'`` and you have "
"provided ``templates`` as a `template_folder` you will have to create a "
"file like this: :file:`yourapplication/admin/templates/admin/index.html`."
" The reason for the extra ``admin`` folder is to avoid getting our "
"template overridden by a template named ``index.html`` in the actual "
"application template folder."
msgstr ""

# 81b51836a99e4abe8d9d1bf3ce10dba9
#: ../../blueprints.rst:210
msgid ""
"To further reiterate this: if you have a blueprint named ``admin`` and "
"you want to render a template called :file:`index.html` which is specific"
" to this blueprint, the best idea is to lay out your templates like "
"this::"
msgstr ""

# e248d5d0ef5d4e3d836a90955d6c18a6
#: ../../blueprints.rst:222
msgid ""
"And then when you want to render the template, use "
":file:`admin/index.html` as the name to look up the template by.  If you "
"encounter problems loading the correct templates enable the "
"``EXPLAIN_TEMPLATE_LOADING`` config variable which will instruct Flask to"
" print out the steps it goes through to locate templates on every "
"``render_template`` call."
msgstr ""

# 7ee65d63e5ef4d54b0675ab31cdbb857
#: ../../blueprints.rst:229
msgid "Building URLs"
msgstr ""

# 0f0627d4bc104d2aad8865c8d81d7b66
#: ../../blueprints.rst:231
msgid ""
"If you want to link from one page to another you can use the "
":func:`url_for` function just like you normally would do just that you "
"prefix the URL endpoint with the name of the blueprint and a dot "
"(``.``)::"
msgstr ""

# 82c26e4cf64f47198ba2aacad0fe1695
#: ../../blueprints.rst:237
msgid ""
"Additionally if you are in a view function of a blueprint or a rendered "
"template and you want to link to another endpoint of the same blueprint, "
"you can use relative redirects by prefixing the endpoint with a dot "
"only::"
msgstr ""

# 8475c82c75a34d9bbf0a84e0f5432c96
#: ../../blueprints.rst:243
msgid ""
"This will link to ``admin.index`` for instance in case the current "
"request was dispatched to any other admin blueprint endpoint."
msgstr ""

# e4351a9cb35948c39997bc4758521911
#: ../../blueprints.rst:247
msgid "Error Handlers"
msgstr ""

# b033f1c827c84a59a99a0f2a4adb40af
#: ../../blueprints.rst:249
msgid ""
"Blueprints support the ``errorhandler`` decorator just like the "
":class:`Flask` application object, so it is easy to make Blueprint-"
"specific custom error pages."
msgstr ""

# fd9c137a7757475aa5f49e1786be6ea2
#: ../../blueprints.rst:253
msgid "Here is an example for a \"404 Page Not Found\" exception::"
msgstr ""

# 32b09396d3d540a69a057ce091982b4d
#: ../../blueprints.rst:259
msgid ""
"Most errorhandlers will simply work as expected; however, there is a "
"caveat concerning handlers for 404 and 405 exceptions.  These "
"errorhandlers are only invoked from an appropriate ``raise`` statement or"
" a call to ``abort`` in another of the blueprint's view functions; they "
"are not invoked by, e.g., an invalid URL access.  This is because the "
"blueprint does not \"own\" a certain URL space, so the application "
"instance has no way of knowing which blueprint error handler it should "
"run if given an invalid URL.  If you would like to execute different "
"handling strategies for these errors based on URL prefixes, they may be "
"defined at the application level using the ``request`` proxy object::"
msgstr ""

# 7aa4a2886efb4e18a5de6d8d4a8be5e4
#: ../../blueprints.rst:277
msgid "More information on error handling see :ref:`errorpages`."
msgstr ""

