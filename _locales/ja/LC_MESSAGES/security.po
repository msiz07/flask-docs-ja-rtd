# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-20 18:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

# 072c5c89b74748a281fbf43ba2e33fcf
#: ../../flask/docs/security.rst:2
msgid "Security Considerations"
msgstr "セキュリティの考慮点"

# ecf50cc98cea4ba095e8d635bbadb687
#: ../../flask/docs/security.rst:4
msgid ""
"Web applications usually face all kinds of security problems and it's "
"very hard to get everything right.  Flask tries to solve a few of these "
"things for you, but there are a couple more you have to take care of "
"yourself."
msgstr ""
"webアプリケーションは普通さまざまな種類のセキュリティ上の問題に直面し、"
"全てを正しくするのは非常に困難です。Flaskはこれらのいくつかを、あなたに"
"とって良いように解決しようと試みますが、自分自身で注意を払わなければ"
"ならないことが、まだまだあります。"

# c7f6c505bb8949a6b2521217c0a48f62
#: ../../flask/docs/security.rst:11
msgid "Cross-Site Scripting (XSS)"
msgstr "クロスサイトスクリプティング（Cross-Site Scripting）（XSS）"

# 5509886ebd5f404eaa30592b96c83c49
#: ../../flask/docs/security.rst:13
msgid ""
"Cross site scripting is the concept of injecting arbitrary HTML (and with"
" it JavaScript) into the context of a website.  To remedy this, "
"developers have to properly escape text so that it cannot include "
"arbitrary HTML tags.  For more information on that have a look at the "
"Wikipedia article on `Cross-Site Scripting <https://en.wikipedia.org/wiki"
"/Cross-site_scripting>`_."
msgstr ""
"クロスサイトスクリプティングは任意のHTML(さらにそれを使うJavaScript）を"
"webサイトの実行環境に挿入しようとする考え方です。対策するためには、"
"任意のHTMLタグが含まれないようにするために、開発者はテキストを適切に"
"エスケープする必要があります。これに関するさらなる情報については、"
"Wikipediaの記事\ `Cross-Site Scripting <https://en.wikipedia.org/wiki"
"/Cross-site_scripting>`_ を確認してください。"

# 2c06cfa627824db583772d48ce1dccc2
#: ../../flask/docs/security.rst:20
msgid ""
"Flask configures Jinja2 to automatically escape all values unless "
"explicitly told otherwise.  This should rule out all XSS problems caused "
"in templates, but there are still other places where you have to be "
"careful:"
msgstr ""
"Flaskでは、明示的にそうしないと指示されていないかぎり、Jinja2が自動的に"
"全ての値をエスケープするように設定しています。これによってテンプレート"
"が原因となるXSSの問題は全て排除されるはずですが、それでも他に注意しなけ"
"ればならない場所がいくらか残っています:"

# 0c4cd7f31b9e49ffbb09f6ae94066ffb
#: ../../flask/docs/security.rst:25
msgid "generating HTML without the help of Jinja2"
msgstr "Jinja2を利用せずにHTMLを生成"

# aca9b4452d234af89750bc4d90e01007
#: ../../flask/docs/security.rst:26
msgid "calling :class:`~flask.Markup` on data submitted by users"
msgstr "ユーザが提出したデータへ :class:`~flask.Markup` を呼び出し"

# 8dbf99640bdf453aacaea80aa91f7d1e
#: ../../flask/docs/security.rst:27
msgid ""
"sending out HTML from uploaded files, never do that, use the ``Content-"
"Disposition: attachment`` header to prevent that problem."
msgstr ""
"ユーザがアップロードしたファイルからHTMLを送出、これは決して行うべきでは"
"なく、問題を防ぐために ``Content-Disposition: attachment`` を使うように"
"してください。"

# 898c5b8f9a1a40b0b6be576a3bd42b79
#: ../../flask/docs/security.rst:29
msgid ""
"sending out textfiles from uploaded files.  Some browsers are using "
"content-type guessing based on the first few bytes so users could trick a"
" browser to execute HTML."
msgstr ""
"アップロードされたファイルからテキストファイルを送出。いくつかのブラウザ"
"はcontent-typeの推測を、データの最初の数バイトに基づいて行うため、ブラ"
"ウザをだましてHTMLを実行をさせることが、ブラウザのユーザにとって可能な"
"場合があります。"

# 95b636717b424a5cac46fbe042791cb7
#: ../../flask/docs/security.rst:33
msgid ""
"Another thing that is very important are unquoted attributes.  While "
"Jinja2 can protect you from XSS issues by escaping HTML, there is one "
"thing it cannot protect you from: XSS by attribute injection.  To counter"
" this possible attack vector, be sure to always quote your attributes "
"with either double or single quotes when using Jinja expressions in them:"
msgstr ""
"もうひとつの非常に重要なものは、引用符で囲まれない属性です。Jinja2は"
"HTMLをエスケープすることでXSS問題から守ることはできても、それでもJinja2が"
"防げないものがあります: 属性の挿入によるXSS（XSS by attribute injection）"
"です。この方面から攻撃される可能性へ対抗するには、属性をJinjaの式で使用"
"するときには、確実に二重引用符（\"）または一重引用符（'）でそれらの属性を"
"囲むようにします:"

# 76cdf911eab84277abcbc0cecc260649
#: ../../flask/docs/security.rst:43
msgid ""
"Why is this necessary?  Because if you would not be doing that, an "
"attacker could easily inject custom JavaScript handlers.  For example an "
"attacker could inject this piece of HTML+JavaScript:"
msgstr ""
"なぜこれが必要なのでしょうか？もしそれをしなかった場合、攻撃者が容易に"
"独自のJavaScript処理を挿入できるようになるためです。例えば、攻撃者は"
"ここ（上記のinputタグ）へ以下のようなHTML+JavaScriptを挿入できます:"

# 5eb4a1f0527549509d81a7548bd7ba1e
#: ../../flask/docs/security.rst:51
msgid ""
"When the user would then move with the mouse over the input, the cookie "
"would be presented to the user in an alert window.  But instead of "
"showing the cookie to the user, a good attacker might also execute any "
"other JavaScript code.  In combination with CSS injections the attacker "
"might even make the element fill out the entire page so that the user "
"would just have to have the mouse anywhere on the page to trigger the "
"attack."
msgstr ""
"それからユーザが、上記のinputタグの場所へマウスを移動させた場合、"
"クッキーが表示されているalertウィンドがユーザに表示されるでしょう。"
"しかし、ユーザにクッキーを表示させる代わりに、できる攻撃者は、別の"
"あらゆるJavaScriptコードも実行させるかもしれません。CSSの挿入（CSS "
"injections）と組み合わせると、その要素（訳注：上記のinputタグ）"
"がページ全体を埋め尽くすようにして、ユーザがその攻撃を引き起こすために"
"ページ上のどこかにマウスを移動させることしかできないようにさえ、攻撃者が"
"してくるかもしれません。"

# 07dc4861bcca452ba211aa061b99f583
#: ../../flask/docs/security.rst:58
msgid ""
"There is one class of XSS issues that Jinja's escaping does not protect "
"against. The ``a`` tag's ``href`` attribute can contain a `javascript:` "
"URI, which the browser will execute when clicked if not secured properly."
msgstr ""
"XSS問題のひとつで、Jinjaのエスケープ機能では防げないものがあります。"
"``a`` タグの ``href`` 属性は `javascript:` で始まるURIを含むことができ、"
"適切に守られていないブラウザはそれをクリックするとそのJavaScriptを実行"
"します。"

# c984497ae63544b5ac2f02ca74faeea8
#: ../../flask/docs/security.rst:67
msgid ""
"To prevent this, you'll need to set the :ref:`security-csp` response "
"header."
msgstr ""
"これを防ぐためには、:ref:`security-csp` レスポンスヘッダを確認する"
"必要があるでしょう。"

# 7dca7a139a0e47e1b21a2b727f20bc92
#: ../../flask/docs/security.rst:70
msgid "Cross-Site Request Forgery (CSRF)"
msgstr ""
"クロスサイトリクエストフォージェリ（Cross-Site Request Forgery）（CSRF）"

# bbbeea13374b471b9709aaacf94596b8
#: ../../flask/docs/security.rst:72
msgid ""
"Another big problem is CSRF.  This is a very complex topic and I won't "
"outline it here in detail just mention what it is and how to "
"theoretically prevent it."
msgstr ""
"もう一つの大きな問題がCSRFです。これはとても複雑な話題であり、ここでは"
"詳細を整理はせず、それが何であり理論上はどう防ぐのかに言及だけします。"

# f8b41960b5434465a2e61ac24a037b27
#: ../../flask/docs/security.rst:76
msgid ""
"If your authentication information is stored in cookies, you have "
"implicit state management.  The state of \"being logged in\" is "
"controlled by a cookie, and that cookie is sent with each request to a "
"page. Unfortunately that includes requests triggered by 3rd party sites."
"  If you don't keep that in mind, some people might be able to trick your"
" application's users with social engineering to do stupid things without "
"them knowing."
msgstr ""
"もし認証情報がクッキーに格納されていた場合、状態管理をすることが暗黙的"
"に必要となります。「ログインしている」という状態はクッキーによって制御"
"され、そのクッキーはリクエストごとにページへ送信されます。残念ながらその"
"ようなリクエストは第三者のサイトが引き金になる場合も含みます。もしその"
"ことを考えておかないと、あなたのアプリケーションのユーザをだまして、"
"ソーシャルエンジニアリングも使いながら、当事者に知られることなく、愚かな"
"点を突いてくるようなことを、誰かができるようになっているかもしれません。"

# a6f40654a2354e0e87589346a7c95ee3
#: ../../flask/docs/security.rst:84
msgid ""
"Say you have a specific URL that, when you sent ``POST`` requests to will"
" delete a user's profile (say ``http://example.com/user/delete``).  If an"
" attacker now creates a page that sends a post request to that page with "
"some JavaScript they just have to trick some users to load that page and "
"their profiles will end up being deleted."
msgstr ""
"例えば、``POST`` リクエストを送ったときはユーザのプロフィールを消去する"
"特別なURLがあるとします（``http://example.com/user/delete`` とします）。"
"もしも攻撃者がそのとき、そのページへpostリクエストを送信するページをなに"
"かしらのJavaScriptを使いながら作成した場合、あるユーザがその（攻撃者が"
"作成した）ページをロードするようにだましさえすれば、そのユーザのプロ"
"フィールは消去される結果になります。"

# a4d92a655846480883b9715cd4fba06d
#: ../../flask/docs/security.rst:90
msgid ""
"Imagine you were to run Facebook with millions of concurrent users and "
"someone would send out links to images of little kittens.  When users "
"would go to that page, their profiles would get deleted while they are "
"looking at images of fluffy cats."
msgstr ""
"自分が何百万ものユーザがいるFacebookを走らせていて、誰かが子猫の画像への"
"リンクを送ることを想像してみてください。ユーザがそのページへ行ったとき、"
"もふもふした猫の画像を見ている間に、自分のプロフィールが削除されるかも"
"しれません。"

# 6bddff338c064609aa4fecb82368c84f
#: ../../flask/docs/security.rst:95
msgid ""
"How can you prevent that?  Basically for each request that modifies "
"content on the server you would have to either use a one-time token and "
"store that in the cookie **and** also transmit it with the form data. "
"After receiving the data on the server again, you would then have to "
"compare the two tokens and ensure they are equal."
msgstr ""
"これはどのように防ぐのでしょうか？基本的には、サーバ上の内容を変更する"
"リクエストではそれぞれ、一度限りのトークン（訳注：認証などに使用する、"
"大抵はでたらめな文字列）を使用して、それをクッキーに格納して、"
" **さらに** それをformデータとも一緒に送信します（訳注: サーバがformを"
"含んだページのレスポンスをWebブラウザなどへ送信するとき、そのレスポンスの"
"ヘッダの中で、クッキーにそのレスポンス固有のトークンを設定するような処理"
"を指していると思います）。サーバで再びデータを受信した後は、そのときに2"
"つのトークンを比較して、確実に同一であるかを確かめる必要があるでしょう。"

# 11cedf4d53e244dabbdaf91a82a6ed78
#: ../../flask/docs/security.rst:101
msgid ""
"Why does Flask not do that for you?  The ideal place for this to happen "
"is the form validation framework, which does not exist in Flask."
msgstr ""
"なぜFlaskは、あなにとって良いように、それをしてくれないのでしょうか？"
"それを起こす理想的な場所はformを検証するフレームワークであって、それは"
"Flaskの外側に位置するのです。"

# d7cd87fff0504c64a634d4e064c79ed5
#: ../../flask/docs/security.rst:107
msgid "JSON Security"
msgstr "JSONのセキュリティ"

# 6cc9067778e04f1c8b81e0e6db1a3d39
#: ../../flask/docs/security.rst:109
msgid ""
"In Flask 0.10 and lower, :func:`~flask.jsonify` did not serialize top-"
"level arrays to JSON. This was because of a security vulnerability in "
"ECMAScript 4."
msgstr ""
"Flask 0.10とそれ以前では、:func:`~flask.json.jsonify` は最上位レベルの"
"配列（top-level arrays）をJSONへシリアライズ（訳注：ネットワークで送受信"
"できるデータ形式へ変換するような処理）しませんでした。これはECMAScript 4"
"にあるセキュリティ上の脆弱性によるものでした。"

# 46c3a54a16ea4de1868f05ecea910037
#: ../../flask/docs/security.rst:112
msgid ""
"ECMAScript 5 closed this vulnerability, so only extremely old browsers "
"are still vulnerable. All of these browsers have `other more serious "
"vulnerabilities "
"<https://github.com/pallets/flask/issues/248#issuecomment-59934857>`_, so"
" this behavior was changed and :func:`~flask.jsonify` now supports "
"serializing arrays."
msgstr ""
"ECMAScript 5ではこの脆弱性は解決しており、従っていまだに脆弱性があるのは"
"非常に古いブラウザだけです。そのようなブラウザはすべて `別のより深刻な"
"脆弱性があり <https://github.com/pallets/flask/issues/248#"
"issuecomment-59934857>`_、従ってこの振る舞いは変更されていて、:func:"
"`~flask.json.jsonify` は今では配列のシリアライズをサポートしています。"

# 40a06406cbca4cd2918f57306894c341
#: ../../flask/docs/security.rst:120
msgid "Security Headers"
msgstr "セキュリティに関するヘッダ"

# 2be414f4eb6248d18a679b184f2e7234
#: ../../flask/docs/security.rst:122
msgid ""
"Browsers recognize various response headers in order to control security."
" We recommend reviewing each of the headers below for use in your "
"application. The `Flask-Talisman`_ extension can be used to manage HTTPS "
"and the security headers for you."
msgstr ""
"ブラウザは、セキュリティを制御するために様々なレスポンスのヘッダを認識"
"します。自分のアプリケーションで使うように、以下のヘッダをそれぞれ確認"
"しておくことをお勧めします。`Flask-Talisman`_ というFlask拡張は、"
"HTTPSとセキュリティに関するヘッダを管理するために使用できます。"

# 606dba6f02c74707aef49ef05c1e3229
#: ../../flask/docs/security.rst:130
msgid "HTTP Strict Transport Security (HSTS)"
msgstr ""
"HTTPの厳格なトランスポートのセキュリティ（HSTS）（HTTP Strict Transport "
"Security）"

# 920d787ddc25400a8203740b1429b4b2
#: ../../flask/docs/security.rst:132
msgid ""
"Tells the browser to convert all HTTP requests to HTTPS, preventing man-"
"in-the-middle (MITM) attacks. ::"
msgstr ""
"全てのHTTPリクエストをHTTPSへ変換するようブラウザに指示して、"
"man-in-the-middle（MITM）攻撃を防ぎます。::"

# 9630e5ea3aab46088deb54b80974781a
#: ../../flask/docs/security.rst:137
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-"
"Transport-Security"
msgstr ""

# b39c5bfb98f44130bce144b7e0bc40ea
#: ../../flask/docs/security.rst:142
msgid "Content Security Policy (CSP)"
msgstr "コンテンツのセキュリティポリシー（CSP）（Content Security Policy）"

# f5c3b798f46447b5b592e289d8e720d9
#: ../../flask/docs/security.rst:144
msgid ""
"Tell the browser where it can load various types of resource from. This "
"header should be used whenever possible, but requires some work to define"
" the correct policy for your site. A very strict policy would be::"
msgstr ""
"様々な種類のリソースについて、どこから読み込めるかをブラウザに指示し"
"ます。このヘッダは可能な限り使用するべきですが、自分のサイト用に適切な"
"ポリシーを定義するためにいくらかの作業が必要になります。非常に厳格な"
"ポリシーは以下のようになるでしょう::"

# 1eb3b3525792433088138a2b28c4ba75
#: ../../flask/docs/security.rst:150
msgid "https://csp.withgoogle.com/docs/index.html"
msgstr ""

# 2095607410924a2b9802a2a9fddb667e
#: ../../flask/docs/security.rst:151
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-"
"Security-Policy"
msgstr ""

# 22dbe869bfb9451d9dff967f57e06c7d
#: ../../flask/docs/security.rst:154
msgid "X-Content-Type-Options"
msgstr ""

# 656e05ceca2b419f82d90fed8285da56
#: ../../flask/docs/security.rst:156
msgid ""
"Forces the browser to honor the response content type instead of trying "
"to detect it, which can be abused to generate a cross-site scripting "
"(XSS) attack. ::"
msgstr ""
"レスポンスが示すcontent type（訳注：データの種類・形式を示すヘッダ）を"
"尊重するようブラウザに強要し、クロスサイトスクリプティング（XSS）攻撃の"
"生成に悪用される可能性がある、データ形式の推測機能を優先させないように"
"します。::"

# a03d0d99ec0843f982c330b7d8e20e65
#: ../../flask/docs/security.rst:162
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-"
"Options"
msgstr ""

# 1ddcec04e8cd4f549920bfc53f4c4e53
#: ../../flask/docs/security.rst:165
msgid "X-Frame-Options"
msgstr ""

# 6917a62dbd16495fa55d786f862c52ee
#: ../../flask/docs/security.rst:167
msgid ""
"Prevents external sites from embedding your site in an ``iframe``. This "
"prevents a class of attacks where clicks in the outer frame can be "
"translated invisibly to clicks on your page's elements. This is also "
"known as \"clickjacking\". ::"
msgstr ""
"外部サイトが ``iframe`` の中に、あなたのサイトを埋め込むことを防ぎます。"
"これは、外側のフレームでのクリックがあなたのページの要素をクリックする"
"ことへと、目に見えないやり方で変換できるようにする攻撃の類を防ぎます。"
"これは「clickjacking」としても知られています。::"

# 8003fdbac3ca44a0964297925e62ad0e
#: ../../flask/docs/security.rst:174
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"
msgstr ""

# 60b59e10d1c04f9a9bf036f2cd74192b
#: ../../flask/docs/security.rst:179
msgid "Set-Cookie options"
msgstr "Set-Cookieオプション"

# 538c643b913c4a4bbc7479fa90750ca5
#: ../../flask/docs/security.rst:181
msgid ""
"These options can be added to a ``Set-Cookie`` header to improve their "
"security. Flask has configuration options to set these on the session "
"cookie. They can be set on other cookies too."
msgstr ""
"以下のオプションはセキュリティを改善するために、``Set-cookie`` ヘッダへ"
"追加することができます。Flaskには、これらをセッションのクッキー（訳注: "
"Flaskがsessionオブジェクトでアクセス可能にしているデータを格納しており、"
"FlaskのSESSION_COOKIE_NAME設定で指定されているcookie）へ設定させる構成"
"オプションがあります。これらは、他のクッキーへも設定可能です。"

# 64d690f0bf09477fbc111af3ff9f7b27
#: ../../flask/docs/security.rst:185
msgid "``Secure`` limits cookies to HTTPS traffic only."
msgstr "``secure`` はクッキー（の送受信を）をHTTPS通信だけに限定します。"

# b0c78ad3e35041549e487767985e2158
#: ../../flask/docs/security.rst:186
msgid ""
"``HttpOnly`` protects the contents of cookies from being read with "
"JavaScript."
msgstr ""
"``HttpOnly`` は、クッキーの内容をJavaScriptで読み取られることを防ぎます。"

# 2de2035c7a074d0a99260f2ce7c49208
#: ../../flask/docs/security.rst:188
msgid ""
"``SameSite`` restricts how cookies are sent with requests from external "
"sites. Can be set to ``'Lax'`` (recommended) or ``'Strict'``. ``Lax`` "
"prevents sending cookies with CSRF-prone requests from external sites, "
"such as submitting a form. ``Strict`` prevents sending cookies with all "
"external requests, including following regular links."
msgstr ""
"``SameSite`` は、外部サイトからのリクエストからどのようにクッキーが"
"送信されるかについて制限します。``'Lax'`` （推奨）または ``'Strict'`` "
"に設定可能です。``Lax`` は、formを提出してくるような、外部サイトからの"
"CSRFがありがちなリクエストで一緒にクッキーを（ブラウザが）送信することを"
"防ぎます。``Strict`` は、通常のリンクをフォローすることを含む、全ての"
"外部リクエストで一緒にクッキーを（ブラウザが）送信することを防ぎます。"

# ab833b90a37e44fb93c28ea48149a50a
#: ../../flask/docs/security.rst:204
msgid ""
"Specifying ``Expires`` or ``Max-Age`` options, will remove the cookie "
"after the given time, or the current time plus the age, respectively. If "
"neither option is set, the cookie will be removed when the browser is "
"closed. ::"
msgstr ""
"``Expires`` または ``Max-Age`` オプションを指定すると、Expiresでは"
"与えられた時刻、Max-Ageでは現在時刻にageを加えた時刻、を過ぎた後にそれ"
"ぞれクッキーを削除します。もしどちらのオプションも設定されていない場合"
"は、ブラウザが閉じられたときにクッキーは削除されまれます。::"

# 93584cb51b904be6aa7cbc9bf49a02e8
#: ../../flask/docs/security.rst:211
msgid ""
"For the session cookie, if :attr:`session.permanent "
"<flask.session.permanent>` is set, then "
":data:`PERMANENT_SESSION_LIFETIME` is used to set the expiration. Flask's"
" default cookie implementation validates that the cryptographic signature"
" is not older than this value. Lowering this value may help mitigate "
"replay attacks, where intercepted cookies can be sent at a later time. ::"
msgstr ""
"セッションのクッキーについては、もし :attr:`session.permanent "
"<flask.session.permanent>` が設定されていた場合には、:data:"
"`PERMANENT_SESSION_LIFETIME` が消去（のタイミング）の設定に使用されます。"
"Flaskの標準設定でのクッキーの実装は、暗号学的に施された署名が、この値より"
"古くなっていないことを検証します。この値を小さくするほど、横取りされた"
"クッキーを後で送信できるようにする、replay攻撃の抑制への手助けになること"
"でしょう。::"

# 274b50d054a34df681c73c8bba3ccc81
#: ../../flask/docs/security.rst:229
msgid ""
"Use :class:`itsdangerous.TimedSerializer` to sign and validate other "
"cookie values (or any values that need secure signatures)."
msgstr ""
"ほかのクッキーの値（もしくは安全に署名する必要があるあらゆる値）の"
"署名と検証には :class:`itsdangerous.timed.TimedSerializer` を使用して"
"ください。"

# 20eed18e9d044ebc9d6cd599ef00cdcd
#: ../../flask/docs/security.rst:232
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"
msgstr ""

# 537f02df35fc40b2965ad2b508a93836
#: ../../flask/docs/security.rst:233
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"
msgstr ""

# 84b7a24d81b44796ab2236d74b302097
#: ../../flask/docs/security.rst:239
msgid "HTTP Public Key Pinning (HPKP)"
msgstr "HTTP公開鍵ピン止め（HPKP）（HTTP Public Key Pinning）"

# eba0c9e59dbf4f749baa52c376d076ea
#: ../../flask/docs/security.rst:241
msgid ""
"This tells the browser to authenticate with the server using only the "
"specific certificate key to prevent MITM attacks."
msgstr ""
"これは、MITM攻撃を防ぐために、特定の証明書の鍵だけを使用してサーバを"
"認証するよう、ブラウザに指示します。"

# 3e85beadc553448d86d6f1f6984857e3
#: ../../flask/docs/security.rst:245
msgid ""
"Be careful when enabling this, as it is very difficult to undo if you set"
" up or upgrade your key incorrectly."
msgstr ""
"もしも鍵を不適当に設定もしくは更新してしまった場合は、元に戻すことが非常"
"に難しいため、これを有効にするときは注意してください。"

# 3b624609acbe42998fdcb3a3df476525
#: ../../flask/docs/security.rst:248
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"
msgstr ""

#: ../../flask/docs/security.rst:252
msgid "Copy/Paste to Terminal"
msgstr ""
"端末へのコピー／貼り付け（Copy/Paste to Terminal）"

#: ../../flask/docs/security.rst:254
msgid ""
"Hidden characters such as the backspace character (``\\b``, ``^H``) can "
"cause text to render differently in HTML than how it is interpreted if "
"`pasted into a terminal <https://security.stackexchange.com/q/39118>`__."
msgstr ""
"バックスペース文字（``\\b``、``^H``）のように見えない文字は、"
"`端末に貼り付けた場合 <https://security.stackexchange.com/q/39118>`__ "
"の解釈のされ方とは違うようにHTMLでは変換されるテキストの原因になります。"

#: ../../flask/docs/security.rst:258
msgid ""
"For example, ``import y\\bose\\bm\\bi\\bt\\be\\b`` renders as ``import "
"yosemite`` in HTML, but the backspaces are applied when pasted into a "
"terminal, and it becomes ``import os``."
msgstr ""
"例えば、``import y\\bose\\bm\\bi\\bt\\be\\b`` はHTMLでは ``import "
"yosemite`` と変換表示されますが、端末に貼り付けられたときはバック"
"スペースが適用され、``import os`` になります。"

#: ../../flask/docs/security.rst:262
msgid ""
"If you expect users to copy and paste untrusted code from your site, such"
" as from comments posted by users on a technical blog, consider applying "
"extra filtering, such as replacing all ``\\b`` characters."
msgstr ""
"もしユーザが、例えば技術ブログでユーザが投稿したコメントのように、"
"あなたのサイトから信頼できないコードをコピーして貼り付けることが予想"
"される場合、全ての ``\\b`` 文字を置き換えるような、追加のフィルタ"
"リングを適用することを検討してください。"

#: ../../flask/docs/security.rst:270
msgid ""
"Most modern terminals will warn about and remove hidden characters when "
"pasting, so this isn't strictly necessary. It's also possible to craft "
"dangerous commands in other ways that aren't possible to filter. "
"Depending on your site's use case, it may be good to show a warning about"
" copying code in general."
msgstr ""
"殆どの最近の端末は、貼り付けるときに見えない文字列を警告して削除するで"
"あろうために、これは厳密には必須ではありません。フィルタリングできない"
"他のやり方で危険なコマンドを欺くことも可能です。自分のサイトのユース"
"ケースによりますが、一般的にコードのコピーに対して警告を表示するのは"
"良いことでしょう。"

# d7315452e32f4b7d9b2d54ac80c0c46e
#~ msgid "X-XSS-Protection"
#~ msgstr ""

# 7fdc2627489c48ad8146c81595831551
#~ msgid ""
#~ "The browser will try to prevent "
#~ "reflected XSS attacks by not loading "
#~ "the page if the request contains "
#~ "something that looks like JavaScript and"
#~ " the response contains the same data."
#~ " ::"
#~ msgstr ""
#~ "もしもリクエストがなにかJavaScriptのようなものを含み、レスポンスも同じデータを含んでいる場合に、ページを読み込まないようにすることで、ブラウザがreflected"
#~ " XSS攻撃を防ぐよう試みるようにします。"

# 67127aa57511409da3682a0e8fe9482e
#~ msgid ""
#~ "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X"
#~ "-XSS-Protection"
#~ msgstr ""

