# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-21 20:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

# 4b015d1703354ae98b80122f550dbfd1
#: ../../flask/docs/extensiondev.rst:2
msgid "Flask Extension Development"
msgstr "Flask拡張の開発"

# b9b9314d4f7041de93344467d1cb7b6b
#: ../../flask/docs/extensiondev.rst:4
msgid ""
"Flask, being a microframework, often requires some repetitive steps to "
"get a third party library working. Many such extensions are already "
"available on `PyPI`_."
msgstr ""
"Flaskは、小さなフレームワークなので、サードパーティのライブラリを機能させるために、しばしば反復的なステップを要求します。そのようなFlask拡張の多くは\\"
" `PyPI`_\\ で入手可能です。"

# 67d2ec6fde344ea79695b8c8a950410b
#: ../../flask/docs/extensiondev.rst:8
msgid ""
"If you want to create your own Flask extension for something that does "
"not exist yet, this guide to extension development will help you get your"
" extension running in no time and to feel like users would expect your "
"extension to behave."
msgstr "まだ存在しない何かしら用にもし自分独自のFlask拡張を作りたい場合は、時間をかけずに自分のFlask拡張を走らせ、あなたのFlask拡張は動くとユーザが予想するようになるだろうと感じるために、Flask拡張開発のためのこのガイドが手助けになるでしょう。"

# 82efb51cfa934a3590dc5f518494da7d
#: ../../flask/docs/extensiondev.rst:14
msgid "Anatomy of an Extension"
msgstr "Flask拡張の解剖（Anatomy of an Extension）"

# e6c132d985d74f75beb1746826f41ef7
#: ../../flask/docs/extensiondev.rst:16
msgid ""
"Extensions are all located in a package called ``flask_something`` where "
"\"something\" is the name of the library you want to bridge.  So for "
"example if you plan to add support for a library named `simplexml` to "
"Flask, you would name your extension's package ``flask_simplexml``."
msgstr ""
"Flask拡張はすべて、「something」部分は橋渡ししたいライブラリの名前とした、\\ ``flask_something``\\ "
"と呼ばれるパッケージの中に置きます。例えば、もし\\ `simplexml`\\ "
"という名前のライブラリへのサポートをFlaskへ追加することを計画している場合、そのFlask拡張のパッケージは\\ "
"``flask_simplexml``\\ と名付けるでしょう。"

# a9373f58b34441cba54d7eed86047b71
#: ../../flask/docs/extensiondev.rst:21
msgid ""
"The name of the actual extension (the human readable name) however would "
"be something like \"Flask-SimpleXML\".  Make sure to include the name "
"\"Flask\" somewhere in that name and that you check the capitalization. "
"This is how users can then register dependencies to your extension in "
"their :file:`setup.py` files."
msgstr ""
"しかしながら、実際のFlask拡張の名前（（コンピュータ処理用ではなく）人が読める名前）は「Flask-"
"SimpleXML」のようなものになるでしょう。「Flask」をFlask拡張の名前のどこかに含め、どう大文字を使うかチェックすることを忘れないようにしてください。これ（人が読める名前）が、あなたのFlask拡張への依存関係を\\"
" :file:`setup.py`\\ ファイルの中でユーザが登録できるようにするやり方になります。"

# d2ab1b859b4343db815ac52a8c60bdea
#: ../../flask/docs/extensiondev.rst:27
msgid ""
"But what do extensions look like themselves?  An extension has to ensure "
"that it works with multiple Flask application instances at once.  This is"
" a requirement because many people will use patterns like the "
":doc:`/patterns/appfactories` pattern to create their application as "
"needed to aid unittests and to support multiple configurations. Because "
"of that it is crucial that your application supports that kind of "
"behavior."
msgstr ""
"しかし、Flask拡張自身はどのようなものなのでしょうか？Flask拡張は、同時に"
"複数のFlaskアプリケーションのインスタンスで機能することを保証する必要が"
"あります。これは、ユニットテストを助け複数の設定を持つことをサポートする"
"ために、多くの人が :doc:`/patterns/appfactories` のようなパターンを使って"
"必要に応じてアプリケーションを作成することから、要求されます。そのため、"
"自分のアプリケーションがその種の動作に対応することは、決定的に重要です。"

# 96c4f40bc1274b5abaef24bdbdf358e3
#: ../../flask/docs/extensiondev.rst:35
msgid ""
"Most importantly the extension must be shipped with a :file:`setup.py` "
"file and registered on PyPI.  Also the development checkout link should "
"work so that people can easily install the development version into their"
" virtualenv without having to download the library by hand."
msgstr ""
"最も重要なこととして、Flask拡張は\\ :file:`setup.py`\\ "
"ファイルと一緒に出荷されPyPIに登録される必要があります。さらに、人々が手作業でライブラリをダウンロードすることなくvirtualenvに開発バージョンを容易にインストールできるように、開発版チェックアウトのリンクを機能させるべきです。"

# 83631c84d3e34240b8fd878592f003dc
#: ../../flask/docs/extensiondev.rst:40
msgid ""
"Flask extensions must be licensed under a BSD, MIT or more liberal "
"license in order to be listed in the Flask Extension Registry.  Keep in "
"mind that the Flask Extension Registry is a moderated place and libraries"
" will be reviewed upfront if they behave as required."
msgstr ""
"Flask Extension Registry（訳注: コミュニティで認められたFlask拡張のリスト、\\ "
"**ただしこの翻訳を作成している時点では、今後メンテナンスを続けないことが既に合意されています**\\ "
"）でリストされるためには、Flask拡張はBSD、MITもしくはもっと自由な（liberal）ライセンスの下におかれる必要があります。Flask "
"Extension "
"Registryは議論が管理されている（moderated）場所であり、ライブラリは要求通りの振る舞いをするか事前にレビューされることを覚えておいてください。"

# 30fe6bf05e94458eade6234743be86a1
#: ../../flask/docs/extensiondev.rst:46
msgid "\"Hello Flaskext!\""
msgstr ""

# e3f1822f82414e3c83814cdff830bf5a
#: ../../flask/docs/extensiondev.rst:48
msgid ""
"So let's get started with creating such a Flask extension.  The extension"
" we want to create here will provide very basic support for SQLite3."
msgstr "では、ここまで説明したようなFlask拡張の作成を始めましょう。ここで作ろうとしているFlask拡張はSQLite3への非常に基本的なサポートを提供していきます。"

# 90f35b13f36941bdbe7a6e9219a21342
#: ../../flask/docs/extensiondev.rst:51
msgid "First we create the following folder structure::"
msgstr "最初に、以下のフォルダ構造を作成します::"

# a6859b93bb3046948905ffe9553cb329
#: ../../flask/docs/extensiondev.rst:58
msgid "Here's the contents of the most important files:"
msgstr "以下は、最も重要なファイルの内容です::"

# 158ea301e44f4f4e855be380aebf4c44
#: ../../flask/docs/extensiondev.rst:61
msgid "setup.py"
msgstr ""

# ad3b055a060042ac811160968075daa6
#: ../../flask/docs/extensiondev.rst:63
msgid ""
"The next file that is absolutely required is the :file:`setup.py` file "
"which is used to install your Flask extension.  The following contents "
"are something you can work with::"
msgstr ""
"絶対必要になる以下のファイルは\\ :file:`setup.py`\\ "
"ファイルであり、それは自分のFlask拡張をインストールするときに使います。以下の内容は、何かしら、あなたが作業に使うことができるものです::"

# a2bd5feb61a345f4a18355bbbcdbb01f
#: ../../flask/docs/extensiondev.rst:106
msgid ""
"That's a lot of code but you can really just copy/paste that from "
"existing extensions and adapt."
msgstr "たくさんのコードですが、既存のFlask拡張から本当にただコピー／ペーストだけして、それから調整できます。"

# 650d8fdc216a4e5ba566886388412fc3
#: ../../flask/docs/extensiondev.rst:110
msgid "flask_sqlite3.py"
msgstr ""

# 3919108123e6461ebcce51729e91de03
#: ../../flask/docs/extensiondev.rst:112
msgid ""
"Now this is where your extension code goes.  But how exactly should such "
"an extension look like?  What are the best practices?  Continue reading "
"for some insight."
msgstr "そして、ここからはFlask拡張の実際のコードに進みます。しかし、先ほど説明したようなFlask拡張は正確にはどのような姿であるべきでしょうか？何がベスト・プラクティスになるのでしょうか？いくらかの洞察を得るために、読み続けてください。"

# 2255bfd00af642cfa713764130307301
#: ../../flask/docs/extensiondev.rst:117
msgid "Initializing Extensions"
msgstr "Flask拡張の初期処理（Initializing Extensions）"

# 692bc0e2f61347708d1c5af24d3629c1
#: ../../flask/docs/extensiondev.rst:119
msgid ""
"Many extensions will need some kind of initialization step.  For example,"
" consider an application that's currently connecting to SQLite like the "
"documentation suggests (:doc:`/patterns/sqlite3`). So how does the "
"extension know the name of the application object?"
msgstr ""
"多くのFlask拡張はある種の初期化のステップを必要とするでしょう。例えば、"
"ドキュメントが提案する（:doc:`/patterns/sqlite3`）ようにその時点でSQLiteへ"
"接続しているアプリケーションを考えてください。それでは、アプリケーションの"
"オブジェクトの名前（訳注: アプリケーションのオブジェクトを格納している変数"
"名のような意味合い）を、Flask拡張はどうやって知ることができるでしょうか？"

# 0b6f5979b0254be4895cd565f701094c
#: ../../flask/docs/extensiondev.rst:124
msgid "Quite simple: you pass it to it."
msgstr "非常にシンプルです: Flask拡張へアプリケーションのオブジェクトを自分で（訳注: 引数などで明示的に）渡します"

# e41e7e622b344e3b93e88e43254141f8
#: ../../flask/docs/extensiondev.rst:126
msgid "There are two recommended ways for an extension to initialize:"
msgstr "Flask拡張を初期化するには2つの推奨されるやり方があります:"

# 53c2d82da9394ce5b9f4e597a08506f3
#: ../../flask/docs/extensiondev.rst:128
msgid "initialization functions:"
msgstr "初期化関数:"

# 2d65b25aecc942a590b6aacca8094a15
#: ../../flask/docs/extensiondev.rst:130
msgid ""
"If your extension is called `helloworld` you might have a function called"
" ``init_helloworld(app[, extra_args])`` that initializes the extension "
"for that application.  It could attach before / after handlers etc."
msgstr ""
"もし自分のFlask拡張が\\ `helloworld`\\ と呼ばれる場合は、アプリケーション用にFlask拡張を初期化する\\ "
"``init_helloworld(app[, extra_args])``\\ "
"とよばれる関数を持っているかもしれません。それは事前／事後処理機能（before / after handlers）などを付加するかもしれません。"

# 1866870390e6413eb1c4fcc7fac38eaf
#: ../../flask/docs/extensiondev.rst:135
msgid "classes:"
msgstr "クラス:"

#: ../../flask/docs/extensiondev.rst:137
msgid ""
"Classes work mostly like initialization functions but can later be used "
"to further change the behavior."
msgstr ""
"クラスは殆ど初期化関数のように働きますが、後でさらに振る舞いを変更でき"
"ます。"

# d0d2670a09b64d26bb9feeab3b89bde9
#: ../../flask/docs/extensiondev.rst:140
msgid ""
"What to use depends on what you have in mind.  For the SQLite 3 extension"
" we will use the class-based approach because it will provide users with "
"an object that handles opening and closing database connections."
msgstr ""
"何を使用するかは、何を考えているかに依存します。SQLite "
"3拡張用には、データベースの接続（connection）の開く処理と閉じる処理を行うオブジェクトをユーザへ提供するため、クラスをベースにしたアプローチを使用していきます。"

# b29b657adcd34d02bb67e68ad2830708
#: ../../flask/docs/extensiondev.rst:144
msgid ""
"When designing your classes, it's important to make them easily reusable "
"at the module level. This means the object itself must not under any "
"circumstances store any application specific state and must be shareable "
"between different applications."
msgstr "クラスを設計するとき、モジュールのレベルで容易に再利用可能にすることが重要です。これは、Flask拡張クラスのオブジェクト（インスタンス）自身は、アプリケーション固有であるあらゆる状態情報を、どのような状況下でも格納してはいけないこと、（Flask拡張クラスのオブジェクトは）違うアプリケーションの間で共有可能にしなければいけないことを意味しています。"

# 39cb4f1b650549ba861aa43465b68584
#: ../../flask/docs/extensiondev.rst:150
msgid "The Extension Code"
msgstr "Flask拡張のコード"

# d5fa107bc49d42c99b88a4c2bdc2cab7
#: ../../flask/docs/extensiondev.rst:152
msgid "Here's the contents of the `flask_sqlite3.py` for copy/paste::"
msgstr "以下はコピー／ペースト用の\\ `flask_sqlite3.py`\\ の内容です::"

# 2b3744ad57934725a48eee9656fd45b0
#: ../../flask/docs/extensiondev.rst:185
msgid "So here's what these lines of code do:"
msgstr "そして、これらのコード行がすることは以下のとおりです:"

# 4d98b50aeb794de38ad2f3b291573b7c
#: ../../flask/docs/extensiondev.rst:187
msgid ""
"The ``__init__`` method takes an optional app object and, if supplied, "
"will call ``init_app``."
msgstr ""
"``__init__``\\ メソッドは、オプションのappオブジェクトは引き取り、もしappが供給された場合は\\ ``init_app``\\"
" を呼び出します。"

# 293f9b8d889949b298c7eb53a71e9b66
#: ../../flask/docs/extensiondev.rst:189
msgid ""
"The ``init_app`` method exists so that the ``SQLite3`` object can be "
"instantiated without requiring an app object.  This method supports the "
"factory pattern for creating applications.  The ``init_app`` will set the"
" configuration for the database, defaulting to an in memory database if "
"no configuration is supplied.  In addition, the ``init_app`` method "
"attaches the ``teardown`` handler."
msgstr ""
"``init_app``\\ メソッドは、appオブジェクトを（Flask拡張内で保持することを）要求することなく\\ ``SQLite3``\\"
" "
"オブジェクトを初期化できるようにするために存在します。このメソッドはアプリケーション（Flaskアプリケーションのインスタンス）作成用のfactoryパターンをサポートします。\\"
" ``init_app``\\ はデータベース用の設定をセットし、もし設定が供給されていない場合はメモリ中のデータベース（in memory "
"database）を初期設定にします。加えて、この\\ ``init_app``\\ メソッドは\\ ``teardown``\\ "
"（取り壊し）処理機能（handler）を取り付けます。"

# e23e0aa92f034d1ebcf2af36eed381db
#: ../../flask/docs/extensiondev.rst:195
msgid "Next, we define a ``connect`` method that opens a database connection."
msgstr "次に、データベース接続（connection）を開く\\ ``connect``\\ メソッドを定義しています。"

# a6dad195071f41b7a9d73d5fc66e9caf
#: ../../flask/docs/extensiondev.rst:196
msgid ""
"Finally, we add a ``connection`` property that on first access opens the "
"database connection and stores it on the context.  This is also the "
"recommended way to handling resources: fetch resources lazily the first "
"time they are used."
msgstr ""
"最後に、初めてアクセスしたときにデータベース接続（connection）を開き、それ（データベース接続）をコンテキストに格納する\\ "
"``connection``\\ プロパティを追加しています。これはリソースを扱う推奨されるやり方でもあります: "
"リソースが使われる最初の時までリソースの取得を遅らせます。"

# 8bb20b016ea7405dade75e42a48a77a9
#: ../../flask/docs/extensiondev.rst:201
msgid ""
"Note here that we're attaching our database connection to the top "
"application context via ``_app_ctx_stack.top``. Extensions should use the"
" top context for storing their own information with a sufficiently "
"complex name."
msgstr ""
"ここでは、データベース接続を（内部管理用のスタックの）一番上のアプリケーションのコンテキストに、\\ "
"``_app_ctx_stack.top``\\ "
"を介して取り付けていることに注意してください。Flask拡張は自分の持つ情報を格納するときは、（他のFlask拡張などが使う名前と重複しないように）十分に複雑な名前と一緒に、（内部管理用スタックの）一番上のコンテキストを使うべきです。"

# a9934419251b4ceda75f30985c1a9fbf
#: ../../flask/docs/extensiondev.rst:206
msgid ""
"So why did we decide on a class-based approach here?  Because using our "
"extension looks something like this::"
msgstr "それでは、なぜここではクラスベースのアプローチに決めたのでしょうか？このFlask拡張は以下に示すような使い方をするためです::"

# d586ce53100d4828899fcf1b58d34ca7
#: ../../flask/docs/extensiondev.rst:216
msgid "You can then use the database from views like this::"
msgstr "こうした後で、以下のようにしてviewからデータベースを使用できます::"

# 980cf6a7b93545dc98d2c50ca03c732e
#: ../../flask/docs/extensiondev.rst:223
msgid ""
"Likewise if you are outside of a request you can use the database by "
"pushing an app context::"
msgstr ""
"似たようなやり方で、もしリクエストの外側（訳注: "
"リクエストの処理開始前もしくは終了後で、内部管理用のスタックにアプリケーションのコンテキストがpushされていない状態）であった場合は、appのコンテキストをpushすることでデータベースを使用可能です。::"

# 5fe85b5bacc84530b92db912834c98cc
#: ../../flask/docs/extensiondev.rst:230
msgid ""
"At the end of the ``with`` block the teardown handles will be executed "
"automatically."
msgstr "``with``\\ ブロックの最後で、取り壊し処理（teardown handles）が自動的に実行されます。"

# 5511c9c94a1440b28f08b4209e7569d3
#: ../../flask/docs/extensiondev.rst:233
msgid ""
"Additionally, the ``init_app`` method is used to support the factory "
"pattern for creating apps::"
msgstr "加えて、\\ ``init_app``\\ メソッドはapp作成用のfactoryパターンに対応するためにも使用されます::"

# 78e860f2bfff44ea8635af762699d82d
#: ../../flask/docs/extensiondev.rst:241
msgid ""
"Keep in mind that supporting this factory pattern for creating apps is "
"required for approved flask extensions (described below)."
msgstr ""
"このapp作成用factoryパターンへの対応は、承認されたFlask拡張（approved flask "
"extensions）（後で説明されます）で必要とされることを覚えておいてください。"

# 5f7586cbf87d4ab7bf0a3c3f30c2addd
#: ../../flask/docs/extensiondev.rst:244
msgid "Note on ``init_app``"
msgstr "``init_app``\\ についての注意"

# 9c9e6b9801eb447d8f7aa3defa54bc04
#: ../../flask/docs/extensiondev.rst:246
msgid ""
"As you noticed, ``init_app`` does not assign ``app`` to ``self``.  This "
"is intentional!  Class based Flask extensions must only store the "
"application on the object when the application was passed to the "
"constructor.  This tells the extension: I am not interested in using "
"multiple applications."
msgstr ""
"お気づきのように、\\ ``init_app``\\ は\\ ``app``\\ を\\ ``self``\\ （訳注: "
"クラスのインスタンスのこと、Pythonでは慣例的にクラスのメソッドが自分自身のインスタンスを引数で受け取るときはselfが使用されることから、インスタンスを指して使われています）へ割り当てていません。これは意図的なものです！クラスベースのFlask拡張では、自分のオブジェクトにアプリケーションを保持するのは、アプリケーション（のインスタンス）がコンストラクタで渡されたときだけでなければいけません。これは、「複数のアプリケーションで使われることには関心がありません」ということをFlask拡張に伝えます。"

# 25c930e836804fb0acdefdc92114820f
#: ../../flask/docs/extensiondev.rst:252
msgid ""
"When the extension needs to find the current application and it does not "
"have a reference to it, it must either use the :data:`~flask.current_app`"
" context local or change the API in a way that you can pass the "
"application explicitly."
msgstr ""
"もしFlask拡張がその時点のアプリケーションを見つけ出す必要があり、自分ではアプリケーションへの参照を持っていない場合は、context "
"localの\\ :data:`~flask.current_app`\\ "
"を使用するか、アプリケーションを明示的に渡せるようにAPIを変更するかが必要になります。"

# f3a3428dc7054b93871400a87a05a056
#: ../../flask/docs/extensiondev.rst:259
msgid "Using _app_ctx_stack"
msgstr "_app_ctx_stackの使用"

# 201e81a0fed740b8a78f5abb9254f38a
#: ../../flask/docs/extensiondev.rst:261
msgid ""
"In the example above, before every request, a ``sqlite3_db`` variable is "
"assigned to ``_app_ctx_stack.top``.  In a view function, this variable is"
" accessible using the ``connection`` property of ``SQLite3``.  During the"
" teardown of a request, the ``sqlite3_db`` connection is closed.  By "
"using this pattern, the *same* connection to the sqlite3 database is "
"accessible to anything that needs it for the duration of the request."
msgstr ""
"上記の例では、全てのリクエストの前に、\\ ``sqlite3_db``\\ 変数が\\ ``_app_ctx_stack.top``\\ "
"に割り当てられます。view関数の中では、この変数は\\ ``SQLite3``\\ の\\ ``connection``\\ "
"プロパティを使用してアクセス可能です。リクエストの取り壊し(teardown）の間に、\\ ``sqlite3_db``\\ "
"接続（connection）は閉じられます。このパターンを使用することで、sqlite3データベースへの\\ *同じ*\\ "
"接続（connection）が、それを必要とするあらゆるものからリクエストの期間中はアクセス可能になります。"

# 79f1654a933942968e276ade411e7f81
#: ../../flask/docs/extensiondev.rst:270
msgid "Learn from Others"
msgstr "他から学習しましょう"

# b0bfa4bbeed2416ab6f901fa93a5dd4d
#: ../../flask/docs/extensiondev.rst:272
msgid ""
"This documentation only touches the bare minimum for extension "
"development. If you want to learn more, it's a very good idea to check "
"out existing extensions on the `PyPI`_.  If you feel lost there is still "
"the `mailinglist`_ and the `Discord server`_ to get some ideas for nice "
"looking APIs.  Especially if you do something nobody before you did, it "
"might be a very good idea to get some more input.  This not only "
"generates useful feedback on what people might want from an extension, "
"but also avoids having multiple developers working in isolation on pretty"
" much the same problem."
msgstr ""
"このドキュメントではFlask拡張開発の必要最小限だけに触れています。もしさらに学びたいときは、\\ `PyPI`_\\ "
"にある既存のFlask拡張をチェックするのはとても良いアイデアです。もしも途方に暮れたときは、魅力的なAPIへのアイデアを得るために\\ "
"`mailinglist`_\\ と\\ `Discord server`_\\ "
"もあります。特に、もし誰もしたことのないことをやろうとしている場合は、さらにいくらかのインプットを得るのはとても良いアイデアになるかもしれません。これは人々がFlask拡張から何を求めることがあるかについての使えるフィードバックを生み出すだけでなく、殆ど同じ問題に対して複数の開発者が分け隔てられたまま作業することも回避させます。"

# b09b269cd0164789bc152b9d0573ed75
#: ../../flask/docs/extensiondev.rst:281
msgid ""
"Remember: good API design is hard, so introduce your project on the "
"mailing list, and let other developers give you a helping hand with "
"designing the API."
msgstr ""
"覚えておいてください: "
"良いAPIの設計は困難ですので、自分のプロジェクトをメーリングリストで紹介し、他の開発者がAPIの設計と一緒に助けの手を差し伸べられるようにしましょう。"

# 97adce4d76a14f588d6adf3a0571d361
#: ../../flask/docs/extensiondev.rst:285
msgid ""
"The best Flask extensions are extensions that share common idioms for the"
" API.  And this can only work if collaboration happens early."
msgstr ""
"最も良いFlask拡張は、APIについての一般的な慣用語（common "
"idioms）を共有しているFlask拡張です。そして、それは早い段階での共同作業があって初めて機能するでしょう。"

# d0cae3d4e1ad4833b12242ffc9eb50e6
#: ../../flask/docs/extensiondev.rst:289
msgid "Approved Extensions"
msgstr "承認されたFlask拡張（Approved Extensions）"

#: ../../flask/docs/extensiondev.rst:291
msgid ""
"Flask previously had the concept of approved extensions. These came with "
"some vetting of support and compatibility. While this list became too "
"difficult to maintain over time, the guidelines are still relevant to all"
" extensions maintained and developed today, as they help the Flask "
"ecosystem remain consistent and compatible."
msgstr ""
"Flaskには以前approved extensionsという概念がありました。これらはサポート"
"と互換性についてのいくつかの調査が伴っていました。approved extensionsの"
"リストは時間とともに保守があまりにも難しくなっていきましたが、Flaskの"
"エコシステムの一貫性と互換性を残す手助けになるため、approved extensions"
"のガイドラインは今日でも保守および開発されているすべてのFlask拡張に今でも"
"関係があります。"

#: ../../flask/docs/extensiondev.rst:297
msgid ""
"An approved Flask extension requires a maintainer. In the event an "
"extension author would like to move beyond the project, the project "
"should find a new maintainer and transfer access to the repository, "
"documentation, PyPI, and any other services. If no maintainer is "
"available, give access to the Pallets core team."
msgstr ""
"approved extensionにはメンテナーが必要です。Flask拡張の作者がプロジェクト"
"の外へ移動するような出来事が起きたときは、プロジェクトは新しいメンテナー"
"を見つけ、リポジトリ、ドキュメント、PyPI、その他のサービスへのアクセスを"
"移管しなければなりません。もしメンテナーがいない場合は、Palletsのコア"
"チームにアクセスを与えてください。"

# 5d6a7813ec5247fd88197eabac557aa2
#: ../../flask/docs/extensiondev.rst:302
msgid ""
"The naming scheme is *Flask-ExtensionName* or *ExtensionName-Flask*. It "
"must provide exactly one package or module named "
"``flask_extension_name``."
msgstr ""
"名前の枠組み（naming scheme）は\ *Flask-ExtensionName*\ または\ "
"*ExtensionName-Flask*\ です。Flask拡張は\\ ``flask_extensionname``\\ と"
"いう名前の、正確に１つのパッケージもしくはモジュールを提供する必要があり"
"ます。"

#: ../../flask/docs/extensiondev.rst:305
msgid ""
"The extension must be BSD or MIT licensed. It must be open source and "
"publicly available."
msgstr ""
"Flask拡張のライセンスはBSD/MIT/WTFPLである必要があります。それはオープン"
"ソースであり、公開されている必要があります。"

# 6dd6c3156ecb43a4ab79d55b6f06b0df
#: ../../flask/docs/extensiondev.rst:307
msgid "The extension's API must have the following characteristics:"
msgstr "Flask拡張のAPIは以下の特性を持つ必要があります:"

#: ../../flask/docs/extensiondev.rst:309
msgid ""
"It must support multiple applications running in the same Python process."
" Use ``current_app`` instead of ``self.app``, store configuration and "
"state per application instance."
msgstr ""
"同じPythonプロセスの中で走っている複数のアプリケーションに対応している"
"必要があります。\ ``self.app``\ の代わりに\ ``current_app``\ を使用し、"
"アプリケーションのインスタンス毎に設定および状態を格納します。"

# 51ca334b44014763b5a7c19738db27d1
#: ../../flask/docs/extensiondev.rst:312
msgid ""
"It must be possible to use the factory pattern for creating applications."
" Use the ``ext.init_app()`` pattern."
msgstr ""
"アプリケーションを作成するためのfactoryパターンが使用可能である必要があり"
"ます。\ ``ext.init_app()``\ パターンを使用してください。"

#: ../../flask/docs/extensiondev.rst:315
msgid ""
"From a clone of the repository, an extension with its dependencies must "
"be installable with ``pip install -e .``."
msgstr ""
"リポジトリのクローンから、Flask拡張はその依存対象も一緒に\ ``pip install "
"-e .``\ でインストールできる必要があります。"

#: ../../flask/docs/extensiondev.rst:317
msgid ""
"It must ship a testing suite that can be invoked with ``tox -e py`` or "
"``pytest``. If not using ``tox``, the test dependencies should be "
"specified in a ``requirements.txt`` file. The tests must be part of the "
"sdist distribution."
msgstr ""
"``tox -e py``\ または\ ``pytest``\ を使って起動できるテスト一式（testing "
"suite）をリリース（ship）する必要があります。もし\ ``tox``\ を使わない"
"場合、テストの依存対象は\ ``requirements.txt``\ ファイルの中で指定する"
"べきです。テストはソース配布物（sdist distribution）の一部である必要が"
"あります。"

# aabcb7954a1b40689d66bb1c9033d34d
#: ../../flask/docs/extensiondev.rst:321
msgid ""
"The documentation must use the ``flask`` theme from the `Official Pallets"
" Themes`_. A link to the documentation or project website must be in the "
"PyPI metadata or the readme."
msgstr ""
"ドキュメントは\\ `Official Pallets Themes`_\\ の\\ ``flask``\\ テーマを使用する必要があります。"
"ドキュメントまたはプロジェクトのwebサイトへのリンクがPyPIメタデータまたは"
"readmeの中にある必要があります。"

#: ../../flask/docs/extensiondev.rst:324
msgid ""
"For maximum compatibility, the extension should support the same versions"
" of Python that Flask supports. 3.6+ is recommended as of 2020. Use "
"``python_requires=\">= 3.6\"`` in ``setup.py`` to indicate supported "
"versions."
msgstr ""
"互換性を最大化するために、Flask拡張はFlaskがサポートするものと同じ"
"バージョンのPythonをサポートする必要があります。2020年時点では3.6以上が"
"推奨されます。サポートされるバージョンを指示するために、\ ``setup.py``\ "
"の中で\ ``python_requires=\">=3.6\"``\ を使用します。"

# 8f78234d41494d478ae59a803030ea19
#~ msgid ""
#~ "Flask also has the concept of "
#~ "approved extensions.  Approved extensions are"
#~ " tested as part of Flask itself "
#~ "to ensure extensions do not break "
#~ "on new releases.  These approved "
#~ "extensions are listed on the `Flask "
#~ "Extension Registry`_ and marked appropriately."
#~ "  If you want your own extension "
#~ "to be approved you have to follow"
#~ " these guidelines:"
#~ msgstr ""
#~ "**（訳注: この日本語訳作成時点で、Flask Extension "
#~ "Registryはメンテナンスが停止しています。この段落の趣旨も最新版ドキュメントでは調整されており、Flask拡張のためには役立つ内容があるという立場からガイドを示す位置づけになっています。この節の内容については特に、原文の最新版も確認してください）**"
#~ " Flaskはapproved extensionというコンセプトも持ち合わせています。approved "
#~ "extensionは、新しいリリースでもそのFlask拡張が壊れていないことを確認するためにFlask自身の一部としてテストされています。それらのapproved"
#~ " extensionは\\ `Flask Extension Registry`_\\ "
#~ "に一覧があり、適切であると印付られています。もしも自分のFlask拡張を承認してほしい場合、以下のガイドラインに従う必要があります:"

# d34ecffdab1943d7a0ac1836cefb939b
#~ msgid ""
#~ "An approved Flask extension requires a"
#~ " maintainer. In the event an "
#~ "extension author would like to move "
#~ "beyond the project, the project should"
#~ " find a new maintainer including full"
#~ " source hosting transition and PyPI "
#~ "access.  If no maintainer is available,"
#~ " give access to the Flask core "
#~ "team."
#~ msgstr ""
#~ "approved "
#~ "extensionにはメンテナーが必要です。Flask拡張の作者がプロジェクトの外へ移動するような出来事が起きたときは、プロジェクトは、ソースコードのホスティングの移行およびPyPIアクセスも含めた、新しいメンテナーを見つけなければなりません。もしメンテナーがいない場合は、Flaskのコアチームにアクセスを与えてください。"

# bb282d1b424941f4b2018ddf400e6cc2
#~ msgid ""
#~ "It must ship a testing suite that"
#~ " can either be invoked with ``make"
#~ " test`` or ``python setup.py test``.  "
#~ "For test suites invoked with ``make "
#~ "test`` the extension has to ensure "
#~ "that all dependencies for the test "
#~ "are installed automatically.  If tests "
#~ "are invoked with ``python setup.py "
#~ "test``, test dependencies can be "
#~ "specified in the :file:`setup.py` file. "
#~ "The test suite also has to be "
#~ "part of the distribution."
#~ msgstr ""
#~ "``make test``\\ または\\ ``python setup.py "
#~ "test``\\ を使って起動できるテスト一式（test suite）をリリースする必要があります。\\ "
#~ "``make test``\\ を使って起動されるテスト一式（test "
#~ "suite）では、Flask拡張はテスト用の依存対象が全て自動的にインストールされることを保証する必要があります。もし\\ "
#~ "``python setup.py test``\\ "
#~ "を使って起動されるテストの場合、テストの依存対象は\\ :file:`setup.py`\\ "
#~ "ファイルの中で指定できます。テスト一式（test suite）は配布物の一部である必要もあります。"

# 0cbb27ce07a4493fb6b22a2759b6f722
#~ msgid ""
#~ "an approved extension has to support "
#~ "multiple applications running in the "
#~ "same Python process."
#~ msgstr "approved extensionは同じPythonプロセスの中で走っている複数のアプリケーションに対応している必要があります。"

# bf64ce1020ee41408e48fe93061db4f5
#~ msgid "The license must be BSD/MIT/WTFPL licensed."
#~ msgstr "ライセンスはBSD/MIT/WTFPLの下におかれる必要があります。"

# 27d182ca9fb243429320dd6579fe46d6
#~ msgid ""
#~ "The naming scheme for official "
#~ "extensions is *Flask-ExtensionName* or "
#~ "*ExtensionName-Flask*."
#~ msgstr ""
#~ "公式なFlask拡張用の名前の枠組み（naming scheme）は\\ *Flask-"
#~ "ExtensionName*\\ もしくは\\ *ExtensionName-Flask*\\ "
#~ "にします。"

# 575ad10f341e4e679f65ab7f70ad05f0
#~ msgid ""
#~ "Approved extensions must define all "
#~ "their dependencies in the :file:`setup.py` "
#~ "file unless a dependency cannot be "
#~ "met because it is not available on"
#~ " PyPI."
#~ msgstr ""
#~ "approved extensionは、PyPIから入手できないために満たせない依存対象がない限り、\\ "
#~ ":file:`setup.py`\\ ファイルの中で必要な依存対象を全て定義している必要があります。"

# db649ae80e4c431aafa396a5d37ddfd4
#~ msgid ""
#~ "The setup.py description (and thus the"
#~ " PyPI description) has to link to "
#~ "the documentation, website (if there is"
#~ " one) and there must be a link"
#~ " to automatically install the development"
#~ " version (``PackageName==dev``)."
#~ msgstr ""
#~ "setup.pyのdescription（それはPyPIのdescription欄にもなります）は（もしあれば）ドキュメント、webサイトへリンクしている必要があり、さらに、開発バージョン（\\"
#~ " ``PackageName==dev``\\ であるもの）を自動的にインストールするリンクがある必要があります。"

# f7239c13c480445a96840da5a3375dce
#~ msgid ""
#~ "The ``zip_safe`` flag in the setup "
#~ "script must be set to ``False``, "
#~ "even if the extension would be "
#~ "safe for zipping."
#~ msgstr ""
#~ "たとえそのflask拡張は安全にzip化できるものだとしても、setupスクリプト中の\\ ``zip_safe``\\ "
#~ "フラグは、\\ ``False``\\ に設定されている必要があります。"

# 4814e693150444c9ba73f840bd67bd6c
#~ msgid "An extension currently has to support Python 3.4 and newer and 2.7."
#~ msgstr ""
#~ "Flask拡張は現時点でPython 3.4以降と2.7をサポートする必要があります（\\ **訳注: "
#~ "この日本語訳作成時点では、最新版の原文では2020年時点の状況としてPython 3.6以降のサポートを推奨しています**\\"
#~ " ）"

# 37f5419608e142089865b2d6069c5af4
#~ msgid ""
#~ "Classes work mostly like initialization "
#~ "functions but can later be used to"
#~ " further change the behavior.  For an"
#~ " example look at how the `OAuth "
#~ "extension`_ works: there is an `OAuth`"
#~ " object that provides some helper "
#~ "functions like `OAuth.remote_app` to create"
#~ " a reference to a remote application"
#~ " that uses OAuth."
#~ msgstr ""
#~ "クラスは殆ど初期化関数と同じように機能しますが、後からさらに振る舞いを変えるために使うことができます。例えば、\\ `OAuth "
#~ "extension`_\\ がどのように働くかを調べてください: "
#~ "そこでは、OAuthが使用するリモートのアプリケーションへの参照（reference）を作成する\\ `OAuth.remote_app`\\ "
#~ "のような、いくつかのヘルパー関数を提供する\\ `OAuth`\\ オブジェクトがあります。"

