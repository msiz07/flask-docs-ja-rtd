# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.2.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-26 22:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../flask/docs/cli.rst:31
msgid "``--app hello``"
msgstr ""

#: ../../flask/docs/cli.rst:42
msgid "``--app src/hello``"
msgstr ""

#: ../../flask/docs/cli.rst:45
msgid "``--app hello.web``"
msgstr ""

#: ../../flask/docs/cli.rst:48
msgid "``--app hello:app2``"
msgstr ""

#: ../../flask/docs/cli.rst:52
msgid "``--app 'hello:create_app(\"dev\")'``"
msgstr ""

#: ../../flask/docs/cli.rst:92
msgid ""
"In debug mode, the ``flask run`` command will enable the interactive "
"debugger and the reloader by default, and make errors easier to see and "
"debug. To enable debug mode, use the ``--debug`` option."
msgstr ""

#: ../../flask/docs/cli.rst:110
msgid ""
"When using debug mode, the reloader will trigger whenever your Python "
"code or imported modules change. The reloader can watch additional files "
"with the ``--extra-files`` option. Multiple paths are separated with "
"``:``, or ``;`` on Windows."
msgstr ""

#: ../../flask/docs/cli.rst:120
msgid ""
"The reloader can also ignore files using :mod:`fnmatch` patterns with the"
" ``--exclude-patterns`` option. Multiple patterns are separated with "
"``:``, or ``;`` on Windows."
msgstr ""

#: ../../flask/docs/cli.rst:146
msgid ""
"The ``flask`` command supports setting any option for any command with "
"environment variables. The variables are named like ``FLASK_OPTION`` or "
"``FLASK_COMMAND_OPTION``, for example ``FLASK_APP`` or "
"``FLASK_RUN_PORT``."
msgstr ""

#: ../../flask/docs/cli.rst:167
msgid ""
"Directories are scanned upwards from the directory you call ``flask`` "
"from to locate the files."
msgstr ""

#: ../../flask/docs/cli.rst:416
msgid ""
"Commands added using the Flask app's :attr:`~Flask.cli` or "
":class:`~flask.cli.FlaskGroup` :meth:`~cli.AppGroup.command` decorator "
"will be executed with an application context pushed, so your custom "
"commands and parameters have access to the app and its configuration. The"
" :func:`~cli.with_appcontext` decorator can be used to get the same "
"behavior, but is not needed in most cases."
msgstr ""

#: ../../flask/docs/cli.rst:531
msgid ""
"PyCharm Professional provides a special Flask run configuration to run "
"the development server. For the Community Edition, and for other commands"
" besides ``run``, you need to create a custom run configuration. These "
"instructions should be similar for any other IDE you use."
msgstr ""

#: ../../flask/docs/cli.rst:544
msgid ""
"Once you create a configuration for the ``flask run``, you can copy and "
"change it to call any other command."
msgstr ""

#: ../../flask/docs/cli.rst:550
msgid ""
"Click the *Script path* dropdown and change it to *Module name*, then "
"input ``flask``."
msgstr ""

#: ../../flask/docs/cli.rst:552
msgid ""
"The *Parameters* field is set to the CLI command to execute along with "
"any arguments. This example uses ``--app hello --debug run``, which will "
"run the development server in debug mode. ``--app hello`` should be the "
"import or file with your Flask app."
msgstr ""

# 986abb94af9c4a1c9333477e27d591f2
#: ../../flask/docs/cli.rst:4
msgid "Command Line Interface"
msgstr "コマンドライン・インタフェース"

# 4b7e446731a24be4a6980ab7833c0f13
#: ../../flask/docs/cli.rst:6
msgid ""
"Installing Flask installs the ``flask`` script, a `Click`_ command line "
"interface, in your virtualenv. Executed from the terminal, this script "
"gives access to built-in, extension, and application-defined commands. "
"The ``--help`` option will give more information about any commands and "
"options."
msgstr ""
"Flaskをインストールすると、`Click`_ のコマンドライン・インタフェースである、"
"``flask`` スクリプトをvirtualenvの中にインストールします。端末から実行"
"されたとき、このスクリプトは組み込みの、Flask拡張の、およびアプリケーション"
"で定義したコマンドへアクセスできるようにします。``--help`` オプションは、"
"どのコマンドおよびオプションに関してもさらなる情報を与えます。"

# 5c79acd9e94049f2890a6db5ce5d8885
#: ../../flask/docs/cli.rst:15
msgid "Application Discovery"
msgstr "アプリケーションの発見（Application Discovery）"

# 1adefc67aa4847868f3a020937c9201a
#: ../../flask/docs/cli.rst:17
#, fuzzy
#| msgid "" "The ``flask`` command is installed by Flask, not your application;
#| it " "must be told where to find your application in order to use it. The "
#| "``FLASK_APP`` environment variable is used to specify how to load the "
#| "application."
msgid ""
"The ``flask`` command is installed by Flask, not your application; it "
"must be told where to find your application in order to use it. The "
"``--app`` option is used to specify how to load the application."
msgstr ""
"``flask`` コマンドはあなたのアプリケーションではなくFlaskによってインス"
"トールされます; flaskコマンドがあなたのアプリケーションを使用するためには、"
"アプリケーションがどこにあるかを伝える必要があります。アプリケーションを"
"どのように読み込むかを指定するために ``FLASK_APP`` 環境変数が使用されます。"

# e5e22d619fda42899d45d8bef99fff98
#: ../../flask/docs/cli.rst:21
#, fuzzy
#| msgid "" "While ``FLASK_APP`` supports a variety of options for specifying
#| your " "application, most use cases should be simple. Here are the typical "
#| "values:"
msgid ""
"While ``--app`` supports a variety of options for specifying your "
"application, most use cases should be simple. Here are the typical "
"values:"
msgstr ""
"``FLASK_APP`` 環境変数はアプリケーションを指定するための様々なオプションを"
"サポートしていますが、殆どの使用状況はシンプルなものでしょう。典型的な環境"
"変数の値は以下のとおりです::"

# 9c27340fdde54da8917b0da66bfb04cd
#: ../../flask/docs/cli.rst:27
msgid "(nothing)"
msgstr "（何もなし）"

# 606883e7901a4c94942a03ab28fdbc58
#: ../../flask/docs/cli.rst:25
msgid ""
"The name \"app\" or \"wsgi\" is imported (as a \".py\" file, or package),"
" automatically detecting an app (``app`` or ``application``) or factory "
"(``create_app`` or ``make_app``)."
msgstr ""
"「app」または「wsgi」という名前が（「.py」ファイル、もしくはパッケージと"
"して）importされ、自動的にアプリ（``app`` もしくは ``application``）または"
"factory（``create_app`` もしくは ``make_app``）が見つけ出されます。"

# 606883e7901a4c94942a03ab28fdbc58
#: ../../flask/docs/cli.rst:30
msgid ""
"The given name is imported, automatically detecting an app (``app`` or "
"``application``) or factory (``create_app`` or ``make_app``)."
msgstr ""
"指定した名前（訳注: 上の例では「hello」にあたる部分）がimportされ、自動的に"
"アプリ（``app`` もしくは ``application``）またはfactory（``create_app`` "
"もしくは ``make_app``）が見つけ出されます。"

# 96704387cfaf44db91a7b2d7c403a7ac
#: ../../flask/docs/cli.rst:35
#, fuzzy
#| msgid "" "``FLASK_APP`` has three parts: an optional path that sets the
#| current " "working directory, a Python file or dotted import path, and an
#| optional " "variable name of the instance or factory. If the name is a
#| factory, it " "can optionally be followed by arguments in parentheses. The
#| following " "values demonstrate these parts:"
msgid ""
"``--app`` has three parts: an optional path that sets the current working"
" directory, a Python file or dotted import path, and an optional variable"
" name of the instance or factory. If the name is a factory, it can "
"optionally be followed by arguments in parentheses. The following values "
"demonstrate these parts:"
msgstr ""
"``FLASK_APP`` 環境変数は3つの部分からなります: 必須ではない、そのときの作業"
"ディレクトリ（current working directory）を設定するパスと、Pythonファイル"
"またはdotを使って示されたimportパス（dotted import path）と、必須ではない、"
"インスタンスまたはfactoryの変数名です。もしその名前がfactoryの場合は、必要に"
"応じてカッコ内で囲んだ引数を後ろにつけることができます。以下に示す変数の値"
"は、これらの3つの部分のデモになります:"

# 3491e0c79b4a437c9744f804f8822741
#: ../../flask/docs/cli.rst:42
msgid "Sets the current working directory to ``src`` then imports ``hello``."
msgstr ""
"そのときの作業ディレクトリ（current working directory）を ``src`` に設定"
"してから ``hello`` をimportします。"

# 369db943a4d84760bf340426b8e00e2a
#: ../../flask/docs/cli.rst:45
msgid "Imports the path ``hello.web``."
msgstr "パス ``hello.web`` をimportします。"

# 493ee2e9b1cd42afa708f1216720f76b
#: ../../flask/docs/cli.rst:48
msgid "Uses the ``app2`` Flask instance in ``hello``."
msgstr "``hello`` の中のFlaskインスタンス ``app2`` を使用します。"

# b12fd0cf91c948bf9bd88313905d96b7
#: ../../flask/docs/cli.rst:51
msgid ""
"The ``create_app`` factory in ``hello`` is called with the string "
"``'dev'`` as the argument."
msgstr ""
"``hello`` の中にあるfactoryの ``create_app`` を、文字列 ``'dev'`` "
"を引数に使って呼び出します。"

# bd645fb19c924fe881406d3b164480e3
#: ../../flask/docs/cli.rst:54
#, fuzzy
#| msgid "" "If ``FLASK_APP`` is not set, the command will try to import
#| \"app\" or " "\"wsgi\" (as a \".py\" file, or package) and try to detect an
#| application" " instance or factory."
msgid ""
"If ``--app`` is not set, the command will try to import \"app\" or "
"\"wsgi\" (as a \".py\" file, or package) and try to detect an application"
" instance or factory."
msgstr ""
"もし ``FLASK_APP`` 環境変数が設定されていない場合、flaskコマンドは「app」"
"または「wsgi」を（「.py」ファイルとして、またはパッケージとして）import"
"しようとし、そしてアプリケーションのインスタンスまたはfactoryを見つけ出そう"
"とします。"

# 72b2f02e781f4c658f5e07fdee6780fb
#: ../../flask/docs/cli.rst:58
msgid ""
"Within the given import, the command looks for an application instance "
"named ``app`` or ``application``, then any application instance. If no "
"instance is found, the command looks for a factory function named "
"``create_app`` or ``make_app`` that returns an instance."
msgstr ""
"与えられたimportの中で、flaskコマンドは ``app`` または ``application`` "
"という名前のアプリケーションのインスタンスを探し、それからそれ以外の名前も"
"含めたあらゆるアプリケーションのインスタンスを探します。もしインスタンスが"
"見つからなかった場合、flaskコマンドは ``create_app`` または ``make_app`` と"
"いう名前の、インスタンスを返すfactory関数を探します。"

#: ../../flask/docs/cli.rst:63
msgid ""
"If parentheses follow the factory name, their contents are parsed as "
"Python literals and passed as arguments and keyword arguments to the "
"function. This means that strings must still be in quotes."
msgstr ""
"もしfactoryの名前の後にカッコが続いたときは、カッコの中の内容はPythonのリテ"
"ラルとして解析され、引数またはキーワード引数としてfactory関数に渡されます。"
"これは、（カッコの中では）文字列はまだ引用符内部にしておく必要があることを"
"意味します。"

# 3bef32d36b1f4a97935846f523b07f64
#: ../../flask/docs/cli.rst:69
msgid "Run the Development Server"
msgstr "開発用サーバの実行"

# 9d8d63bfe6cb4283b189af592c72e7dd
#: ../../flask/docs/cli.rst:71
msgid ""
"The :func:`run <cli.run_command>` command will start the development "
"server. It replaces the :meth:`Flask.run` method in most cases. ::"
msgstr ""
":func:`run <cli.run_command>` コマンドは開発用サーバを開始します。run"
"コマンドは殆どのケースで、:meth:`Flask.run` メソッドの代わりになります。::"

# d798a03a8a1747dfa7034427771be904
#: ../../flask/docs/cli.rst:78
msgid ""
"Do not use this command to run your application in production. Only use "
"the development server during development. The development server is "
"provided for convenience, but is not designed to be particularly secure, "
"stable, or efficient. See :doc:`/deploying/index` for how to run in "
"production."
msgstr ""
"本番環境ではアプリケーションを走らせるためにこのコマンドを使わないでくだ"
"さい。開発中だけ開発用サーバを使用してください。開発用サーバは便宜のために"
"提供されていますが、安全、安定、効率的であるようには特に設計されていません。"
"本番環境でどうやって実行するかについては :doc:`/deploying/index` を確認"
"してください。"

#: ../../flask/docs/cli.rst:83
msgid ""
"If another program is already using port 5000, you'll see ``OSError: "
"[Errno 98]`` or ``OSError: [WinError 10013]`` when the server tries to "
"start. See :ref:`address-already-in-use` for how to handle that."
msgstr ""
"もし他のプログラムが既に5000番ポートを使用中であるときは、サーバを開始し"
"ようと試みたときに ``OSError: [Errno 98]`` または ``OSError: [WinError "
"10013]`` を見ることになるでしょう。それらにどのように対処するかについては、"
":ref:`address-already-in-use` を見てください。"

# 1b2c2cda86ad41c09791e426f3a62a9d
#: ../../flask/docs/cli.rst:90
msgid "Debug Mode"
msgstr "デバッグモード"

# 0ce12affcfbe4881b475590caddc04c1
#: ../../flask/docs/cli.rst:108
#, fuzzy
#| msgid "Watch Extra Files with the Reloader"
msgid "Watch and Ignore Files with the Reloader"
msgstr "再読み込み機能（Reloader）による追加ファイルの監視"

# f7b1eea9531d4ade9fb40776480a5171
#: ../../flask/docs/cli.rst:126
msgid "Open a Shell"
msgstr "シェルの開始（Open a Shell）"

# a25d619b20d54be9b30ac4b57054ca1e
#: ../../flask/docs/cli.rst:128
msgid ""
"To explore the data in your application, you can start an interactive "
"Python shell with the :func:`shell <cli.shell_command>` command. An "
"application context will be active, and the app instance will be "
"imported. ::"
msgstr ""
"自分のアプリケーションの中でデータを調べるために、:func:`shell "
"<cli.shell_command>` コマンドを使ってインタラクティブなPythonのシェルを開始"
"できます。application contextは有効（active）になり、アプリのインスタンスが"
"importされます。::"

# e264b9296b9944cda65c376f6fd89132
#: ../../flask/docs/cli.rst:138
msgid "Use :meth:`~Flask.shell_context_processor` to add other automatic imports."
msgstr ""
"その他に自動的にimportされるものを追加するには、:meth:"
"`~Flask.shell_context_processor` を使用します。"

# ade9152798804a67aa2c728b42c9a977
#: ../../flask/docs/cli.rst:144
msgid "Environment Variables From dotenv"
msgstr "dotenvからの環境変数読み込み"

# 6188105556c2478e9b785d24c53bdf9b
#: ../../flask/docs/cli.rst:151
#, fuzzy
#| msgid "" "Rather than setting ``FLASK_APP`` each time you open a new
#| terminal, you " "can use Flask's dotenv support to set environment variables
#| " "automatically."
msgid ""
"Rather than passing options every time you run a command, or environment "
"variables every time you open a new terminal, you can use Flask's dotenv "
"support to set environment variables automatically."
msgstr ""
"新しい端末を開くたびに毎回 ``FLASK_APP`` 環境変数を設定する代わりに、自動"
"的に環境変数を設定するために、Flaskのdotenvサポートを使用できます。"

# a62f6061cfbb40408bdac9ee5184806b
#: ../../flask/docs/cli.rst:155
#, fuzzy
#| msgid "" "If `python-dotenv`_ is installed, running the ``flask`` command
#| will set " "environment variables defined in the files :file:`.env` and "
#| ":file:`.flaskenv`. This can be used to avoid having to set ``FLASK_APP`` "
#| "manually every time you open a new terminal, and to set configuration "
#| "using environment variables similar to how some deployment services work."
msgid ""
"If `python-dotenv`_ is installed, running the ``flask`` command will set "
"environment variables defined in the files ``.env`` and ``.flaskenv``. "
"You can also specify an extra file to load with the ``--env-file`` "
"option. Dotenv files can be used to avoid having to set ``--app`` or "
"``FLASK_APP`` manually, and to set configuration using environment "
"variables similar to how some deployment services work."
msgstr ""
"もし `python-dotenv`_ がインストールされている場合、``flask`` コマンドを"
"実行すると :file:`.env` と :file:`.flaskenv` の中で定義されている環境変数が"
"設定されます。これは、新しい端末を開くたびに毎回手作業で ``FLASK_APP`` "
"環境変数を設定し、いくつかの展開するサービス（deployment service）を機能"
"させるやり方と同じような、環境変数を使った設定をする必要をなくすために使用"
"できます"

# 160b163f42494111bcf056a6f06f03ff
#: ../../flask/docs/cli.rst:162
msgid ""
"Variables set on the command line are used over those set in "
":file:`.env`, which are used over those set in :file:`.flaskenv`. "
":file:`.flaskenv` should be used for public variables, such as "
"``FLASK_APP``, while :file:`.env` should not be committed to your "
"repository so that it can set private variables."
msgstr ""
":file:`.flaskenv` で設定された変数は :file:`.env` で設定されたもので上書き"
"され、それらは、コマンドラインで設定された変数で上書きされます。:file:"
"`.flaskenv` は、例えば ``FLASK_APP`` のような、公開される変数のために使用"
"されるべきであり、一方 :file:`.env` はプライベートな変数を設定できるように"
"するために（ソースコード管理の）リポジトリにはコミットするべきではありま"
"せん。"

# 0009df8753e64605bca822c373b7175c
#: ../../flask/docs/cli.rst:170
msgid ""
"The files are only loaded by the ``flask`` command or calling "
":meth:`~Flask.run`. If you would like to load these files when running in"
" production, you should call :func:`~cli.load_dotenv` manually."
msgstr ""
"それらのファイルは ``flask`` コマンドもしくは呼び出されている :meth:"
"`~Flask.run` によってのみ読み込まれます。もしそれらのファイルを本番環境の"
"中で走らせるときに読み込みたい場合、手動で :func:`~cli.load_dotenv` を呼び"
"出す必要があります。"

# 8bf837ecc1fb4c1ba491ded2cb74ffe0
#: ../../flask/docs/cli.rst:178
msgid "Setting Command Options"
msgstr "コマンドオプションの設定"

# aed9eb26f81c48e2a3a3cc0de81109a6
#: ../../flask/docs/cli.rst:180
msgid ""
"Click is configured to load default values for command options from "
"environment variables. The variables use the pattern "
"``FLASK_COMMAND_OPTION``. For example, to set the port for the run "
"command, instead of ``flask run --port 8000``:"
msgstr ""
"Clickはコマンドオプションの標準の値を環境変数から読み込むよう設定されてい"
"ます。それらの変数には ``FLASK_COMMAND_OPTION`` のパターンが使用されてい"
"ます。例えば、runコマンド用のポートを設定するために、``flask run --port "
"8000`` の代わりに以下を使用できます:"

#: ../../flask/docs/cli.rst:187 ../../flask/docs/cli.rst:243
#: ../../flask/docs/cli.rst:281
msgid "Bash"
msgstr ""

#: ../../flask/docs/cli.rst:195 ../../flask/docs/cli.rst:250
#: ../../flask/docs/cli.rst:287
msgid "Fish"
msgstr ""

#: ../../flask/docs/cli.rst:203 ../../flask/docs/cli.rst:257
#: ../../flask/docs/cli.rst:293
msgid "CMD"
msgstr ""

#: ../../flask/docs/cli.rst:211 ../../flask/docs/cli.rst:264
#: ../../flask/docs/cli.rst:299
msgid "Powershell"
msgstr ""

# 53a6c0fcc05d444ead429b4fadc8966f
#: ../../flask/docs/cli.rst:219
msgid ""
"These can be added to the ``.flaskenv`` file just like ``FLASK_APP`` to "
"control default command options."
msgstr ""
"標準設定のコマンドオプションを制御するために、これらの値を ``.flaskenv`` "
"ファイルに ``FLASK_APP`` と同じように追加できます。"

# e0d0769e12c44ac9a745a9e6d5fbfda9
#: ../../flask/docs/cli.rst:224
msgid "Disable dotenv"
msgstr "dotenvの無効化"

# 870ba870e3ee4d57872de8f9f745701a
#: ../../flask/docs/cli.rst:226
msgid ""
"The ``flask`` command will show a message if it detects dotenv files but "
"python-dotenv is not installed."
msgstr ""
"もしdotenvファイルを見つけたにもかかわらずpython-dotenvがインストールされて"
"いない場合、``flask`` コマンドはメッセージを表示します。"

# 2a1148458f064478b87b36d5f55ecd95
#: ../../flask/docs/cli.rst:234
msgid ""
"You can tell Flask not to load dotenv files even when python-dotenv is "
"installed by setting the ``FLASK_SKIP_DOTENV`` environment variable. This"
" can be useful if you want to load them manually, or if you're using a "
"project runner that loads them already. Keep in mind that the environment"
" variables must be set before the app loads or it won't configure as "
"expected."
msgstr ""
"``FLASK_SKIP_DOTENV`` 環境変数を設定することで、python-dotenvがインストール"
"されていたときでさえもdotenvファイルを読み込まないようFlaskへ伝えることが"
"できます。これは、それらを手作業で読み込みたいときや、それらを既に読み込ん"
"でいるproject runner（訳注: コンパイル・テスト・パッケージ作成など、よく"
"実施される一纒まり処理を、簡単な操作でまとめて実施できるようにする、make"
"コマンドのようなツールを指していると思います）を使用している場合には役立つ"
"でしょう。環境変数はアプリのロードより前に設定されている必要があり、そうで"
"なければ期待したようには（アプリが）設定されないであろうことを忘れないでく"
"ださい。"

# 5213616c0dbf4b32a3ef8362b6631ce2
#: ../../flask/docs/cli.rst:273
msgid "Environment Variables From virtualenv"
msgstr "virtualenvからの環境変数読み込み"

# 50364a821a6d450e9698786f2de4883e
#: ../../flask/docs/cli.rst:275
msgid ""
"If you do not want to install dotenv support, you can still set "
"environment variables by adding them to the end of the virtualenv's "
":file:`activate` script. Activating the virtualenv will set the "
"variables."
msgstr ""
"もしdotenvのサポートをインストールしたくない場合でも、virtualenvの :file:"
"`activate` スクリプトの最後へ追加することで環境変数を設定することができ"
"ます。virtualenvをactivateすると、変数が設定されます。"

# 87b45bbdb76342f5a622e166491c5c4e
#: ../../flask/docs/cli.rst:283
msgid "Unix Bash, :file:`venv/bin/activate`::"
msgstr "UnixのBashでは、:file:`venv/bin/activate` に追加します::"

# 87b45bbdb76342f5a622e166491c5c4e
# | msgid "Unix Bash, :file:`venv/bin/activate`::"
#: ../../flask/docs/cli.rst:289
msgid "Fish, :file:`venv/bin/activate.fish`::"
msgstr "Fishでは、:file:`venv/bin/activate.fish` に追加します::"

# 50b12c41708b4f87a9d01fb1aa24dfee
#: ../../flask/docs/cli.rst:295
msgid "Windows CMD, :file:`venv\\\\Scripts\\\\activate.bat`::"
msgstr "WindowsのCMDでは、:file:`venv\\\\Scripts\\\\activate.bat` に追加します::"

# 50b12c41708b4f87a9d01fb1aa24dfee
#: ../../flask/docs/cli.rst:301
msgid "Windows Powershell, :file:`venv\\\\Scripts\\\\activate.ps1`::"
msgstr ""
"WindowsのPowershellでは、:file:`venv\\\\Scripts\\\\activate.ps1` に追加"
"します::"

# 991481a4ab61465cad59109c3e25b886
#: ../../flask/docs/cli.rst:305
msgid ""
"It is preferred to use dotenv support over this, since :file:`.flaskenv` "
"can be committed to the repository so that it works automatically "
"wherever the project is checked out."
msgstr ""
":file:`.flaskenv` は（ソースコード管理の）リポジトリへコミットして、リポジ"
"トリをチェックアウトしたプロジェクトではどこでも自動的に機能するようにでき"
"るため、このやり方よりは、dotenvのサポートを使用する方が好ましいです。"

# 35b50041500b4fdb944187ed47323d32
#: ../../flask/docs/cli.rst:311
msgid "Custom Commands"
msgstr "独自のコマンド（Custom Commands）"

# e8042bea95c04f298802fc28e8009262
#: ../../flask/docs/cli.rst:313
msgid ""
"The ``flask`` command is implemented using `Click`_. See that project's "
"documentation for full information about writing commands."
msgstr ""
"``flask`` コマンドは `Click`_ を使用して実装されています。コマンド作成に"
"関する全体を網羅した情報についてはClickプロジェクトのドキュメントを確認して"
"ください。"

# d0d47a8c811f4466ac6ecb486fba840e
#: ../../flask/docs/cli.rst:316
msgid ""
"This example adds the command ``create-user`` that takes the argument "
"``name``. ::"
msgstr ""
"以下の例は、``name`` 引数を受け取る ``create-user`` コマンドを追加します。::"

# a8f9688652e84c3d99394f66ac8b1d86
#: ../../flask/docs/cli.rst:333
msgid ""
"This example adds the same command, but as ``user create``, a command in "
"a group. This is useful if you want to organize multiple related "
"commands. ::"
msgstr ""
"以下の例は同じコマンドを追加しますが、グループの中のコマンドのひとつで"
"ある ``user create`` として追加します。これは関連する複数のコマンドを編成"
"したいときに便利です。"

# b11b936a991f4ccaa6c6e323cf1ae4e0
#: ../../flask/docs/cli.rst:354
msgid ""
"See :ref:`testing-cli` for an overview of how to test your custom "
"commands."
msgstr ""
"自分の独自コマンドをどのようにテストするかの概要については :ref:"
"`testing-cli` を確認してください。"

# 95b047d6ce6444709968899ae31faeb4
#: ../../flask/docs/cli.rst:359
msgid "Registering Commands with Blueprints"
msgstr "Blueprintsを使ったコマンドの登録"

# 734a7ec3cecf40089a68022c0c64609e
#: ../../flask/docs/cli.rst:361
msgid ""
"If your application uses blueprints, you can optionally register CLI "
"commands directly onto them. When your blueprint is registered onto your "
"application, the associated commands will be available to the ``flask`` "
"command. By default, those commands will be nested in a group matching "
"the name of the blueprint."
msgstr ""
"もし自分のアプリケーションがblueprintを使っている場合、CLIコマンドを直接"
"それらのblueprintに適宜登録できます。blueprintが自分のアプリケーションに"
"登録されたとき、関連付けられているコマンドは ``flask`` コマンドから利用可能"
"になります。標準設定では、それらのコマンドはblueprintの名前に合致（match）"
"するグループへと入れ子（nest）にされます。"

# ddafd665bd6741b9bb91340a99c832e2
#: ../../flask/docs/cli.rst:384
msgid ""
"You can alter the group name by specifying the ``cli_group`` parameter "
"when creating the :class:`Blueprint` object, or later with "
":meth:`app.register_blueprint(bp, cli_group='...') "
"<Flask.register_blueprint>`. The following are equivalent:"
msgstr ""
":class:`Blueprint` オブジェクトを作成するとき ``cli_group`` パラメータを"
"指定することによって、もしくは後から :meth:`app.register_blueprint(bp, "
"cli_group='...') <Flask.register_blueprint>` を使って、コマンドのグループ"
"名を変更できます。以下は同じ処理になります:"

# 606737dfa8bd406cb584886caed7f18a
#: ../../flask/docs/cli.rst:399
msgid ""
"Specifying ``cli_group=None`` will remove the nesting and merge the "
"commands directly to the application's level:"
msgstr ""
"``cli_group=None`` を指定すると入れ子を削除して、コマンドを直接アプリ"
"ケーションのレベルへまとめます。"

# 14c7dde07a414e9595e885e20c9efbc3
#: ../../flask/docs/cli.rst:414
msgid "Application Context"
msgstr "アプリケーションのコンテキスト（Application Context）"

# 739a505152d64042a12f88cabff7c8b0
#: ../../flask/docs/cli.rst:437
msgid "Plugins"
msgstr "プラグイン"

# fd1f8ebf293d44adac425504e0f68a47
#: ../../flask/docs/cli.rst:439
msgid ""
"Flask will automatically load commands specified in the "
"``flask.commands`` `entry point`_. This is useful for extensions that "
"want to add commands when they are installed. Entry points are specified "
"in :file:`setup.py` ::"
msgstr ""
"Flaskは ``flask.commands`` の `entry point`_ で指定されたコマンドを自動的に"
"読み込みます。これは、インストールされたときにはコマンドを追加したいFlask"
"拡張にとっては便利です。entry pointは :file:`setup.py` の中で指定されます::"

# 2503c537261b4ac4998ad3be6fd30c99
#: ../../flask/docs/cli.rst:458
msgid ""
"Inside :file:`flask_my_extension/commands.py` you can then export a Click"
" object::"
msgstr ""
"（この例では） :file:`flask_my_extension/commands.py` の内側で、Click"
"オブジェクトをexportできます（訳注: entry pointとしてexportできるということ"
"だと思います。「@click.command()」デコレータはClickのCommandオブジェクトを"
"作ります。この例ではsetup.pyの中で"
"「my-command=flask_my_extension.commands:cli」を指定しているため、"
"「flask_my_extension/commands.py」ファイルの中で、clickのCommandオブジェクト"
"である「cli」を用意すれば、Flaskが自動的に読み込む、という意味合いだと思い"
"ます）::"

# 442391132daa4a1dbe18f0d83d148feb
#: ../../flask/docs/cli.rst:467
msgid ""
"Once that package is installed in the same virtualenv as your Flask "
"project, you can run ``flask my-command`` to invoke the command."
msgstr ""
"一度あなたのFlaskプロジェクトと同じvirtualenvに（上記の例の）パッケージが"
"インストールされると、``flask my-command`` を実行してコマンドを呼び出せる"
"ようになります。"

# 0421704778624942b9bba0ce938d3375
#: ../../flask/docs/cli.rst:474
msgid "Custom Scripts"
msgstr "独自のスクリプト"

# 66b30b70c7dd4516a574ab4a261158fa
#: ../../flask/docs/cli.rst:476
#, fuzzy
#| msgid "" "When you are using the app factory pattern, it may be more
#| convenient to " "define your own Click script. Instead of using
#| ``FLASK_APP`` and letting " "Flask load your application, you can create
#| your own Click object and " "export it as a `console script`_ entry point."
msgid ""
"When you are using the app factory pattern, it may be more convenient to "
"define your own Click script. Instead of using ``--app`` and letting "
"Flask load your application, you can create your own Click object and "
"export it as a `console script`_ entry point."
msgstr ""
"app factoryパターンを使用しているとき、自分のClickスクリプトを定義できると"
"さらに便利かもしれません。``FLASK_APP`` 環境変数を使用してFlaskが自分の"
"アプリケーションを読み込めるようにする代わりに、自分独自のClickオブジェクト"
"を作成し、`console script`_ のentry pointとしてexportできます。"

# 76b7c82d57f243fb88463b5bc25c7145
#: ../../flask/docs/cli.rst:481
msgid "Create an instance of :class:`~cli.FlaskGroup` and pass it the factory::"
msgstr ""
":class:`~cli.FlaskGroup` のインスタンスを作成して、それにfactoryを渡します::"

# 1baeace01e584be19ebb936c540ab83a
#: ../../flask/docs/cli.rst:496
msgid "Define the entry point in :file:`setup.py`::"
msgstr ":file:`setup.py` の中でentry pointを定義します::"

# f39e640027f64325a28d4f24da6aad38
#: ../../flask/docs/cli.rst:510
#, fuzzy
#| msgid "" "Install the application in the virtualenv in editable mode and the
#| custom" " script is available. Note that you don't need to set
#| ``FLASK_APP``. ::"
msgid ""
"Install the application in the virtualenv in editable mode and the custom"
" script is available. Note that you don't need to set ``--app``. ::"
msgstr ""
"virtualenvの中でアプリケーションを編集可能モード（editable mode）でインス"
"トールすると独自スクリプトが利用可能になります。``FLASK_APP`` 環境変数を"
"設定する必要はないことに注意してください。::"

# 3a18710c577144a48f739ea62303f771
#: ../../flask/docs/cli.rst:516
msgid "Errors in Custom Scripts"
msgstr "独自スクリプトの中のエラー"

# 5e2fd6d9e23d411fa4f3108cc24c7e54
#: ../../flask/docs/cli.rst:518
msgid ""
"When using a custom script, if you introduce an error in your module-"
"level code, the reloader will fail because it can no longer load the "
"entry point."
msgstr ""
"独自スクリプトを使用するとき、もしmoduleレベルのコードでエラーを導入して"
"しまった場合（訳注: 「import ...」しただけでエラーが発生するような状態に"
"してしまった場合）、entry pointがもはや読み込めなくなるため、再読み込み"
"機能（reloader）に障害が起きます（fail）。"

# fc90a59a97ad41d380b466932ead5f60
#: ../../flask/docs/cli.rst:522
msgid ""
"The ``flask`` command, being separate from your code, does not have this "
"issue and is recommended in most cases."
msgstr ""
"``flask`` コマンドは、あなたのコードとは分かれているため、このような問題は"
"持たず（訳注: flaskコマンドのあるモジュールをimportするだけでエラーが発生"
"するようなことはない、という意味合いだと思います）、そのため殆どのケース"
"では推奨されます。"

# 8059d94d0fbc4fe880b8b0b88ab81369
#: ../../flask/docs/cli.rst:529
msgid "PyCharm Integration"
msgstr "PyCharmとの統合"

# dcd520989c20434da7d0c0056fdb115e
#: ../../flask/docs/cli.rst:536
#, fuzzy
#| msgid "" "In PyCharm, with your project open, click on *Run* from the menu
#| bar and " "go to *Edit Configurations*. You'll be greeted by a screen
#| similar to " "this:"
msgid ""
"In PyCharm, with your project open, click on *Run* from the menu bar and "
"go to *Edit Configurations*. You'll see a screen similar to this:"
msgstr ""
"PyCharmで、プロジェクトを開いて、メニューバーから *Run* をクリックして "
"*Edit Configurations* へ移動します。以下のような画面に迎えられるでしょう:"

#, fuzzy
#| msgid "Screenshot of PyCharms's run configuration settings."
msgid "Screenshot of PyCharm run configuration."
msgstr "PyCharmの実行設定のスクリーンショット"

#: ../../flask/docs/cli.rst:547
#, fuzzy
#| msgid "" "Click the + (*Add New Configuration*) button and select *Python*.
#| Give " "the configuration a name such as \"flask run\". For the ``flask
#| run`` " "command, check \"Single instance only\" since you can't run the
#| server " "more than once at the same time."
msgid ""
"Click the *+ (Add New Configuration)* button and select *Python*. Give "
"the configuration a name such as \"flask run\"."
msgstr ""
"「+ (*Add New Configuration*)」ボタンをクリックし、*Python* を選択します。"
"「flask run」のような名前を設定に与えます。``flask run`` コマンドに用に、"
"同時に2つ以上はサーバーを実行できないため、「Single instance only」をチェック"
"します。"

# f3ea66cc77c448a4b58e7aa954ef02f5
#: ../../flask/docs/cli.rst:556
#, fuzzy
#| msgid "" "If you have installed your project as a package in your
#| virtualenv, you " "may untick the *PYTHONPATH* options (**E**). This will
#| more accurately " "match how you deploy the app later."
msgid ""
"If you installed your project as a package in your virtualenv, you may "
"uncheck the *PYTHONPATH* options. This will more accurately match how you"
" deploy later."
msgstr ""
"もし自分のプロジェクトをパッケージとしてvirtualenvの中にインストールして"
"いた場合、*PYTHONPATH* オプション（**E**）のチェックを外しても良いでしょう。"
"後でアプリをデプロイするやり方に、これはより正確に合います。"

# e0b66422d91141debf417cc2a6b9146e
#: ../../flask/docs/cli.rst:559
#, fuzzy
#| msgid "" "Click *Apply* to save the configuration, or *OK* to save and close
#| the " "window. Select the configuration in the main PyCharm window and click
#| the" " play button next to it to run the server."
msgid ""
"Click *OK* to save and close the configuration. Select the configuration "
"in the main PyCharm window and click the play button next to it to run "
"the server."
msgstr ""
"設定を保存するために *Apply* を、または保存してからウインドウを閉じる"
"ために *OK* をクリックします。メインのPyCharmウインドウで設定を選択して"
"から、隣のplayボタンをクリックしてサーバーを実行します。"

# aff7443523e840e08adb69478bdd7fda
#: ../../flask/docs/cli.rst:562
#, fuzzy
#| msgid "" "Now that we have a configuration which runs ``flask run`` from
#| within " "PyCharm, we can copy that configuration and alter the *Script*
#| argument " "to run a different CLI command, e.g. ``flask shell``."
msgid ""
"Now that you have a configuration for ``flask run``, you can copy that "
"configuration and change the *Parameters* argument to run a different CLI"
" command."
msgstr ""
"この時点でPyCharmの中から ``flask run`` を実行する設定を持っており、"
"その設定をコピーしてから、例えば ``flask shell`` のように、異なるCLI"
"コマンドを実行するために *Script* 引数を変更できます。"

# 3043beb9953944a6ae4b9d11fc5e21a3
#~ msgid ""
#~ "Prior to PyCharm 2018.1, the Flask "
#~ "CLI features weren't yet fully "
#~ "integrated into PyCharm. We have to "
#~ "do a few tweaks to get them "
#~ "working smoothly. These instructions should"
#~ " be similar for any other IDE "
#~ "you might want to use."
#~ msgstr ""

# 91d0079764784ec694f62a20e23173da
#~ msgid ""
#~ "Click the + (*Add New Configuration*)"
#~ " button and select *Python*. Give the"
#~ " configuration a good descriptive name "
#~ "such as \"Run Flask Server\". For "
#~ "the ``flask run`` command, check "
#~ "\"Single instance only\" since you can't"
#~ " run the server more than once "
#~ "at the same time."
#~ msgstr ""

# e270ff64a1a04607afb066d57f99e9b3
#~ msgid ""
#~ "You can skip this next step if "
#~ "you're using :ref:`dotenv`. We need to"
#~ " add an environment variable (**C**) "
#~ "to identify our application. Click on"
#~ " the browse button and add an "
#~ "entry with ``FLASK_APP`` on the left "
#~ "and the Python import or file on"
#~ " the right (``hello`` for example)."
#~ msgstr ""

# 635a1952327744128bc8d7af9733cb05
#~ msgid "Unix Bash (Linux, Mac, etc.)::"
#~ msgstr "UnixのBash（Linux, Mac, etc.）::"

# 1bb225e08abd4b4f97cec3f17ea5f1e0
#~ msgid "Windows CMD::"
#~ msgstr "WindowsのCMD::"

# 1e2cf03d935d470e90135e90ae7c4d7f
#~ msgid "Windows PowerShell::"
#~ msgstr "WindowsのPowerShell::"

# 6701c2dfd972415f9d24e5d2449e4544
#~ msgid ""
#~ "The file :file:`wsgi.py` is imported, "
#~ "automatically detecting an app (``app``). "
#~ "This provides an easy way to "
#~ "create an app from a factory with"
#~ " extra arguments."
#~ msgstr ""
#~ "ファイル\\ :file:`wsgi.py`\\ がimportされ、自動的にアプリ（\\ "
#~ "``app``\\ "
#~ "）が見つけ出されます。これは、追加の引数を使用するfactoryからアプリケーションを作成するための容易な方法を提供します。"

# abb1741a915041cb861a4ef28189f259
#~ msgid ""
#~ "When calling an application factory, if"
#~ " the factory takes an argument named"
#~ " ``script_info``, then the "
#~ ":class:`~cli.ScriptInfo` instance is passed as"
#~ " a keyword argument. If the "
#~ "application factory takes only one "
#~ "argument and no parentheses follow the"
#~ " factory name, the :class:`~cli.ScriptInfo` "
#~ "instance is passed as a positional "
#~ "argument. If parentheses follow the "
#~ "factory name, their contents are parsed"
#~ " as Python literals and passes as "
#~ "arguments to the function. This means"
#~ " that strings must still be in "
#~ "quotes."
#~ msgstr ""
#~ "もしアプリケーションのfactoryを呼び出すときは、もしfactoryが\\ ``script_info``\\ "
#~ "という名前の引数を受け取る場合は、\\ :class:`~cli.ScriptInfo`\\ "
#~ "のインスタンスがキーワード引数として渡されます。もしアプリケーションのfactoryが1つだけ引数を受け取り（環境変数の値で）factory名の後ろにカッコがない場合は、\\"
#~ " :class:`~cli.ScriptInfo`\\ のインスタンスが位置引数（positional "
#~ "argument）として渡されます。もしfactory名の後ろにカッコが続く場合は、その内容がPythonリテラルとして処理されてからfactory関数に引数として渡されます。これは、文字列（としてfactory関数へ渡す内容）が（環境変数の値の中では）引用符で囲まれていなければならないことを意味します。"

# b24a3d97c94b4978b95bf671db938923
#~ msgid "``FLASK_APP=hello``"
#~ msgstr ""

# 877b2439669a4285b9136fe2c80a7b0e
#~ msgid "``FLASK_APP=src/hello``"
#~ msgstr ""

# a6d0f7d87f2d4777bbc5f0fcd83cc799
#~ msgid "``FLASK_APP=hello.web``"
#~ msgstr ""

# a9add127fabb4c089214b06cca3f07df
#~ msgid "``FLASK_APP=hello:app2``"
#~ msgstr ""

# 3a4aac51b58d4781aa989a0d676b111a
#~ msgid "``FLASK_APP=\"hello:create_app('dev')\"``"
#~ msgstr ""

# 6bb666bf01db4dc79be43d8eea9222b3
#~ msgid "Environments"
#~ msgstr "環境（Environments）"

# b8306f0c8e554c77aa2cf860bbc59028
#~ msgid ""
#~ "The environment in which the Flask "
#~ "app runs is set by the "
#~ ":envvar:`FLASK_ENV` environment variable. If "
#~ "not set it defaults to ``production``."
#~ " The other recognized environment is "
#~ "``development``. Flask and extensions may "
#~ "choose to enable behaviors based on "
#~ "the environment."
#~ msgstr ""
#~ "Flaskアプリケーションが走る環境は :envvar:`FLASK_ENV` "
#~ "環境変数により設定されます。もしその環境変数が設定されていない場合、``production`` "
#~ "が標準設定で使用されます。他に認識される環境は ``development`` "
#~ "があります。FlaskとFlask拡張は、実行される環境（FLASK_ENVの値など）に基づいて、有効化される振舞を選択することがあります。"

# 87820eb86ba44a41ba70c4cda3f706dc
#~ msgid ""
#~ "If the env is set to "
#~ "``development``, the ``flask`` command will"
#~ " enable debug mode and ``flask run``"
#~ " will enable the interactive debugger "
#~ "and reloader."
#~ msgstr ""
#~ "もし環境（訳注: FLASK_ENV環境変数の値）が ``development`` "
#~ "に設定されていた場合、``flask`` コマンドはデバッグモードを有効にし、``flask run`` "
#~ "は、インタラクティブなデバッガと再読み込み機能（reloader）を有効にします。"

# 54c04da404174c54b9304e5420c7837e
#~ msgid ""
#~ "When using development mode, the "
#~ "reloader will trigger whenever your "
#~ "Python code or imported modules change."
#~ " The reloader can watch additional "
#~ "files with the ``--extra-files`` option,"
#~ " or the ``FLASK_RUN_EXTRA_FILES`` environment "
#~ "variable. Multiple paths are separated "
#~ "with ``:``, or ``;`` on Windows."
#~ msgstr ""
#~ "developmentモードを使用しているとき、あなたがPythonコードまたはimportされているモジュールを変更するたびにreloaderが始動します。reloaderは"
#~ "、``--extra-files`` オプションまたは ``FLASK_RUN_EXTRA_FILES``"
#~ " 環境変数を使用して、追加ファイルを監視できます。複数のパスは ``:``、もしくはWindowsでは "
#~ "``;`` を使用して分けられます。"

# 7327041d325c4aa4afc0e41dba102603
#~ msgid ""
#~ "Debug mode will be enabled when "
#~ ":envvar:`FLASK_ENV` is ``development``, as "
#~ "described above. If you want to "
#~ "control debug mode separately, use "
#~ ":envvar:`FLASK_DEBUG`. The value ``1`` enables"
#~ " it, ``0`` disables it."
#~ msgstr ""
#~ "先に説明したとおり、デバッグモードは :envvar:`FLASK_ENV` 環境変数が "
#~ "``development`` "
#~ "であるとき有効になります。もしデバッグモードを（FLASK_ENV環境変数から）分けて制御したい場合、:envvar:`FLASK_DEBUG`"
#~ " 環境変数を使用してください。値が ``1`` で有効になり、``0`` で無効になります。"

# 5e3897c7b6d04b60a06c600aa696639e
#~ msgid ""
#~ "Directories are scanned upwards from the"
#~ " directory you call ``flask`` from to"
#~ " locate the files. The current "
#~ "working directory will be set to "
#~ "the location of the file, with the"
#~ " assumption that that is the top "
#~ "level project directory."
#~ msgstr ""
#~ "``flask`` "
#~ "を呼び出したディレクトリから親へと上りながら、それらのファイル（.envおよび.flaskenv）の場所を見つけるためにディレクトリが調べられます。そのときの作業ディレクトリ（current"
#~ " working "
#~ "directory）は、それらのファイル（.envおよび.flaskenv）のあった場所に設定され、その場所がプロジェクトの最上位のディレクトリであるという前提がおかれます。"

# 1baa92e2550d498fb0946924799522fc
#~ msgid ""
#~ "Commands added using the Flask app's "
#~ ":attr:`~Flask.cli` :meth:`~cli.AppGroup.command` decorator"
#~ " will be executed with an application"
#~ " context pushed, so your command and"
#~ " extensions have access to the app"
#~ " and its configuration. If you create"
#~ " a command using the Click "
#~ ":func:`~click.command` decorator instead of "
#~ "the Flask decorator, you can use "
#~ ":func:`~cli.with_appcontext` to get the same"
#~ " behavior. ::"
#~ msgstr ""
#~ "Flaskアプリの :attr:`~Flask.cli` の "
#~ ":meth:`~cli.AppGroup.command` "
#~ "デコレータ（decorator）を使って追加されたコマンドは、（訳注: Flask内で各リクエストのapplication"
#~ " contextをstack構造で格納・管理している領域に）pushされたapplication "
#~ "contextと一緒に実行されるため、あなたのコマンドおよびFlask拡張はapp（のインスタンス）およびその設定情報にアクセスが可能です。もしFlaskのデコレータの代わりにClickの"
#~ " :func:`~click.command` デコレータを使ってコマンドを作成した場合、同じ振る舞いを得るために "
#~ ":func:`~cli.with_appcontext` を使用できます。::"

# 0b9e54a631cf4c9298d2c6583b7e9c56
#~ msgid "If you're sure a command doesn't need the context, you can disable it::"
#~ msgstr "もしコマンドがcontextを必要としないことが分かっている場合は、application contextへのアクセスを無効にできます::"

#~ msgid ""
#~ "PyCharm Professional provides a special "
#~ "Flask run configuration. For the "
#~ "Community Edition, we need to configure"
#~ " it to call the ``flask run`` "
#~ "CLI command with the correct environment"
#~ " variables. These instructions should be"
#~ " similar for any other IDE you "
#~ "might want to use."
#~ msgstr ""
#~ "PyCharm Professional は特殊なFlask実行設定を提供します。Community "
#~ "Editionでは、適切な環境変数を使って ``flask run`` "
#~ "CLIコマンドを呼び出すための設定をする必要があります。これらの指定内容は、あなたが使いたい他のどんなIDEでも似たようなものでしょう。"

# 26aa926f8c2d4ab5bb7e915bab4c6de6
#~ msgid ""
#~ "There's quite a few options to "
#~ "change, but once we've done it for"
#~ " one command, we can easily copy "
#~ "the entire configuration and make a "
#~ "single tweak to give us access to"
#~ " other commands, including any custom "
#~ "ones you may implement yourself."
#~ msgstr "変更できる多くのオプションがありますが、一度コマンドの１つで設定を済ませば簡単に、設定全体をコピーして、他のコマンドへ、自分で実装したカスタムコマンドも含めて、アクセスするように別々の微調整ができます。"

# ed0704bbb414408b9a0f8b198c8a22da
#~ msgid "Select *Module name* from the dropdown (**A**) then input ``flask``."
#~ msgstr "*Module name* をドロップダウン（**A**）から選択し、``flask`` と入力します。"

# cce44b761aeb43568f5a2b1ff9225ade
#~ msgid ""
#~ "The *Parameters* field (**B**) is set"
#~ " to the CLI command to execute "
#~ "(with any arguments). In this example"
#~ " we use ``run``, which will run "
#~ "the development server."
#~ msgstr ""
#~ "*Parameters* "
#~ "フィールド（**B**）を（引数と一緒に）実行するCLIコマンドに設定します。この例では、開発用サーバーを実行する "
#~ "``run`` コマンドを使っています。"

#~ msgid ""
#~ "You can skip this next step if "
#~ "you're using :ref:`dotenv`. We need to"
#~ " add an environment variable (**C**) "
#~ "to identify our application. Click on"
#~ " the browse button and add an "
#~ "entry with ``FLASK_APP`` on the left "
#~ "and the Python import or file on"
#~ " the right (``hello`` for example). "
#~ "Add an entry with ``FLASK_ENV`` and "
#~ "set it to ``development``."
#~ msgstr ""
#~ ":ref:`dotenv` "
#~ "を使っている場合は、次のステップはスキップできます。（そうでない場合には）自分のアプリケーションを特定するために、環境変数（**C**）を追加する必要があります。ブラウズボタン（訳注:"
#~ " 上の画像の「…」のようなボタン）をクリックし、左側は ``FLASK_APP`` "
#~ "で右側はPythonのimportまたはファイル（この例では "
#~ "``hello``）を使ったエントリーを追加します。``FLASK_ENV`` を使ってエントリーを追加し、それを "
#~ "``development`` に設定します。"

# c181875cc0e14b91a143f6c26cb46e5b
#~ msgid ""
#~ "Next we need to set the working"
#~ " directory (**D**) to be the folder"
#~ " where our application resides."
#~ msgstr "次に作業ディレクトリ（**D**）を、アプリケーションがあるフォルダに設定する必要があります。"

