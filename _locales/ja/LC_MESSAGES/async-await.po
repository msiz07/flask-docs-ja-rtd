# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.2.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-26 22:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../flask/docs/async-await.rst:4
msgid "Using ``async`` and ``await``"
msgstr "``async`` と ``await`` の使用"

#: ../../flask/docs/async-await.rst:8
msgid ""
"Routes, error handlers, before request, after request, and teardown "
"functions can all be coroutine functions if Flask is installed with the "
"``async`` extra (``pip install flask[async]``). This allows views to be "
"defined with ``async def`` and use ``await``."
msgstr ""
"もしFlaskが ``async`` 追加指定を使って（``pip install flask[async]`` を"
"使って）インストールされた場合、経路制御（Route）、エラー処理（error "
"handler）、リクエスト前処理、リクエスト後処理、廃棄処理（teardown）の関数"
"は全てコルーチンの関数にできます。これにより、viewは ``async def`` を使って"
"定義し、``await`` が使えるようになります。（訳注: コルーチン、async、await"
"はPythonの非同期・並列処理サポート機能に関する概念やキーワードです。"
"コルーチンは関数のように呼び出せるもので、generatorや非同期用処理なども"
"含んだ、関数よりも汎用的なものを指す概念です。async、awaitは非同期処理・"
"並列処理をプログラミングするときに使えるキーワードです）"

#: ../../flask/docs/async-await.rst:20
msgid ""
"Pluggable class-based views also support handlers that are implemented as"
" coroutines. This applies to the "
":meth:`~flask.views.View.dispatch_request` method in views that inherit "
"from the :class:`flask.views.View` class, as well as all the HTTP method "
"handlers in views that inherit from the :class:`flask.views.MethodView` "
"class."
msgstr ""
"差し込み可能（pluggable）なクラスベースのviewはコルーチンとして実装された"
"処理器（handler）もサポートします。これは :class:`flask.views.MethodView` "
"クラスを継承したview の中にある全てのHTTPメソッドのハンドラと同様、"
":class:`flask.views.View` クラスから継承したviewの中の :meth:"
"`~flask.views.View.dispatch_request` メソッドにも当てはまります。（訳注: "
"MethodViewクラスでは「get」「post」などのメソッドが対応するHTTPメソッドを"
"処理するview関数に相当するハンドラになり、Viewクラスではdispatch_request()"
"を実行するとview関数が返ります。「:doc:`/views`」参照）"

#: ../../flask/docs/async-await.rst:26
msgid "Using ``async`` on Windows on Python 3.8"
msgstr "WindowsのPython 3.8での ``async`` の使用"

#: ../../flask/docs/async-await.rst:28
msgid ""
"Python 3.8 has a bug related to asyncio on Windows. If you encounter "
"something like ``ValueError: set_wakeup_fd only works in main thread``, "
"please upgrade to Python 3.9."
msgstr ""
"Windowsでは、Python 3.8はasyncioに関連するバグがあります。もし "
"``ValueError: set_wakeup_fd only works in main thread`` のようなものに出く"
"わしたら、Python 3.9にアップグレードしてください。"

#: ../../flask/docs/async-await.rst:32
msgid "Using ``async`` with greenlet"
msgstr "greenletと合わせた ``async`` の使用"

#: ../../flask/docs/async-await.rst:34
msgid ""
"When using gevent or eventlet to serve an application or patch the "
"runtime, greenlet>=1.0 is required. When using PyPy, PyPy>=7.3.7 is "
"required."
msgstr ""
"geventまたはgreenletを使ってアプリケーションを提供したり実行環境に手を加え"
"たりしているときは、greenlet>=1.0が必要です。PyPyを使っているときは、"
"PyPy>=7.3.7が必要です。"

#: ../../flask/docs/async-await.rst:40
msgid "Performance"
msgstr "性能"

#: ../../flask/docs/async-await.rst:42
msgid ""
"Async functions require an event loop to run. Flask, as a WSGI "
"application, uses one worker to handle one request/response cycle. When a"
" request comes in to an async view, Flask will start an event loop in a "
"thread, run the view function there, then return the result."
msgstr ""
"async関数を走らせるにはevent loopが必要です。WSGIアプリケーションである"
"Flaskは、リクエスト／レスポンスの1回のサイクルを処理するのに１つのworkerを"
"使います。リクエストがasyncのviewに来たとき、Flaskはスレッドの中でevent "
"loopを開始し、そこでview関数を走らせ、そして結果を返します。"

#: ../../flask/docs/async-await.rst:47
msgid ""
"Each request still ties up one worker, even for async views. The upside "
"is that you can run async code within a view, for example to make "
"multiple concurrent database queries, HTTP requests to an external API, "
"etc. However, the number of requests your application can handle at one "
"time will remain the same."
msgstr ""
"各リクエストは、asyncのviewであっても、変わらず１つのworkerと結びつきます。"
"有利になる点はviewの中で、例えばデータベースへの問合せ、外部APIへのHTTP"
"リクエストなどを複数並列に作成するような、非同期のコードを実行できること"
"です。しかしながら、アプリケーションが同時に処理できるリクエストの数は"
"同じままです。"

#: ../../flask/docs/async-await.rst:53
msgid ""
"**Async is not inherently faster than sync code.** Async is beneficial "
"when performing concurrent IO-bound tasks, but will probably not improve "
"CPU-bound tasks. Traditional Flask views will still be appropriate for "
"most use cases, but Flask's async support enables writing and using code "
"that wasn't possible natively before."
msgstr ""
"**Asyncは同期処理するコードと比べて本質的に高速なわけではありません。** "
"Asyncは並列な入出力処理に結び付けられるタスク（concurrent IO-bound tasks）"
"の性能には恩恵がありますが、CPUに結び付けられるタスク（CPU-bound tasks）の"
"改善にはおそらく影響はありません。従来のFlaskのviewでもほとんどの使用状況"
"では適切でしょうが、Flaskのasyncサポートは、以前だと元々はできなかった"
"コードを書いて使えるようにします。"

#: ../../flask/docs/async-await.rst:61
msgid "Background tasks"
msgstr "バックグラウンドのタスク"

#: ../../flask/docs/async-await.rst:63
msgid ""
"Async functions will run in an event loop until they complete, at which "
"stage the event loop will stop. This means any additional spawned tasks "
"that haven't completed when the async function completes will be "
"cancelled. Therefore you cannot spawn background tasks, for example via "
"``asyncio.create_task``."
msgstr ""
"asyncの関数は、完了するまでevent loopの中で走り、完了した段階でevent loop"
"は停止します。これは、asyncの関数が完了したときにはまだ完了していない、"
"追加で産み出された（spawn）あらゆる（子供の）タスクは中止されることを意味"
"します。従って、例えば ``asyncio.create_task`` をとおして、バックグラウンド"
"の（子供の）タスクを生み出すことはできません。"

#: ../../flask/docs/async-await.rst:69
msgid ""
"If you wish to use background tasks it is best to use a task queue to "
"trigger background work, rather than spawn tasks in a view function. With"
" that in mind you can spawn asyncio tasks by serving Flask with an ASGI "
"server and utilising the asgiref WsgiToAsgi adapter as described in "
":doc:`deploying/asgi`. This works as the adapter creates an event loop "
"that runs continually."
msgstr ""
"もしバックグラウンドのタスクを使いたい願望がある場合、view関数の中で（子供"
"の）タスクを産み出す（spawn）よりも、バックグラウンドのタスクを働かせる引き"
"金を引く、タスクのキューを使うのが最良です。それに注意しながら、ASGIサーバ"
"と一緒にFlaskを提供し、:doc:`deploying/asgi` で説明されているようにasgiref"
"のWsgiToAsgiアダプタを利用することで、（子供の）asyncioのタスクを生み出す"
"ことができます。これは、そのアダプタが走り続けるevent loopを作るように働き"
"ます。"

#: ../../flask/docs/async-await.rst:78
msgid "When to use Quart instead"
msgstr "Quartを代わりに使うとき"

#: ../../flask/docs/async-await.rst:80
msgid ""
"Flask's async support is less performant than async-first frameworks due "
"to the way it is implemented. If you have a mainly async codebase it "
"would make sense to consider `Quart`_. Quart is a reimplementation of "
"Flask based on the `ASGI`_ standard instead of WSGI. This allows it to "
"handle many concurrent requests, long running requests, and websockets "
"without requiring multiple worker processes or threads."
msgstr ""
"Flaskのasyncのサポートは、その実装方法のために、async第一優先のフレーム"
"ワークに比べれば高性能ではありません。もしasyncをふんだんに使ったコードが"
"あれば、`Quart`_ を検討するのは合理的です。Qartは、WSGIの代わりに `ASGI`_ "
"標準をベースにした、Flaskの再実装です。これは、多くの並列なリクエスト、"
"時間のかかるリクエスト、websocketsを、複数のworkerプロセスまたはスレッドを"
"必要とせずに処理できるようにします。"

#: ../../flask/docs/async-await.rst:87
msgid ""
"It has also already been possible to run Flask with Gevent or Eventlet to"
" get many of the benefits of async request handling. These libraries "
"patch low-level Python functions to accomplish this, whereas ``async``/ "
"``await`` and ASGI use standard, modern Python capabilities. Deciding "
"whether you should use Flask, Quart, or something else is ultimately up "
"to understanding the specific needs of your project."
msgstr ""
"asyncなリクエスト処理の恩恵の多くを得るために、GeventまたはEventletを使って"
"Flaskを走らせることも既に可能です。これらのライブラリ（GeventやEventlet）は"
"Pythonの低レベルの機能に手を加えて（patch）達成しますが、``async``／"
"``await`` とASGIは標準的な、最近のPythonの機能になります。Flask、Quart、"
"もしくは他の何かを使うかどうかの決定は、自分のプロジェクトに固有なニーズの"
"理解に最終的には依存します。"

#: ../../flask/docs/async-await.rst:99
msgid "Extensions"
msgstr "Flask拡張"

#: ../../flask/docs/async-await.rst:101
msgid ""
"Flask extensions predating Flask's async support do not expect async "
"views. If they provide decorators to add functionality to views, those "
"will probably not work with async views because they will not await the "
"function or be awaitable. Other functions they provide will not be "
"awaitable either and will probably be blocking if called within an async "
"view."
msgstr ""
"Flaskのasyncサポートより前からあるFlask拡張は、asyncのviewを予想していま"
"せん。もしそれらがviewに機能を追加するデコレータ（訳注: 例えば「def "
"func1():」のような関数定義の行の前に「@aaa.bbb」のような行を書いて機能追加"
"するもの）を提供している場合、それらは関数をawaitしたりawaitableであったり"
"はしないため、おそらくasyncのviewと一緒では働きません。それらのFlask拡張が"
"提供するデコレータ以外の機能もawaitableではなさそうであり、そしてasyncの"
"viewの中で呼ばれた場合は、おそらく（非同期・並列処理はせず）ブロックする"
"でしょう。"

#: ../../flask/docs/async-await.rst:107
msgid ""
"Extension authors can support async functions by utilising the "
":meth:`flask.Flask.ensure_sync` method. For example, if the extension "
"provides a view function decorator add ``ensure_sync`` before calling the"
" decorated function,"
msgstr ""
"Flask拡張の作者は、:meth:`flask.Flask.ensure_sync` メソッドを利用すること"
"でasyncの関数をサポートできます。例えば、もしFlask拡張がview関数のデコ"
"レータを提供する場合、修飾される関数を呼び出す前に ``ensure_sync`` を加え"
"ます、"

#: ../../flask/docs/async-await.rst:122
msgid ""
"Check the changelog of the extension you want to use to see if they've "
"implemented async support, or make a feature request or PR to them."
msgstr ""
"自分が使いたいFlask拡張は、asyncのサポートを実装しているか見るために"
"chengelogをチェックするか、そのFlask拡張に機能要求もしくはPull Requestを"
"出してください。"

#: ../../flask/docs/async-await.rst:127
msgid "Other event loops"
msgstr "その他のevent loop"

#: ../../flask/docs/async-await.rst:129
msgid ""
"At the moment Flask only supports :mod:`asyncio`. It's possible to "
"override :meth:`flask.Flask.ensure_sync` to change how async functions "
"are wrapped to use a different library."
msgstr ""
"現時点では、Flaskは :mod:`asyncio` だけをサポートします。他のライブラリを"
"使うためにasyncの関数の包み方（how async functions are wrapped）を変える"
"ために、:meth:`flask.Flask.ensure_sync` を上書きすることは可能です。"

#~ msgid ""
#~ "Routes, error handlers, before request, "
#~ "after request, and teardown functions "
#~ "can all be coroutine functions if "
#~ "Flask is installed with the ``async``"
#~ " extra (``pip install flask[async]``). This"
#~ " allows views to be defined with "
#~ "``async def`` and use ``await``."
#~ msgstr ""

#~ msgid ""
#~ "Routes, error handlers, before request, "
#~ "after request, and teardown functions "
#~ "can all be coroutine functions if "
#~ "Flask is installed with the ``async``"
#~ " extra (``pip install flask[async]``). It"
#~ " requires Python 3.7+ where "
#~ "``contextvars.ContextVar`` is available. This "
#~ "allows views to be defined with "
#~ "``async def`` and use ``await``."
#~ msgstr ""

#~ msgid ""
#~ "If you wish to use background "
#~ "tasks it is best to use a "
#~ "task queue to trigger background work,"
#~ " rather than spawn tasks in a "
#~ "view function. With that in mind "
#~ "you can spawn asyncio tasks by "
#~ "serving Flask with an ASGI server "
#~ "and utilising the asgiref WsgiToAsgi "
#~ "adapter as described in :ref:`asgi`. "
#~ "This works as the adapter creates "
#~ "an event loop that runs continually."
#~ msgstr ""

